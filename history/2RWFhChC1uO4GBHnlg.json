[{
  "history_id" : "wyxgac3ynzm",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603319,
  "history_notes" : null,
  "history_process" : "6up921",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "3doxixe74x4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603349,
  "history_notes" : null,
  "history_process" : "xpdg66",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "8oz53tlq3ti",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603354,
  "history_notes" : null,
  "history_process" : "xlayd5",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "h4gkz7hwtzk",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603415,
  "history_notes" : null,
  "history_process" : "argv3i",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "ss2adj6onjj",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603420,
  "history_notes" : null,
  "history_process" : "l8vlic",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "1vv9vtc7v2t",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603430,
  "history_notes" : null,
  "history_process" : "wny2dz",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "blynwqvtekh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603435,
  "history_notes" : null,
  "history_process" : "3asyzj",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "uud92z5qsxa",
  "history_input" : "# install all dependencies\n# NASA-GEOWEAVER: Environment setting\n\nimport os\nimport sys\nimport subprocess\nimport pkg_resources\n\nwith open('requirements.txt','w') as out:\n  out.write('''\nabsl-py==1.0.0\naffine==2.3.1\nasttokens==2.0.5\nastunparse==1.6.3\nattrs==21.4.0\nautokeras==1.0.18\nbackcall==0.2.0\ncachetools==5.0.0\ncertifi==2021.10.8\ncftime==1.6.0\ncharset-normalizer==2.0.12\nclick==8.1.3\nclick-plugins==1.1.1\ncligj==0.7.2\ncmaps==1.0.5\ncycler==0.11.0\ndecorator==5.1.1\nearthpy==0.9.4\nexecuting==0.8.3\nFiona==1.8.21\nflatbuffers==2.0\nfonttools==4.29.1\ngast==0.5.3\ngeopandas==0.10.2\nglob2==0.7\ngoogle-auth==2.6.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngrpcio==1.44.0\nh5py==3.6.0\nidna==3.3\nimageio==2.19.0\nimageio-ffmpeg==0.4.7\nimportlib-metadata==4.11.2\nipython==8.1.1\njedi==0.18.1\njoblib==1.1.0\nkaleido==0.2.1\nkeras==2.8.0\nKeras-Preprocessing==1.1.2\nkeras-tuner==1.1.0\nkiwisolver==1.3.2\nkt-legacy==1.0.4\nlibclang==13.0.0\nMarkdown==3.3.6\nmatplotlib==3.5.1\nmatplotlib-inline==0.1.3\nmunch==2.5.0\nnetCDF4==1.5.8\nnetworkx==2.8\nnumpy==1.22.2\noauthlib==3.2.0\nopencv-python==4.5.5.64\nopt-einsum==3.3.0\npackaging==21.3\npandas==1.4.1\nparso==0.8.3\npathlib==1.0.1\npathlib2==2.3.7.post1\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.0.1\nplotly==5.7.0\nprompt-toolkit==3.0.28\nprotobuf==3.19.4\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\nPygments==2.11.2\npyparsing==3.0.7\npyproj==3.3.1\npython-dateutil==2.8.2\npytz==2021.3\nPyWavelets==1.3.0\nrasterio==1.2.10\nrequests==2.27.1\nrequests-oauthlib==1.3.1\nrsa==4.8\nscikit-image==0.19.2\nscikit-learn==1.0.2\nscipy==1.8.0\nseaborn==0.11.2\nShapely==1.8.2\nsix==1.16.0\nsklearn==0.0\nsnuggs==1.4.7\nstack-data==0.2.0\ntenacity==8.0.1\ntensorboard==2.8.0\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.8.0\ntensorflow-gpu==2.8.0\ntensorflow-io-gcs-filesystem==0.24.0\ntermcolor==1.1.0\ntf-estimator-nightly==2.8.0.dev2021122109\nthreadpoolctl==3.1.0\ntifffile==2022.5.4\ntraitlets==5.1.1\ntyping_extensions==4.1.1\nurllib3==1.26.8\nwcwidth==0.2.5\nWerkzeug==2.0.3\nwrapt==1.13.3\nxarray==2022.3.0\nxgboost==1.6.0\nzipp==3.7.0''')\n  \npython = sys.executable\nsubprocess.check_call([python, '-m', 'pip', 'install', '-r', 'requirements.txt'], stdout=subprocess.DEVNULL)\n    #subprocess.check_call(\n        #[python, '-m', 'conda', 'install', '-c','conda-forge','xgboost'],\n      #stdout=subprocess.DEVNULL)\n\n\n################################\n#  END OF PACKAGES Installation  #\n\n\n# Creating directoris \nfrom pathlib import Path\nhome = str(Path.home())\nfolders = ['cmaq/exploratory_analysis', 'cmaq/prediction_maps', 'cmaq/prediction_files','cmaq/models','cmaq/observation']\nfor folder in folders:\n  paths=Path(home+'/'+folder)\n  paths.mkdir(parents=True,exist_ok=True)\n  \n  ###############################\n  # END OF DIRECTORY CREATION #",
  "history_output" : "Running",
  "history_begin_time" : 1664422604536,
  "history_end_time" : 1664422663904,
  "history_notes" : null,
  "history_process" : "9xdvh6",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "fd2yo0tw5j8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603465,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "v1z8t5i8d44",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603476,
  "history_notes" : null,
  "history_process" : "b8uv5z",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "t65insrd57b",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603481,
  "history_notes" : null,
  "history_process" : "iicy7w",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "gmm3uo56ouy",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603484,
  "history_notes" : null,
  "history_process" : "fsk7f2",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "jo4yrrs98k4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603488,
  "history_notes" : null,
  "history_process" : "is1w3m",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "bycbopix4tp",
  "history_input" : "# All the utility functions that most steps in CMAQ-AI need\n# this file should not contain any direct call of function\n# it should be dedicated to define functions or variables\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nfrom datetime import date, datetime, timedelta\nimport matplotlib.pyplot as plt\n\n# home directory\nhome = str(Path.home())\ncmaq_folder = \"/groups/ESS/zsun/cmaq/\" # change if you want to use your own folder\n# cmaq_folder = \"/Users/uhhmed/localCMAQ\" # change if you want to use your own folder\n\ndef get_days_list(sdate, edate):\n  days=[]\n  \n  delta = edate - sdate       # as timedelta\n\n  for i in range(delta.days + 1):\n    day = sdate + timedelta(days=i)\n    list_day=day.strftime('%Y%m%d')\n    days.append(list_day)\n  # add one more day\n  one_more_day = sdate + timedelta(days=delta.days + 1)\n  list_day=one_more_day.strftime('%Y%m%d')\n  days.append(list_day)\n  \n  return days\n\ndef create_and_clean_folder(folder_path):\n  os.makedirs(folder_path, exist_ok=True)\n  # clean all files inside the folder\n  for f in os.listdir(folder_path):\n    os.remove(os.path.join(folder_path, f))\n\ndef remove_file(file_path):\n  print(f'remove old files{file_path}')\n  if os.path.exists(file_path):\n    os.remove(file_path)\n    \ndef turn_2_digits(a):\n  return f\"{a:02}\"",
  "history_output" : "",
  "history_begin_time" : 1664422593052,
  "history_end_time" : 1664422638264,
  "history_notes" : null,
  "history_process" : "h76ld0",
  "host_id" : "aqt8fv",
  "indicator" : "Done"
},{
  "history_id" : "kim1319x4yl",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603508,
  "history_notes" : null,
  "history_process" : "s6hbic",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "okrc78fgtoe",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1664422603512,
  "history_notes" : null,
  "history_process" : "pvzabv",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "kfgpfg2xy8k",
  "history_input" : "# use the trained model to predict on the testing data and save the results to prediction_rf.csv\n\nimport pandas as pd\nimport pickle\nfrom pathlib import Path\nfrom time import sleep\nimport glob, os\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom cmaq_ai_utils import *\nfrom scipy import spatial\n\n# from geopy import distance\nfrom math import radians, cos, sin, asin, sqrt\nimport time\n\n\ndef match_closest_airnow_with_gridCell():\n  \"\"\"\n  Match all airnow stations to closest grid cell.\n  \"\"\"\n  print(\"Starting!\")\n  remove_file(f'{cmaq_folder}/updated_station_to_cell.csv')\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  stations = pd.read_csv(f'{cmaq_folder}/AQF5X_Hourly_2022091304.dat', sep=', ', skiprows=1, names=['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)', 'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'])\n\n  # stations = stations.replace(',','', regex=True)\n  print(stations.columns)\n  print(stations[['Latitude', 'Longitude']])\n  station_locations = stations[['Latitude', 'Longitude']].astype(float).values\n  print(\"station_locations - \", station_locations)\n  print(\"station_locations.shape: \", station_locations.shape)\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0]) # just pick the first one to generate the mapping\n  print(testing_df['YYYYMMDDHH'].values[0])\n\n  closest_stations = []\n  cmaq_cell_array = []\n  final_mapping_array = []\n  for j, cmaq in testing_df.iterrows():\n    cmaq_location = [cmaq['Latitude'], cmaq['Longitude']]\n    cmaq_cell_array.append(cmaq_location)\n  \n  print(\"cmaq_cell_array.shape: \", len(cmaq_cell_array))\n  \n  for station_loc in station_locations:\n    distance,index = spatial.KDTree(cmaq_cell_array).query(station_loc)\n    if distance > 0.2:\n      continue\n    closest_cell = cmaq_cell_array[index]\n    new_row = [station_loc[0], station_loc[1], closest_cell[0], closest_cell[1]]\n    final_mapping_array.append(new_row)\n\n  print(\"final_mapping_array length: \", len(final_mapping_array))\n  closest = pd.DataFrame(final_mapping_array, columns=[\"Lat_airnow\", \"Lon_airnow\", \"Lat_cmaq\", \"Lon_cmaq\"])\n  #closest.drop_duplicates().reset_index(drop=True)\n  print(\"Saving fixed_station_cmaq_location.csv...\")\n  closest.to_csv(f'{cmaq_folder}/updated_station_to_cell.csv',index=False)\n\n  \n\ndef prepare_update_grid_cells_with_distance(station_distance=0.2):\n  \"\"\"\n  Get all grid cells within the specified distance around airnow stations\n  args: station_distance, default: 50km (0.2 degrees)\n  \"\"\"\n  print(\"Starting!\")\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  airnow_obs_path = '/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X'\n  stations = pd.read_csv(f'{cmaq_folder}/station_cmaq_location.csv')\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0])\n  print(testing_df['YYYYMMDDHH'].values[0])\n  file_dateTime = testing_df['YYYYMMDDHH'].values[0]\n  print(\"copying testing_df to new_df\")\n  new_df = testing_df.copy()\n  new_df.drop(new_df.index, inplace=True)\n  print(testing_df.shape, new_df.shape)\n\n  for j, cmaq in testing_df.iterrows():\n    if j % 1000 == 0:\n  \t  print(\"Looping through: \", j)\n    for i, station in stations.iterrows():\n      #print(\"inner-Looping through: \", i)\n      airnow_stations = (station['Latitude_y'], station['Longitude_y'])\n      prediction_location = (cmaq['Latitude'], cmaq['Longitude'])\n        \n      if (station['Latitude_y'] < cmaq['Latitude'] + station_distance) and (station['Latitude_y'] > cmaq['Latitude'] - station_distance) and (station['Longitude_y'] < cmaq['Longitude'] + station_distance) and (station['Longitude_y'] > cmaq['Longitude'] - station_distance):\n        new_df.loc[j] = cmaq\n        break\n  new_df.to_csv(f'{cmaq_folder}/prediction_files/update_cell.csv',index=False)\n\ndef prepare_update_grid_cells_with_distance(station_distance=0.2):\n  \"\"\"\n  Get all grid cells within the specified distance around airnow stations\n  args: station_distance, default: 50km (0.2 degrees)\n  \"\"\"\n  print(\"Starting!\")\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  stations = pd.read_csv(f'{cmaq_folder}/station_cmaq_location.csv')\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0])\n  print(testing_df['YYYYMMDDHH'].values[0])\n  file_dateTime = testing_df['YYYYMMDDHH'].values[0]\n  print(\"copying testing_df to new_df\")\n  new_df = testing_df.copy()\n  new_df.drop(new_df.index, inplace=True)\n  print(testing_df.shape, new_df.shape)\n\n  for j, cmaq in testing_df.iterrows():\n    if j % 1000 == 0:\n  \t  print(\"Looping through: \", j)\n    for i, station in stations.iterrows():\n      #print(\"inner-Looping through: \", i)\n      airnow_stations = (station['Latitude_y'], station['Longitude_y'])\n      prediction_location = (cmaq['Latitude'], cmaq['Longitude'])\n        \n      if (station['Latitude_y'] < cmaq['Latitude'] + station_distance) and (station['Latitude_y'] > cmaq['Latitude'] - station_distance) and (station['Longitude_y'] < cmaq['Longitude'] + station_distance) and (station['Longitude_y'] > cmaq['Longitude'] - station_distance):\n        new_df.loc[j] = cmaq\n        break\n  new_df.to_csv(f'{cmaq_folder}/prediction_files/update_cell.csv',index=False)\n  \n#prepare_update_grid_cells(0.2)\nmatch_closest_airnow_with_gridCell()",
  "history_output" : "Starting!\nremove old files/groups/ESS/zsun/cmaq//updated_station_to_cell.csv\nreading stations csv\nprepare_update_cell_csv.py:26: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n  stations = pd.read_csv(f'{cmaq_folder}/AQF5X_Hourly_2022091304.dat', sep=', ', skiprows=1, names=['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)', 'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'])\nIndex(['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)',\n       'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'],\n      dtype='object')\n       Latitude  Longitude\n0     31.169399 -81.496399\n1     42.062199 -87.673599\n2     39.758900 -86.397202\n3     40.931396 -81.123520\n4     43.435001 -88.527802\n...         ...        ...\n2915  35.913799 -81.191002\n2916  40.246990 -76.846985\n2917  39.818714 -75.413971\n2918  37.046902 -95.613297\n2919  32.791000 -79.959000\n\n[2920 rows x 2 columns]\nstation_locations -  [[ 31.169399 -81.496399]\n [ 42.062199 -87.673599]\n [ 39.7589   -86.397202]\n ...\n [ 39.818714 -75.413971]\n [ 37.046902 -95.613297]\n [ 32.791    -79.959   ]]\nstation_locations.shape:  (2920, 2)\nreading testing data csv\n2022080512\ncmaq_cell_array.shape:  117130\nfinal_mapping_array length:  2833\nSaving fixed_station_cmaq_location.csv...\n",
  "history_begin_time" : 1664422593667,
  "history_end_time" : 1664422855844,
  "history_notes" : null,
  "history_process" : "8i9ptn",
  "host_id" : "aqt8fv",
  "indicator" : "Done"
}]
