[{
  "history_id" : "0h0vdgw8du8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051701,
  "history_end_time" : 1666675051701,
  "history_notes" : null,
  "history_process" : "6up921",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "5k5hvg6v1cc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051779,
  "history_end_time" : 1666675051779,
  "history_notes" : null,
  "history_process" : "xpdg66",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "ahxqv4wfmws",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051796,
  "history_end_time" : 1666675051796,
  "history_notes" : null,
  "history_process" : "xlayd5",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "2umsunp335p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051808,
  "history_end_time" : 1666675051808,
  "history_notes" : null,
  "history_process" : "argv3i",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "zds3475rfby",
  "history_input" : "# use the trained model to predict on the testing data and save the results to prediction_rf.csv\n\nimport pandas as pd\nimport pickle\nfrom pathlib import Path\nfrom time import sleep\nimport glob, os\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom cmaq_ai_utils import *\n\ndef create_dataset(dataset, look_back=7):\n    dataX  = []\n    for i in range(len(dataset) - look_back - 1):\n        dataX.append(dataset[i:i + look_back])\n    return np.array(dataX)\n\ncreate_and_clean_folder(f\"{cmaq_folder}/prediction_files/\")\n\n# importing data\n# final=pd.read_csv(f\"{cmaq_folder}/testing_input_hourly/testing.csv\")\nprint(\"Reading all test_data files...\")\ntesting_path = f'{cmaq_folder}/testing_input_hourly'\nall_hourly_files = glob.glob(os.path.join(testing_path, \"test_data_*.csv\"))\ndf_from_each_hourly_file = (pd.read_csv(f) for f in all_hourly_files)\nprint(\"Done reading all test_data files!!!\")\n# load the model from disk\n# filename = f'{cmaq_folder}/models/rf_pycaret.sav'\nprint(\"Loading Model...\")\nfilename = f'{cmaq_folder}/models/attnRNN_o3_Jul.sav'\nloaded_model = pickle.load(open(filename, 'rb'))\nprint(\"Loaded Model!!!\")\n\nscaler = MinMaxScaler(feature_range=(0, 1))\n\nfor testing_df in df_from_each_hourly_file:\n  print(testing_df['YYYYMMDDHH'].values[0])\n  file_dateTime = testing_df['YYYYMMDDHH'].values[0]\n    \n  #X = testing_df.drop(['YYYYMMDDHH','Latitude','Longitude'],axis=1)\n  testing_df['time_of_day'] = (testing_df['hours'] % 24 + 4) // 4\n  \n  # Make coords even more coarse by rounding to closest multiple of 5 \n  # (e.g., 40, 45, 85, 55)\n  #testing_df['Latitude_ExtraCoarse'] = 0.1 * round(testing_df['Latitude']/0.1)\n  #testing_df['Longitude_ExtraCoarse'] = 0.1 * round(testing_df['Longitude']/0.1)\n\n  X_features = testing_df.drop(['YYYYMMDDHH','Latitude','Longitude', 'CO(moles/s)'],axis=1)\n  print(X_features.columns)\n  \n  dataset = X_features.values\n  dataset = dataset.astype('float32')\n\n  \n#   scaled = scaler.fit_transform(testing_df)\n  X = create_dataset(dataset, 7)\n#   X = np.reshape(X, (X.shape[0], X.shape[1], 18))\n\n# # making prediction\n  pred = loaded_model.predict(X)\n  print(type(pred))\n  print(pred.shape)\n#   pred = scaler.inverse_transform(pred)\n# adding prediction values to test dataset\n  #testing_df['prediction'] = testing_df['CMAQ12KM_O3(ppb)'].tolist()\n  testing_df['prediction'] = pd.Series(pred.flatten())\n  testing_df['prediction'] = testing_df['prediction'].replace(np.nan, 0)\n\n  testing_df = testing_df[['Latitude', 'Longitude','YYYYMMDDHH','prediction']]\n# saving the dataset into local drive\n  print(f'Saving: {cmaq_folder}/prediction_files/prediction_attnRNN_{file_dateTime}.csv')\n  testing_df.to_csv(f'{cmaq_folder}/prediction_files/prediction_attnRNN_{file_dateTime}.csv',index=False)",
  "history_output" : "Reading all test_data files...\nDone reading all test_data files!!!\nLoading Model...\n2022-10-25 01:37:43.014298: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/ohpc/pub/libs/hwloc/2.1.0/lib:/opt/ohpc/pub/mpi/libfabric/1.10.1/lib:/opt/ohpc/pub/mpi/ucx-ohpc/1.8.0/lib:/opt/ohpc/pub/mpi/openmpi4-gnu9/4.0.4/lib:/opt/ohpc/pub/compiler/gcc/9.3.0/lib64:/lib64\n2022-10-25 01:37:43.014331: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n2022-10-25 01:39:02.044680: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/ohpc/pub/libs/hwloc/2.1.0/lib:/opt/ohpc/pub/mpi/libfabric/1.10.1/lib:/opt/ohpc/pub/mpi/ucx-ohpc/1.8.0/lib:/opt/ohpc/pub/mpi/openmpi4-gnu9/4.0.4/lib:/opt/ohpc/pub/compiler/gcc/9.3.0/lib64:/lib64\n2022-10-25 01:39:02.044706: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n2022-10-25 01:39:02.044719: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (hopper1.orc.gmu.edu): /proc/driver/nvidia/version does not exist\n2022-10-25 01:39:02.044930: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\nLoaded Model!!!\n2022102209\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102209.csv\n2022102207\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102207.csv\n2022102200\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102200.csv\n2022102211\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102211.csv\n2022102120\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102120.csv\n2022102303\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102303.csv\n2022102304\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102304.csv\n2022102216\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102216.csv\n2022102218\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102218.csv\n2022102112\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102112.csv\n2022102223\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102223.csv\n2022102115\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102115.csv\n2022102201\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102201.csv\n2022102206\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102206.csv\n2022102208\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102208.csv\n2022102114\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102114.csv\n2022102113\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102113.csv\n2022102222\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102222.csv\n2022102219\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102219.csv\n2022102305\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102305.csv\n2022102217\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102217.csv\n2022102210\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102210.csv\n2022102121\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102121.csv\n2022102302\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102302.csv\n2022102221\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102221.csv\n2022102117\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102117.csv\n2022102119\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102119.csv\n2022102308\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102308.csv\n2022102213\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102213.csv\n2022102122\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102122.csv\n2022102301\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102301.csv\n2022102306\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102306.csv\n2022102214\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102214.csv\n2022102205\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102205.csv\n2022102202\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102202.csv\n2022102310\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102310.csv\n2022102307\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102307.csv\n2022102215\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102215.csv\n2022102212\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102212.csv\n2022102123\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102123.csv\n2022102300\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102300.csv\n2022102309\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102309.csv\n2022102118\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102118.csv\n2022102116\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102116.csv\n2022102220\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102220.csv\n2022102203\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102203.csv\n2022102311\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102311.csv\n2022102204\nIndex(['CMAQ12KM_O3(ppb)', 'CMAQ12KM_NO2(ppb)', 'CMAQ12KM_CO(ppm)',\n       'CMAQ_OC(ug/m3)', 'PRSFC(Pa)', 'PBL(m)', 'TEMP2(K)', 'WSPD10(m/s)',\n       'WDIR10(degree)', 'RGRND(W/m2)', 'CFRAC', 'month', 'day', 'hours',\n       'time_of_day'],\n      dtype='object')\n<class 'numpy.ndarray'>\n(117122, 1)\nSaving: /groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102204.csv\n",
  "history_begin_time" : 1666676212488,
  "history_end_time" : 1666676513248,
  "history_notes" : null,
  "history_process" : "l8vlic",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "mqjsfw60dow",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051894,
  "history_end_time" : 1666675051894,
  "history_notes" : null,
  "history_process" : "wny2dz",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "j5f7m5rsulw",
  "history_input" : "# load the prediction_rf.csv into a NetCDF file for visualization\nfrom cmaq_ai_utils import *\n\n# Auto date method\nsdate, edate = get_date_range_auto(days_ago=4)\n\n# Manual date method\n# sdate = date(2022, 8, 6)   # start date\n# edate = date(2022, 8, 7)   # end date\n\ndays = get_days_list(sdate, edate)\n\nprediction_path = f\"{cmaq_folder}/prediction_files/\"\n\nall_hourly_files = sorted(glob.glob(os.path.join(prediction_path, \"*.csv\")))\n# print(\"overall hourly files: \", all_hourly_files)\n\nfor i in range(len(days)-1):\n  print(days[i])\n  \n  df_cdf = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+days[i+1]+\"_extracted.nc\")\n  \n  print(\"single day hourly files: \", all_hourly_files[i*24:(i+1)*24])\n  df_from_each_hourly_file = (pd.read_csv(f) for f in all_hourly_files[i*24:(i+1)*24])\n  \n  df_csv = pd.concat(df_from_each_hourly_file, ignore_index=True)\n\n  reshaped_prediction = df_csv['prediction'].to_numpy().reshape(24, 265, 442)\n  print(reshaped_prediction.shape)\n  \n  # Remove \"LAY\" Dimension in O3 variable already in nc file.\n  reduced_dim = df_cdf['O3'].sel(LAY=1, drop=True)\n\n  # Swap values from original nc file with new prediction data\n  reduced_dim.values = reshaped_prediction\n\n  # Apply changes to data variable in nc file\n  df_cdf['O3'] = (['TSTEP', 'ROW', 'COL'], reshaped_prediction)\n\n#   create_and_clean_folder(f\"{cmaq_folder}/prediction_nc_files\")\n  df_cdf.to_netcdf(f'{cmaq_folder}/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_'+days[i]+'_ML_extracted.nc')\n\n  print(f'Saved updated netCDF file: {cmaq_folder}/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_'+days[i]+'_ML_extracted.nc')",
  "history_output" : "20221021\nsingle day hourly files:  ['/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102112.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102113.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102114.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102115.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102116.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102117.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102118.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102119.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102120.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102121.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102122.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102123.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102200.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102201.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102202.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102203.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102204.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102205.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102206.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102207.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102208.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102209.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102210.csv', '/groups/ESS3/aalnaim/cmaq//prediction_files/prediction_attnRNN_2022102211.csv']\n(24, 265, 442)\nSaved updated netCDF file: /groups/ESS3/aalnaim/cmaq//prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_20221021_ML_extracted.nc\n20221022\nTraceback (most recent call last):\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/file_manager.py\", line 199, in _acquire_with_cache_info\n    file = self._cache[self._key]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/lru_cache.py\", line 53, in __getitem__\n    value = self._cache[key]\nKeyError: [<class 'netCDF4._netCDF4.Dataset'>, ('/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_20221023_extracted.nc',), 'r', (('clobber', True), ('diskless', False), ('format', 'NETCDF4'), ('persist', False))]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"processing_test_netcdf.py\", line 21, in <module>\n    df_cdf = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+days[i+1]+\"_extracted.nc\")\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/api.py\", line 495, in open_dataset\n    backend_ds = backend.open_dataset(\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/netCDF4_.py\", line 553, in open_dataset\n    store = NetCDF4DataStore.open(\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/netCDF4_.py\", line 382, in open\n    return cls(manager, group=group, mode=mode, lock=lock, autoclose=autoclose)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/netCDF4_.py\", line 330, in __init__\n    self.format = self.ds.data_model\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/netCDF4_.py\", line 391, in ds\n    return self._acquire()\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/netCDF4_.py\", line 385, in _acquire\n    with self._manager.acquire_context(needs_lock) as root:\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/contextlib.py\", line 113, in __enter__\n    return next(self.gen)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/file_manager.py\", line 187, in acquire_context\n    file, cached = self._acquire_with_cache_info(needs_lock)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/file_manager.py\", line 205, in _acquire_with_cache_info\n    file = self._opener(*self._args, **kwargs)\n  File \"src/netCDF4/_netCDF4.pyx\", line 2307, in netCDF4._netCDF4.Dataset.__init__\n  File \"src/netCDF4/_netCDF4.pyx\", line 1925, in netCDF4._netCDF4._ensure_nc_success\nFileNotFoundError: [Errno 2] No such file or directory: b'/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_20221023_extracted.nc'\n",
  "history_begin_time" : 1666676513333,
  "history_end_time" : 1666676599937,
  "history_notes" : null,
  "history_process" : "3asyzj",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "xg4h6dqyo3r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675051954,
  "history_end_time" : 1666675051954,
  "history_notes" : null,
  "history_process" : "9xdvh6",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "yebmdxsws9f",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n\n# Auto date method\nsdate, edate = get_date_range_auto(days_ago=4)\n\n# Manual date method\n# sdate = date(2022, 8, 6)   # start date\n# edate = date(2022, 8, 7)   # end date\n\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    \n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20221021\nlat shape (265, 442)\nSaving file: test_data_20221021_12.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_13.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_14.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_15.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_16.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_17.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_18.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_19.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_20.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_21.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_22.csv\nlat shape (265, 442)\nSaving file: test_data_20221021_23.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_00.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_01.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_02.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_03.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_04.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_05.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_06.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_07.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_08.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_09.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_10.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_11.csv\nGetting data for: 20221022\nlat shape (265, 442)\nSaving file: test_data_20221022_12.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_13.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_14.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_15.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_16.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_17.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_18.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_19.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_20.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_21.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_22.csv\nlat shape (265, 442)\nSaving file: test_data_20221022_23.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_00.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_01.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_02.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_03.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_04.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_05.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_06.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_07.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_08.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_09.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_10.csv\nlat shape (265, 442)\nSaving file: test_data_20221023_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1666675858149,
  "history_end_time" : 1666676111158,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "k39ukjlapys",
  "history_input" : "# merge all hourly testing data into daily files\n\nimport pandas as pd\nimport glob\nimport os\nfrom pathlib import Path\nfrom cmaq_ai_utils import *\n\ntesting_path = f'{cmaq_folder}/testing_input_hourly'\nall_hourly_files = glob.glob(os.path.join(testing_path, \"test_data_*.csv\"))   \n# advisable to use os.path.join as this makes concatenation OS independent\n\ndf_from_each_hourly_file = (pd.read_csv(f) for f in all_hourly_files)\ncmaq = pd.concat(df_from_each_hourly_file, ignore_index=True)\n\n# dropping unnecessary variables\ncmaq['YYYYMMDDHH'] = cmaq['YYYYMMDDHH'].map(str)\ncmaq['month'] = cmaq['YYYYMMDDHH'].str[4:6]\ncmaq['day'] = cmaq['YYYYMMDDHH'].str[6:8]\ncmaq['hours'] = cmaq['YYYYMMDDHH'].str[8:10]\n\nremove_file(f\"{testing_path}/testing.csv\")\ncmaq.to_csv(f\"{testing_path}/testing.csv\",index=False)\n\nprint('Done with generating testing.csv!')",
  "history_output" : "remove old files/groups/ESS3/aalnaim/cmaq//testing_input_hourly/testing.csv\nDone with generating testing.csv!\n",
  "history_begin_time" : 1666676111805,
  "history_end_time" : 1666676212439,
  "history_notes" : null,
  "history_process" : "b8uv5z",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "foxy4gnmc91",
  "history_input" : "#!/bin/bash\n# generate images and gif from the NetCDF files\n\nexport cmaq_folder=\"/groups/ESS3/aalnaim/cmaq\"\nmkdir $cmaq_folder\"/plots\"\nrm $cmaq_folder/plots/* # clean everything first\n\necho $(date -d '4 day ago' '+%Y%m%d')\n# Setting env variables\nexport YYYYMMDD_POST=$(date -d '4 day ago' '+%Y%m%d')\n\nexport stdate_post=$(date -d '4 day ago' '+%Y-%m-%d')\nexport eddate_post=$(date -d '3 day ago' '+%Y-%m-%d')\n\nexport stdate_file=$(date -d '4 day ago' '+%Y%m%d')\nexport eddate_file=$(date -d '3 day ago' '+%Y%m%d')\n\n# export YYYYMMDD_POST='20221002'\n# export stdate_post='2022-10-02'\n# export eddate_post='2022-10-03'\n# export stdate_file='20221002'\n# export eddate_file='20221003'\n\nexport postdata_dir=$cmaq_folder\"/prediction_nc_files\"\nexport mcip_dir=\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km\"\nexport dir_graph=$cmaq_folder\"/plots\"\n\nmodule load ncl\n\nrm $cmaq_folder/geoweaver_plot_daily_O3.ncl\ncat <<EOF >> $cmaq_folder/geoweaver_plot_daily_O3.ncl\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_code.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_csm.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/contributed.ncl\"\n\nsetvalues NhlGetWorkspaceObjectId()\n\"wsMaximumSize\": 600000000\nend setvalues\n\nbegin\n\ndate = getenv(\"YYYYMMDD_POST\")\nd1 = getenv(\"stdate_post\")\nd2 = getenv(\"eddate_post\")\n\ndFile1 = getenv(\"stdate_file\")\ndFile2 = getenv(\"eddate_file\")\n\ncmaq_dir = getenv(\"cmaq_folder\")\n\n;print(\"Passed Date: \"+date)\n\n;aconc_dir = getenv(\"postdata_dir\")\ngrid_dir = getenv(\"mcip_dir\")\nplot_dir = getenv(\"dir_graph\")\n\nprint(cmaq_dir+\"/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+dFile1+\"_ML_extracted.nc\")\ncdf_file1 = addfile(cmaq_dir+\"/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+dFile1+\"_ML_extracted.nc\",\"r\")\ncdf_file= addfile(grid_dir+\"/GRIDCRO2D_\"+date+\".nc\",\"r\")\n\nptime = (/\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\"/)\n\ntime = cdf_file1->TFLAG(:,0,:)\no3 = cdf_file1->O3(:,:,:) ;ppb\n;pm25 = cdf_file1->PM25_TOT(:,0,:,:)\n\n\nnt = dimsizes(o3(:,0,0))\nny = dimsizes(o3(0,:,0))\nnx = dimsizes(o3(0,0,:))\n\nprint(nt+\" \"+ny+\" \"+nx)\nprint(max(o3))\nprint(min(o3))\nprint(avg(o3))\n\n;print(max(pm25))\n;print(min(pm25))\n;print(avg(pm25))\n\n;print(time)\n\nlat = cdf_file->LAT(0,0,:,:)\nlon = cdf_file->LON(0,0,:,:)\n\no3@lat2d = lat\no3@lon2d = lon\n\nres = True\nres@gsnMaximize = True                ; maximize pot in frame\nres@gsnFrame = False               ; don't advance frame\nres@gsnDraw = False\n;res@gsnSpreadColors = True\nres@lbLabelAutoStride = True\n;res@lbBoxLinesOn = False\nres@pmLabelBarHeightF = 0.1\nres@pmLabelBarWidthF = 0.5\nres@cnFillOn=True\n;res@cnMonoFillPattern=True\n;res@cnMonoLineColor=True\nres@cnLinesOn=False\n;res@pmLabelBarDisplayMode=\"never\"\nres@gsnLeftString  = \"\";\nres@gsnRightString = \"\"\n\nres@mpLimitMode = \"LatLon\"\nres@mpMinLonF = -120 ;min(lon)+0.2\nres@mpMaxLonF = -70 ;max(lon)-0.2\nres@mpMinLatF = 25 ;min(lat)+0.05\nres@mpMaxLatF = 50 ;max(lat)-0.05\nres@mpDataBaseVersion = \"MediumRes\"\n;res@tiMainString = times(it)\nres@mpDataBaseVersion       = \"MediumRes\"\nres@mpDataSetName           = \"Earth..4\"\nres@mpAreaMaskingOn         = True\nres@mpOutlineBoundarySets = \"GeophysicalAndUSStates\"\nres@mpOutlineSpecifiers=\"United States : States\"\nres@mpLandFillColor         = \"white\"\nres@mpInlandWaterFillColor  = \"white\"\nres@mpOceanFillColor        = \"white\"\nres@mpGeophysicalLineColor    = \"Black\"\nres@mpGeophysicalLineThicknessF = 1.5\n\n;res@gsnSpreadColors         = True\nres@lbLabelAutoStride       = True\nres@lbLabelFont             = 25\nres@tiXAxisFont             = 25\nres@pmTickMarkDisplayMode   = \"Always\"\nres@tmXBLabelFont           = 25\nres@tmXBLabelFontHeightF    = 0.013\nres@tmXBLabelDeltaF         = -0.5\nres@tmYLLabelFont           = 25\nres@tmYLLabelFontHeightF    = 0.013\nres@tmXBLabelDeltaF         = -0.5\nres@tmXTLabelsOn            = False\nres@tmXTLabelFont           = 25\nres@tmXTLabelFontHeightF    = 0.013\nres@tmYRLabelsOn            = False\nres@tmYRLabelFont           = 25\nres@tmYRLabelFontHeightF    = 0.013\n\n\nres@mpProjection           = \"LambertConformal\" ;\"CylindricalEquidistant\"\nres@mpLambertParallel1F    = 33.\nres@mpLambertParallel2F    = 45.\nres@mpLambertMeridianF     = -98.\n\nres@cnLevelSelectionMode = \"ManualLevels\"\nres@cnMinLevelValF          = 0.\nres@cnMaxLevelValF          = 80\nres@cnLevelSpacingF         = 4\n\nres@txFont   = \"times-roman\"\nres@tiMainFont   = \"times-roman\"\n\ndo it = 0, nt-1\n  if (it .lt. 12) then\n    pdate=d1\n  else\n    pdate=d2\n  end if\n\n  pname=plot_dir+\"/testPlot_\"+pdate+\"_\"+ptime(it)\n  wks = gsn_open_wks(\"png\",pname)\n  gsn_define_colormap(wks, \"WhiteBlueGreenYellowRed\")\n\n  res@tiMainString = pdate+\" \"+ptime(it)+\" UTC O~B~3~N~ Forecast (ppbV)\"\n  plot = gsn_csm_contour_map(wks,o3(it,:,:),res)\n  draw(plot)\n  frame(wks)\n  delete(wks)\n  system(\"composite -geometry 100x70+900+900 /groups/ESS/zsun/cmaq/mason-logo-green.png \"+pname+\".png \"+pname+\".png\")\nend do\ndelete(res)\n\nend\nexit\nEOF\n\necho \"NCL script started!\"\nncl $cmaq_folder/geoweaver_plot_daily_O3.ncl \necho \"NCL script Done!\"\n\n# convert -delay 100 *.png 20220613_20220614.gif\necho \"Converting images to .gif started!\"\nconvert -delay 100 $cmaq_folder/plots/testPlot*.png $cmaq_folder/plots/\"Map_\"$YYYYMMDD_POST.gif\necho \"Converting images to .gif Done!\"\n\nif [ $? -eq 0 ]; then\n    echo \"Generating images/gif Completed Successfully\"\nelse\n    echo \"Generating images/gif Failed!\"\nfi\n",
  "history_output" : "mkdir: cannot create directory ‘/groups/ESS3/aalnaim/cmaq/plots’: File exists\n20221021\nNCL script started!\n Copyright (C) 1995-2019 - All Rights Reserved\n University Corporation for Atmospheric Research\n NCAR Command Language Version 6.6.2\n The use of this software is governed by a License Agreement.\n See http://www.ncl.ucar.edu/ for more details.\n(0)\t/groups/ESS3/aalnaim/cmaq/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_20221021_ML_extracted.nc\n(0)\t24 265 442\n(0)\t   1\n(0)\t   0\n(0)\t0.9999316998207121\nNCL script Done!\nConverting images to .gif started!\nConverting images to .gif Done!\nGenerating images/gif Completed Successfully\n",
  "history_begin_time" : 1666676600514,
  "history_end_time" : 1666676628713,
  "history_notes" : null,
  "history_process" : "iicy7w",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "efgrj0wm9ak",
  "history_input" : "#!/bin/bash\n# evaluate the prediction accuracy\n\ncmaq_folder=\"/groups/ESS3/aalnaim/cmaq\"\nmkdir -p $cmaq_folder/results/\nchmod +x $cmaq_folder/results/ -R\nrm $cmaq_folder/results/* # clean everything first\n\n# Setting env variables\nexport YYYYMMDD_POST=$(date -d '4 day ago' '+%Y%m%d')\n\nexport stdate_file=$(date -d '4 day ago' '+%Y%m%d')\nexport eddate_file=$(date -d '3 day ago' '+%Y%m%d')\n\n# export YYYYMMDD_POST='20220806'\n# export stdate_file='20220806'\n# export eddate_file='20220807'\n\nexport wfname=$cmaq_folder\"/results/geoweaver_evalution_\"$YYYYMMDD_POST\"_results.txt\"\n\nexport obs_dir_NCL=\"/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X\"\nexport ofname=\"/AQF5X_Hourly_\"\n\nexport postdata_dir=$cmaq_folder\"/prediction_nc_files/\"\n\nexport mfname=\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"$stdate_file\"_ML_extracted.nc\"\n\nexport grid_fname=\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/GRIDCRO2D_\"$YYYYMMDD_POST\".nc\" #This needs to be auto date\n\nexport dx=12000\n\nmodule load ncl\n\nrm $cmaq_folder/geoweaver_eva_daily_O3.ncl\n\ncat <<EOF >> $cmaq_folder/geoweaver_eva_daily_O3.ncl\n\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_code.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_csm.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/contributed.ncl\"\n\nsetvalues NhlGetWorkspaceObjectId()\n\"wsMaximumSize\": 600000000\nend setvalues\n\nbegin\nsdate=getenv(\"YYYYMMDD_POST\")\nwfname=getenv(\"wfname\")\nobs_dir=getenv(\"obs_dir_NCL\")\nofname=getenv(\"ofname\")\nmod_dir=getenv(\"postdata_dir\")\nmfname=getenv(\"mfname\")\ndkm=tofloat(getenv(\"dx\"))\ngrid_fname=(getenv(\"grid_fname\"))\n\nmaxdist=dkm/90000.0*1.414\n;maxarea=0.25\n;thd=70\n;maxdist=0.13*1.414\nmaxarea=0.25\nthd=35.0\n\n;-----read model lat lon------\n;read lat lon\nf1 = addfile(grid_fname,\"r\")\nmlat = f1->LAT(0,0,:,:)\nmlon = f1->LON(0,0,:,:)\ndelete(f1)\nmlat1d = ndtooned(mlat)\nmlon1d = ndtooned(mlon)\ndelete([/mlat,mlon/])\n\n;-----read cmaq results-----\nf2 = addfile(mod_dir+mfname,\"r\")\nmO3 = f2->O3(:,:,:) ;ppb\n\n\nnt = dimsizes(mO3(:,0,0))\nny = dimsizes(mO3(0,:,0))\nnx = dimsizes(mO3(0,0,:))\n\nm8O3 = new((/17,ny,nx/),\"double\")\nm8maxO3 = new((/ny,nx/),\"double\")\n\ndo ih=0,16\n  m8O3(ih,:,:)=dim_avg_n(mO3(ih:ih+7,:,:),0)\nend do\nm8maxO3 = dim_max_n(m8O3,0) ;type double\nmO31d_d=ndtooned(m8maxO3) ; type double\nmO31d=tofloat(mO31d_d)\n\ndelete([/f2,mO3,m8O3,m8maxO3/])\n\n;-----read obs-----\nsyyyy1=str_get_cols(sdate,0,3)\nsmm1=str_get_cols(sdate,4,5)\nsdd1=str_get_cols(sdate,6,7)\n\nymd=jul2greg(greg2jul(tointeger(syyyy1),tointeger(smm1),tointeger(sdd1),-1)+1)\nsyyyy2=tostring_with_format(ymd(0),\"%0.4i\")\nsmm2=tostring_with_format(ymd(1),\"%0.2i\")\nsdd2=tostring_with_format(ymd(2),\"%0.2i\")\n\ntolat=(/-999.0/) ;set the first data to 0\ntolon=tolat\ntoO3=tolat\n\ndo ih=12,35\n  if (ih.lt.24) then\n    shh=tostring_with_format(ih,\"%0.2i\")\n    syyyy=syyyy1\n    smm=smm1\n    sdd=sdd1\n  else\n    shh=tostring_with_format(ih-24,\"%0.2i\")\n    syyyy=syyyy2\n    smm=smm2\n    sdd=sdd2\n  end if\n  data=asciiread(obs_dir+ofname+syyyy+smm+sdd+shh+\".dat\",-1,\"string\")\n  xx=array_append_record(tolat,stringtofloat(str_get_field(data(1::), 2,\",\")),0)\n  yy=array_append_record(tolon,stringtofloat(str_get_field(data(1::), 3,\",\")),0)\n  zz=array_append_record(toO3,stringtofloat(str_get_field(data(1::), 4,\",\")),0)\n  delete([/tolat,tolon,toO3/])\n  tolat=xx\n  tolon=yy\n  toO3=zz\n  delete([/xx,yy,zz/])\n  delete(data)\nend do\n\ntoO3@_FillValue = -999.0\n\n;-----calculate max ave 8 hour o3-----\noflag=tolat*0+1\naa=ind((oflag.gt.0).and.(toO3.ge.0))\nii=0\nprint(\"8h start\")\nif (any(ismissing(aa))) then\n  iflag=0\nelse\n  iflag=1\n  olat=(/tolat(aa(0))/)\n  olon=(/tolon(aa(0))/)\n  oO3=(/-999.0/)\n  o8O3 = new(17,\"float\")\n  o8O3 = -999.0\nend if\ndelete(aa)\ndo while (iflag.gt.0)\n  aa=ind((tolat.eq.olat(ii)).and.(tolon.eq.olon(ii)).and.(toO3.ge.0))\n  oflag(aa)=0\n  if (dimsizes(aa).eq.24) then  ; calculate 24 h, so calculate 8hr ozone here\n    do ih = 0, 16\n      o8O3(ih) = avg(toO3(aa(ih:ih+7)))\n    end do\n    oO3(ii)=max(o8O3)\n  end if\n  o8O3 = -999.0\n  delete(aa)\n  aa=ind((oflag.gt.0).and.(toO3.ge.0))\n  if (any(ismissing(aa))) then\n    iflag=0\n  else\n    xx=array_append_record(olat,(/tolat(aa(0))/),0)\n    yy=array_append_record(olon,(/tolon(aa(0))/),0)\n    zz=array_append_record(oO3,(/-999.0/),0)\n    delete([/olat,olon,oO3/])\n    olat=xx\n    olon=yy\n    oO3=zz\n    delete([/xx,yy,zz/])\n    ii=ii+1\n  end if\n  delete(aa)\nend do\nprint(\"obs 8hour max end\")\naa=ind(oO3.ge.0)\nnobs=dimsizes(aa)\nolat24=olat(aa)\nolon24=olon(aa)\noO324=oO3(aa)\n;print(\"oO324: \"+oO324)\ndelete([/aa,olat,olon,oO3/])\nmO324=oO324*0-999.0\n;print(\"mO324: \"+mO324)\n;print(\"mO31d: \"+mO31d)\nareaa=oO324*0-999.0\nareab=areaa\naread=areaa\n;print(\"areaa: \"+areaa)\n;print(\"areab: \"+areab)\n;print(\"aread: \"+aread)\n\n;-----find model point-----\ndo in=0,nobs-1\n  dis=sqrt((mlat1d-olat24(in))^2+(mlon1d-olon24(in))^2)\n  aa=minind(dis)\n  ;print(in+\" \"+aa)\n  if (dis(aa).lt.maxdist) then\n    mO324(in)=mO31d(aa)\n    cc=ind((mlat1d.ge.(olat24(in)-maxarea)).and.(mlat1d.le.(olat24(in)+maxarea)).and.\\\n           (mlon1d.ge.(olon24(in)-maxarea)).and.(mlon1d.le.(olon24(in)+maxarea)))\n    areaa(in)=0\n    areab(in)=0\n    if (oO324(in).ge.thd) then\n      aread(in)=0\n      if (max(mO31d(cc)).ge.thd) then\n        areab(in)=1\n      else\n        aread(in)=1\n      end if\n    else\n      bb=ind((olat24.ge.(olat24(in)-maxarea)).and.(olat24.le.(olat24(in)+maxarea)).and.\\\n             (olon24.ge.(olon24(in)-maxarea)).and.(olon24.le.(olon24(in)+maxarea)))\n      if (max(mO31d(aa)).ge.thd) then\n        if (max(oO324(bb)).ge.thd) then\n          areaa(in)=0\n        else\n          areaa(in)=1\n        end if\n      else\n        areaa(in)=0\n      end if\n      delete(bb)\n    end if\n    delete(cc)\n  end if\n  delete(aa)\nend do\n\n;-----cal rmse corr nme nmb me mb-----\ntt=ind((mO324.ge.0).and.(oO324.ge.0))\n\nif (any(ismissing(tt))) then\n  rmse=-999.0\n  corr=-999.0\n  nmb=-999.0\n  nme=-999.0\n  me=-999.0\n  mb=-999.0\nelse\n  rmse=dim_rmsd_n(oO324(tt),mO324(tt),0)\n  corr=esccr(oO324(tt),mO324(tt),0)\n  nmb=sum((mO324(tt)-oO324(tt)))/sum(oO324(tt))\n  nme=sum(abs(oO324(tt)-mO324(tt)))/sum(oO324(tt))\n  me=avg(abs(oO324(tt)-mO324(tt)))\n  mb=avg((mO324(tt)-oO324(tt)))\nend if\n;-----cal ah afar-----\n;print(\"areaa: \"+areaa)\n;print(\"areab: \"+areab)\naa=ind((areaa+areab).gt.0)\nbb=ind((aread+areab).gt.0)\n;print(\"aa: \"+aa)\n;print(\"bb: \"+bb)\nif (any(ismissing(aa))) then\n  afar=0.\nelse\n  afar=tofloat(sum(areaa(aa)))/tofloat(sum(areab(aa))+sum(areaa(aa)))*100\nend if\ndelete(aa)\nif (any(ismissing(bb))) then\n  ah=-999.0\nelse\n  ah=tofloat(sum(areab(bb)))/tofloat(sum(areab(bb))+sum(aread(bb)))*100\nend if\ndelete(bb)\nwrite_table(wfname,\"a\",[/sdate,dimsizes(tt),avg(oO324(tt)),avg(mO324(tt)),rmse,corr,nmb,nme,mb,me,ah,afar/],\\\n            \"%s,%i,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\")\ndelete(tt)\nend\n\nEOF\n\n\nncl $cmaq_folder/geoweaver_eva_daily_O3.ncl\n\nif [ $? -eq 0 ]; then\n    echo \"Evaluation Completed Successfully\"\n    cat $wfname\nelse\n    echo \"Evaluation Failed!\"\nfi\n",
  "history_output" : " Copyright (C) 1995-2019 - All Rights Reserved\n University Corporation for Atmospheric Research\n NCAR Command Language Version 6.6.2\n The use of this software is governed by a License Agreement.\n See http://www.ncl.ucar.edu/ for more details.\nfatal:asciiread: Unable to open input file (/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X/AQF5X_Hourly_2022102112.dat)\n\nfatal:[\"Execute.c\":8637]:Execute: Error occurred at or near line 84 in file /groups/ESS3/aalnaim/cmaq/geoweaver_eva_daily_O3.ncl\n\n\nEvaluation Completed Successfully\ncat: /groups/ESS3/aalnaim/cmaq/results/geoweaver_evalution_20221021_results.txt: No such file or directory\n",
  "history_begin_time" : 1666676634743,
  "history_end_time" : 1666676639634,
  "history_notes" : null,
  "history_process" : "fsk7f2",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "xqebaa2vwz5",
  "history_input" : "#!/bin/bash\n# generate images and gif from the prediction NetCDF files and overlay the AirNow station observation on the top\n\ncmaq_folder=\"/groups/ESS3/aalnaim/cmaq\"\nmkdir $cmaq_folder\"/plots\"\n# Setting env variables\nexport YYYYMMDD_POST=$(date -d '4 day ago' '+%Y%m%d')\n\nexport stdate_post=$(date -d '4 day ago' '+%Y-%m-%d')\nexport eddate_post=$(date -d '3 day ago' '+%Y-%m-%d')\n\nexport stdate_file=$(date -d '4 day ago' '+%Y%m%d')\nexport eddate_file=$(date -d '3 day ago' '+%Y%m%d')\n\n# export YYYYMMDD_POST='20221002'\n# export stdate_post='2022-10-02'\n# export eddate_post='2022-10-03'\n# export stdate_file='20221002'\n# export eddate_file='20221003'\n\n\nexport postdata_dir=$cmaq_folder\"/prediction_nc_files\"\nexport mcip_dir=\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km\"\nexport graph_dir=$cmaq_folder\"/plots\"\n\nexport obs_dir_NCL=\"/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X\"\n\nmodule load ncl\n\nrm $cmaq_folder/geoweaver_plot_daily_O3_Airnow.ncl\ncat <<EOF >>$cmaq_folder/geoweaver_plot_daily_O3_Airnow.ncl\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_code.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/gsn_csm.ncl\"\nload \"/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/contributed.ncl\"\n\nsetvalues NhlGetWorkspaceObjectId()\n\"wsMaximumSize\": 600000000\nend setvalues\n\nbegin\n\ndate = getenv(\"YYYYMMDD_POST\") \nd1 = getenv(\"stdate_post\") \nd2 = getenv(\"eddate_post\") \n\ndFile1 = getenv(\"stdate_file\")\ndFile2 = getenv(\"eddate_file\")\n\nobs_dir = getenv(\"obs_dir_NCL\")\nplot_dir = getenv(\"graph_dir\") \n\nhr=new(24,\"string\")\nhr=(/\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\"/)\n\nprint(plot_dir)\naconc_dir = getenv(\"postdata_dir\") \ngrid_dir = getenv(\"mcip_dir\")\n\nprint(aconc_dir+\"/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+dFile1+\"_ML_extracted.nc\")\n\ncdf_file1 = addfile(aconc_dir+\"/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+dFile1+\"_ML_extracted.nc\",\"r\")\ncdf_file= addfile(grid_dir+\"/GRIDCRO2D_\"+date+\".nc\",\"r\")\ncdf_file2= addfile(grid_dir+\"/METCRO2D_\"+date+\".nc\",\"r\")\n\ntime = cdf_file1->TFLAG(:,0,:)\no3 = cdf_file1->O3(:,:,:) ;ppb\nwspd10=cdf_file2->WSPD10(:,0,:,:)\nwdir10=cdf_file2->WDIR10(:,0,:,:)\n\ntemp = cdf_file2->TEMP2\n\nnt = dimsizes(o3(:,0,0))\nny = dimsizes(o3(0,:,0))\nnx = dimsizes(o3(0,0,:))\n\nprint(max(temp))\nprint(min(temp))\nprint(avg(temp))\n\n\n\nprint(nt+\" \"+ny+\" \"+nx)\nprint(max(o3))\nprint(min(o3))\nprint(avg(o3))\n\nlat = cdf_file->LAT(0,0,:,:)\nlon = cdf_file->LON(0,0,:,:)\n\no3@lat2d = lat\no3@lon2d = lon\no3@unit = \"ppbv\"\n\nUV10=wind_component(wspd10,wdir10,0)\nUV10@lat2d = lat\nUV10@lon2d = lon\n\n\nres = True\nres@gsnMaximize = True                ; maximize pot in frame\nres@gsnFrame = False               ; dont advance frame\nres@gsnDraw = False\nres@gsnLeftString  = \"\"\nres@gsnRightString = \"\"\nres@txFont   = \"times-roman\"\nres@tiMainFont   = \"times-roman\"\n;res@tiMainFontHeightF = 0.02\n;res@vpWidthF        = 0.7\n;res@vpHeightF       = 0.7\n\n;;set map;;\nmpres                             = res\nmpres@mpLimitMode = \"LatLon\"\nmpres@mpDataSetName               = \"Earth..4\"\nmpres@mpDataBaseVersion           = \"MediumRes\"\nmpres@mpOutlineOn                 = True\nmpres@mpGeophysicalLineThicknessF = 1.5\nmpres@mpFillDrawOrder             = \"PostDraw\"\nmpres@mpFillOn                    = False\nmpres@mpAreaMaskingOn         = True\nmpres@mpOutlineBoundarySets = \"GeophysicalAndUSStates\"\nmpres@mpOutlineSpecifiers         = \"United States:States\"\nmpres@mpProjection           = \"LambertConformal\"\nmpres@mpLambertParallel1F    = 33.\nmpres@mpLambertParallel2F    = 45.\nmpres@mpLambertMeridianF     = -98.\nmpres@mpMinLonF = -120 ;min(lon)+0.2\nmpres@mpMaxLonF = -70 ;max(lon)-0.2\nmpres@mpMinLatF = 25 ;min(lat)+0.05\nmpres@mpMaxLatF = 50 ;max(lat)-0.05\nmpres@pmTickMarkDisplayMode   = \"Always\"\nmpres@mpLandFillColor         = \"white\"\nmpres@mpInlandWaterFillColor  = \"white\"\nmpres@mpOceanFillColor        = \"white\"\nmpres@mpGeophysicalLineColor    = \"Black\"\n\n;mpres@lbLabelAutoStride       = True\nmpres@tiXAxisFont             = 25\nmpres@pmTickMarkDisplayMode   = \"Always\"\nmpres@tmXBLabelFont           = 25\nmpres@tmXBLabelFontHeightF    = 0.013\nmpres@tmXBLabelDeltaF         = -0.5\nmpres@tmYLLabelFont           = 25\nmpres@tmYLLabelFontHeightF    = 0.013\nmpres@tmXBLabelDeltaF         = -0.5\nmpres@tmXTLabelsOn            = False\nmpres@tmXTLabelFont           = 25\nmpres@tmXTLabelFontHeightF    = 0.013\nmpres@tmYRLabelsOn            = False\nmpres@tmYRLabelFont           = 25\nmpres@tmYRLabelFontHeightF    = 0.013\n\n;;set contour;;\ncnres                         = res\ncnres@cnFillDrawOrder         = \"PreDraw\"\ncnres@cnFillOn                = True\ncnres@cnLinesOn               = False\ncnres@cnLineLabelsOn          = False\ncnres@lbLabelFont             = 25\ncnres@lbLabelFontHeightF      = 0.013\ncnres@tiXAxisFont             = 25\ncnres@pmLabelBarWidthF        = 0.5\ncnres@pmLabelBarHeightF       = 0.1\n;cnres@pmLabelBarOrthogonalPosF = -0.02\ncnres@lbLabelAutoStride       = True\n\n;set vector;;\nres_vc                        = res\nres_vc@vcGlyphStyle           = \"LineArrow\"\nres_vc@vcLineArrowThicknessF  = 3\nres_vc@vcMinDistanceF         = 0.03\nres_vc@vcRefLengthF           = 0.03\nres_vc@vcRefAnnoOn            = True\nres_vc@vcRefMagnitudeF           = 16\nres_vc@vcRefAnnoString1          = \"16m/s\"\nres_vc@vcRefAnnoSide             = \"Top\"\nres_vc@vcRefAnnoString2On        = False\nres_vc@vcRefAnnoPerimOn          = False\nres_vc@vcRefAnnoOrthogonalPosF   = -0.02\nres_vc@vcRefAnnoParallelPosF     = 0.999\n;res_vc@vcRefAnnoBackgroundColor = \"White\"\nres_vc@vcVectorDrawOrder         = \"PostDraw\"\n\ndo it = 0, nt-1\n  if (it .lt. 12) then\n    pdate=d1\n  else\n    pdate=d2\n  end if\n\n  ;print(time(it,0)+\" \"+time(it,1))\n  rundate = yyyyddd_to_yyyymmdd( time(it,0) )\n  runtime = hr( tointeger(time(it,1)/10000) )\n\n  site = readAsciiTable(obs_dir+\"/AQF5X_Hourly_\"+rundate+runtime+\".dat\",1,\"string\",1)\n  nrows = dimsizes(site)\n  sitename = str_get_field(site,1,\",\")\n  sitelat = stringtofloat(str_get_field(site,2,\",\"))\n  sitelon = stringtofloat(str_get_field(site,3,\",\"))\n  O3_obs = stringtofloat(str_get_field(site,4,\",\"))\n\n  obslon = sitelon(:,0)\n  obslat = sitelat(:,0)\n  obsO3 = O3_obs(:,0)\n\n  npts = nrows(0)\n\n  obsO3@_FillValue = -999.\n\n;--- levels for dividing\n  levels_O3  = ispan(0,80,4)\n\n  nlevels = dimsizes(levels_O3)\n\n  colors  = span_color_rgba(\"WhiteBlueGreenYellowRed\",nlevels+1)\n\n  num_distinct_markers = nlevels+1        ; number of distinct markers\n  lat_O3 = new((/num_distinct_markers,npts/),float)\n  lon_O3 = new((/num_distinct_markers,npts/),float)\n  lat_O3 = -999\n  lon_O3 = -999\n\n\n;\n; Group the points according to which range they fall in. At the\n; same time, create the label that we will use later in the labelbar\n;\n  do i = 0, num_distinct_markers-1\n    if (i.eq.0) then\n      indexes_O3 = ind(obsO3(:).lt.levels_O3(0))\n    end if\n    if (i.eq.num_distinct_markers-1) then\n      indexes_O3 = ind(obsO3(:).ge.max(levels_O3))\n    end if\n    if (i.gt.0.and.i.lt.num_distinct_markers-1) then\n      indexes_O3 = ind(obsO3(:).ge.levels_O3(i-1).and.obsO3(:).lt.levels_O3(i))\n    end if\n\n;\n; Now that we have the set of indexes whose values fall within\n; the given range, take the corresponding lat/lon values and store\n; them, so later we can color this set of markers with the appropriate\n; color.\n;\n    if (.not.any(ismissing(indexes_O3))) then\n      npts_range_O3 = dimsizes(indexes_O3)   ; # of points in this range.\n\n      lat_O3(i,0:npts_range_O3-1) = obslat(indexes_O3)\n      lon_O3(i,0:npts_range_O3-1) = obslon(indexes_O3)\n  ;print(\"O3: \"+npts_range_O3)\n    end if\n\n\n    delete(indexes_O3)            ; Necessary b/c \"indexes\" may be a different\n  end do\n\n  lat_O3@_FillValue = -999\n  lon_O3@_FillValue = -999\n\n  gsres               = True\n  gsres@gsMarkerIndex = 16          ; Use filled dots for markers.\n\n  hollowres           = True\n  hollowres@gsMarkerIndex    = 4\n  hollowres@gsMarkerColor    = \"black\"\n  hollowres@gsMarkerSizeF    = 0.008\n\n;;;;;;;;;   Plot Ozone\n  pname=plot_dir+\"/OBS-FORECAST_O3_\"+rundate+runtime\n  wks = gsn_open_wks(\"png\",pname)\n  gsn_define_colormap(wks, \"WhiteBlueGreenYellowRed\")\n\n  pmid_O3 = new(num_distinct_markers,graphic)\n  hollow_O3 = new(num_distinct_markers,graphic)\n\n  cnres@tiMainString =  pdate+\" \"+runtime+\" UTC O~B~3~N~ (ppbV)\"\n  cnres@cnLevelSelectionMode = \"ManualLevels\"\n  cnres@cnMinLevelValF          = 0.\n  cnres@cnMaxLevelValF          = 80\n  cnres@cnLevelSpacingF         = 4\n\n  ;plot = gsn_csm_contour_map(wks,o3(it,:,:),res)\n  map = gsn_csm_map(wks,mpres)\n  contour = gsn_csm_contour(wks,o3(it,:,:),cnres)\n  vector  = gsn_csm_vector(wks,UV10(0,it,:,:),UV10(1,it,:,:),res_vc)\n  overlay(map,contour)\n  overlay(map,vector)\n\n  pmid = new(num_distinct_markers,graphic)\n  hollow = new(num_distinct_markers,graphic)\n  do i = 0, num_distinct_markers-1\n    if (.not.ismissing(lat_O3(i,0)))\n      gsres@gsMarkerColor      = colors(i,:)\n      gsres@gsMarkerSizeF      = 0.008\n      gsres@gsMarkerThicknessF = 1\n       pmid(i) = gsn_add_polymarker(wks,vector,lon_O3(i,:),lat_O3(i,:),gsres)\n       hollow(i) = gsn_add_polymarker(wks,vector,lon_O3(i,:),lat_O3(i,:),hollowres)\n    end if\n  end do\n\n  draw(map)\n  frame(wks)\n  delete(wks)\n  delete(pmid_O3)\n  delete(hollow_O3)\n  system(\"composite -geometry 100x70+900+900 /groups/ESS/zsun/cmaq/mason-logo-green.png \"+pname+\".png \"+pname+\".png\")\n\n\n  delete(pmid)\n  delete(hollow)\n  delete(site)\n  delete(sitename)\n  delete(sitelat)\n  delete(sitelon)\n  delete(O3_obs)\n  delete(obslon)\n  delete(obslat)\n  delete(obsO3)\n  delete([/lon_O3,lat_O3/])\n\nend do\ndelete(res)\n\n;/\n\nend\nexit\nEOF\n\necho \"NCL script Started!\"\nncl $cmaq_folder/geoweaver_plot_daily_O3_Airnow.ncl \necho \"NCL script Done!\"\n\necho \"Converting images to .gif started!\"\nconvert -delay 100 $cmaq_folder/plots/OBS*.png $cmaq_folder/plots/\"Airnow_\"$YYYYMMDD_POST.gif\necho \"Converting images to .gif Done!\"\n\nif [ $? -eq 0 ]; then\n    echo \"Generating AirNow images/gif Completed Successfully\"\n\techo \"Removing ncl file: geoweaver_plot_daily_O3_Airnow.ncl...\"\n\t#rm $cmaq_folder/geoweaver_plot_daily_O3_Airnow.ncl\nelse\n    echo \"Generating AirNow images/gif Failed!\"\n    echo \"Removing ncl file: geoweaver_plot_daily_O3_Airnow.ncl...\"\n\t#rm $cmaq_folder/geoweaver_plot_daily_O3_Airnow.ncl\nfi\n",
  "history_output" : "mkdir: cannot create directory ‘/groups/ESS3/aalnaim/cmaq/plots’: File exists\nNCL script Started!\n Copyright (C) 1995-2019 - All Rights Reserved\n University Corporation for Atmospheric Research\n NCAR Command Language Version 6.6.2\n The use of this software is governed by a License Agreement.\n See http://www.ncl.ucar.edu/ for more details.\n\n\nVariable: plot_dir\nType: string\nTotal Size: 8 bytes\n            1 values\nNumber of Dimensions: 1\nDimensions and sizes:\t[1]\nCoordinates: \n(0)\t/groups/ESS3/aalnaim/cmaq/plots\n(0)\t/groups/ESS3/aalnaim/cmaq/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_20221021_ML_extracted.nc\n(0)\t307.1821\n(0)\t265.0045\n(0)\t287.9131\n(0)\t24 265 442\n(0)\t   1\n(0)\t   0\n(0)\t0.9999316998207121\nfatal:asciiread: Unable to open input file (/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X/AQF5X_Hourly_2022102212.dat)\n\nfatal:[\"Execute.c\":8637]:Execute: Error occurred at or near line 9684 in file /opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/contributed.ncl\n\n\nfatal:[\"Execute.c\":8637]:Execute: Error occurred at or near line 9766 in file /opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0-openmpi-4.0.4/ncl-6.6.2-fr/lib/ncarg/nclscripts/csm/contributed.ncl\n\n\nfatal:[\"Execute.c\":8637]:Execute: Error occurred at or near line 164 in file /groups/ESS3/aalnaim/cmaq/geoweaver_plot_daily_O3_Airnow.ncl\n\n\nNCL script Done!\nConverting images to .gif started!\nconvert: unable to open image `/groups/ESS3/aalnaim/cmaq/plots/OBS*.png': No such file or directory @ error/blob.c/OpenBlob/2881.\nconvert: no images defined `/groups/ESS3/aalnaim/cmaq/plots/Airnow_20221021.gif' @ error/convert.c/ConvertImageCommand/3226.\nConverting images to .gif Done!\nGenerating AirNow images/gif Completed Successfully\nRemoving ncl file: geoweaver_plot_daily_O3_Airnow.ncl...\n",
  "history_begin_time" : 1666676629025,
  "history_end_time" : 1666676634128,
  "history_notes" : null,
  "history_process" : "is1w3m",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "vz147uw8m81",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675052188,
  "history_end_time" : 1666675052188,
  "history_notes" : null,
  "history_process" : "h76ld0",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "d3c2s7wsphg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675052206,
  "history_end_time" : 1666675052206,
  "history_notes" : null,
  "history_process" : "s6hbic",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "8j9xsdzwen4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675052227,
  "history_end_time" : 1666675052227,
  "history_notes" : null,
  "history_process" : "pvzabv",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "zrvrww0zv46",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1666675052239,
  "history_end_time" : 1666675052239,
  "history_notes" : null,
  "history_process" : "8i9ptn",
  "host_id" : "p6wvf2",
  "indicator" : "Skipped"
},{
  "history_id" : "1mvt11aljts",
  "history_input" : "\nimport numpy as np\nimport pandas as pd\nfrom keras import Model\nfrom keras.layers import Layer\nimport keras.backend as K\nfrom keras.layers import Input, Dense, SimpleRNN\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom sklearn import metrics\nimport tensorflow as tf\nimport pickle\n\nfrom cmaq_ai_utils import *\n\ntraining_df = pd.read_csv(f'{cmaq_folder}/training_Jul_New.csv')\ntraining_df = training_df.drop([\n    'Latitude_x',\n    'Longitude_x',\n    'Lat_airnow',\n    'Lon_airnow',\n    'Lat_cmaq',\n    'Lon_cmaq',\n    'Latitude_y',\n    'Longitude_y',\n    'StationID',\n], axis=1)\ntraining_df.dropna(inplace=True)\n\n\ntraining_df['time_of_day'] = (training_df['hours'] % 24 + 4) // 4\n\n# Set up model parameters\ntime_steps = 7\nhidden_units = 64\nepochs = 30\n\n\ndef create_dataset(dataset, look_back=7):\n    (dataX, dataY) = ([], [])\n    for i in range(len(dataset) - look_back - 1):\n        dataX.append(dataset[i:i + look_back, 1:])\n        dataY.append(dataset[i + look_back, 0])\n    return (np.array(dataX), np.array(dataY))\n\n\ndataset = training_df.values\ndataset = dataset.astype('float32')\n\n# normalize the dataset\n\nlook_back = 7\nscaler = MinMaxScaler(feature_range=(0, 1))\n\n# dataset = scaler.fit_transform(dataset)\n\n# reshape into X=t and Y=t+1\ntrainX, trainY = create_dataset(dataset, look_back)\n\n# reshape input to be [samples, time steps, features]\n\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 15))\nprint(trainX.shape, trainY.shape)\n\n\nclass attention(Layer):\n    def __init__(self, **kwargs):\n        super(attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = self.add_weight(name='attention_weight', shape=(input_shape[-1], 1),\n                                 initializer='random_normal', trainable=True)\n        self.b = self.add_weight(name='attention_bias', shape=(input_shape[1], 1),\n                                 initializer='zeros', trainable=True)\n        super(attention, self).build(input_shape)\n\n    def call(self, x):\n        # Alignment scores. Pass them through tanh function\n        e = K.tanh(K.dot(x, self.W) + self.b)\n        # Remove dimension of size 1\n        e = K.squeeze(e, axis=-1)\n        # Compute the weights\n        alpha = K.softmax(e)\n        # Reshape to tensorFlow format\n        alpha = K.expand_dims(alpha, axis=-1)\n        # Compute the context vector\n        context = x * alpha\n        context = K.sum(context, axis=1)\n        return context\n\n\ndef create_RNN_with_attention(\n    hidden_units,\n    dense_units,\n    input_shape,\n    activation,\n):\n    x = Input(shape=input_shape)\n    RNN_layer = SimpleRNN(hidden_units, return_sequences=True,\n                          activation=activation)(x)\n    attention_layer = attention()(RNN_layer)\n    outputs = Dense(dense_units, trainable=True,\n                    activation=activation)(attention_layer)\n    model = Model(x, outputs)\n    model.compile(loss='mse', optimizer='adam',\n                  metrics=[tf.keras.metrics.mean_squared_error,\n                           'accuracy'])\n    return model\n\n\nmodel_attention = create_RNN_with_attention(hidden_units=hidden_units,\n                                            dense_units=1, input_shape=(time_steps, 15), activation='tanh')\nprint(model_attention.summary())\n\nmodel_attention.fit(trainX, trainY, epochs=epochs, batch_size=100, verbose=2)\n\n\n# save the model to disk\nfilename = f'{cmaq_folder}/models/attnRNN_o3_Jul.sav'\n#filename = 'D:/Research/CMAQ/local_test/xgboost.sav'\npickle.dump(model_attention, open(filename, 'wb'))\nprint(f\"Model is trained and saved to {filename}\")\n",
  "history_output" : "2022-10-25 01:18:07.152187: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/ohpc/pub/libs/hwloc/2.1.0/lib:/opt/ohpc/pub/mpi/libfabric/1.10.1/lib:/opt/ohpc/pub/mpi/ucx-ohpc/1.8.0/lib:/opt/ohpc/pub/mpi/openmpi4-gnu9/4.0.4/lib:/opt/ohpc/pub/compiler/gcc/9.3.0/lib64:/lib64\n2022-10-25 01:18:07.152211: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n(901307, 7, 15) (901307,)\n2022-10-25 01:20:12.245926: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/ohpc/pub/libs/hwloc/2.1.0/lib:/opt/ohpc/pub/mpi/libfabric/1.10.1/lib:/opt/ohpc/pub/mpi/ucx-ohpc/1.8.0/lib:/opt/ohpc/pub/mpi/openmpi4-gnu9/4.0.4/lib:/opt/ohpc/pub/compiler/gcc/9.3.0/lib64:/lib64\n2022-10-25 01:20:12.245955: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n2022-10-25 01:20:12.245970: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (hopper1.orc.gmu.edu): /proc/driver/nvidia/version does not exist\n2022-10-25 01:20:12.246187: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\nModel: \"model\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_1 (InputLayer)        [(None, 7, 15)]           0         \n                                                                 \n simple_rnn (SimpleRNN)      (None, 7, 64)             5120      \n                                                                 \n attention (attention)       (None, 64)                71        \n                                                                 \n dense (Dense)               (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 5,256\nTrainable params: 5,256\nNon-trainable params: 0\n_________________________________________________________________\nNone\nEpoch 1/30\n9014/9014 - 22s - loss: 1238.1639 - mean_squared_error: 1238.1639 - accuracy: 0.0058 - 22s/epoch - 2ms/step\nEpoch 2/30\n9014/9014 - 22s - loss: 1237.8486 - mean_squared_error: 1237.8490 - accuracy: 0.0058 - 22s/epoch - 2ms/step\nEpoch 3/30\n9014/9014 - 21s - loss: 1237.8503 - mean_squared_error: 1237.8507 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 4/30\n9014/9014 - 21s - loss: 1237.8512 - mean_squared_error: 1237.8510 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 5/30\n9014/9014 - 21s - loss: 1237.8491 - mean_squared_error: 1237.8491 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 6/30\n9014/9014 - 21s - loss: 1237.8503 - mean_squared_error: 1237.8500 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 7/30\n9014/9014 - 21s - loss: 1237.8516 - mean_squared_error: 1237.8516 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 8/30\n9014/9014 - 21s - loss: 1237.8508 - mean_squared_error: 1237.8513 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 9/30\n9014/9014 - 21s - loss: 1237.8494 - mean_squared_error: 1237.8491 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 10/30\n9014/9014 - 21s - loss: 1237.8488 - mean_squared_error: 1237.8496 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 11/30\n9014/9014 - 21s - loss: 1237.8505 - mean_squared_error: 1237.8502 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 12/30\n9014/9014 - 21s - loss: 1237.8499 - mean_squared_error: 1237.8503 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 13/30\n9014/9014 - 21s - loss: 1237.8511 - mean_squared_error: 1237.8513 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 14/30\n9014/9014 - 21s - loss: 1237.8517 - mean_squared_error: 1237.8517 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 15/30\n9014/9014 - 21s - loss: 1237.8469 - mean_squared_error: 1237.8475 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 16/30\n9014/9014 - 20s - loss: 1237.8478 - mean_squared_error: 1237.8473 - accuracy: 0.0058 - 20s/epoch - 2ms/step\nEpoch 17/30\n9014/9014 - 21s - loss: 1237.8485 - mean_squared_error: 1237.8488 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 18/30\n9014/9014 - 21s - loss: 1237.8552 - mean_squared_error: 1237.8552 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 19/30\n9014/9014 - 21s - loss: 1237.8528 - mean_squared_error: 1237.8530 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 20/30\n9014/9014 - 21s - loss: 1237.8499 - mean_squared_error: 1237.8499 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 21/30\n9014/9014 - 21s - loss: 1237.8500 - mean_squared_error: 1237.8505 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 22/30\n9014/9014 - 21s - loss: 1237.8490 - mean_squared_error: 1237.8490 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 23/30\n9014/9014 - 21s - loss: 1237.8484 - mean_squared_error: 1237.8486 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 24/30\n9014/9014 - 21s - loss: 1237.8502 - mean_squared_error: 1237.8502 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 25/30\n9014/9014 - 21s - loss: 1237.8517 - mean_squared_error: 1237.8513 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 26/30\n9014/9014 - 21s - loss: 1237.8462 - mean_squared_error: 1237.8462 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 27/30\n9014/9014 - 21s - loss: 1237.8475 - mean_squared_error: 1237.8481 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 28/30\n9014/9014 - 21s - loss: 1237.8484 - mean_squared_error: 1237.8486 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 29/30\n9014/9014 - 21s - loss: 1237.8479 - mean_squared_error: 1237.8481 - accuracy: 0.0058 - 21s/epoch - 2ms/step\nEpoch 30/30\n9014/9014 - 21s - loss: 1237.8467 - mean_squared_error: 1237.8458 - accuracy: 0.0058 - 21s/epoch - 2ms/step\n2022-10-25 01:30:55.951628: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\nModel is trained and saved to /groups/ESS3/aalnaim/cmaq//models/attnRNN_o3_Jul.sav\n",
  "history_begin_time" : 1666675052863,
  "history_end_time" : 1666675857618,
  "history_notes" : null,
  "history_process" : "sgm1fk",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
}]
