[{
  "history_id" : "oyyp5t0ef6f",
  "history_input" : "# NASA-GEOWEAVER: Environment setting\n\nimport os\nimport sys\nimport subprocess\nimport pkg_resources\n\n# Required packages to run this process.\nrequired = {'pandas','pathlib','sklearn','numpy','keras','tensorflow','tensorflow-gpu','autokeras','kaleido','glob2','scipy','netCDF4','xarray','geopandas','Shapely','rasterio','earthpy','opencv-python','Pillow'}\n#required = {'xgboost'}\ninstalled = {pkg.key for pkg in pkg_resources.working_set}\nmissing = required - installed\n\nif missing:\n    print(\"Packages missing and will be installed: \", missing)\n    python = sys.executable\n    subprocess.check_call(\n        [python, '-m', 'pip', 'install', *missing],\n      stdout=subprocess.DEVNULL)\n    #subprocess.check_call(\n        #[python, '-m', 'conda', 'install', '-c','conda-forge','xgboost'],\n      #stdout=subprocess.DEVNULL)\n\n\n################################\n#  END OF PACKAGES Installation  #\n\n\n# Creating directoris \nfrom pathlib import Path\nhome = str(Path.home())\nfolders = ['cmaq/exploratory_analysis', 'cmaq/prediction_maps', 'cmaq/prediction_files','cmaq/models','cmaq/observation']\nfor folder in folders:\n  paths=Path(home+'/'+folder)\n  paths.mkdir(parents=True,exist_ok=True)\n  \n  ###############################\n  # END OF DIRECTORY CREATION #",
  "history_output" : "Packages missing and will be installed:  {'xarray', 'Pillow', 'pathlib', 'rasterio', 'sklearn', 'opencv-python', 'Shapely', 'geopandas', 'earthpy', 'netCDF4'}\n\u001B[33mWARNING: You are using pip version 22.0.3; however, version 22.0.4 is available.\nYou should consider upgrading via the '/home/aalnaim/CMAQAI/bin/python -m pip install --upgrade pip' command.\u001B[0m\u001B[33m\n\u001B[0m\n",
  "history_begin_time" : 1652045594653,
  "history_end_time" : 1652045859213,
  "history_notes" : null,
  "history_process" : "9xdvh6",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "nn0sld690mh",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nfrom datetime import datetime, timedelta\n# home directory\nhome = str(Path.home())\n\n\ndays=[]\nfrom datetime import date, timedelta\n\nsdate = date(2021, 10, 30)   # start date\nedate = date(2022, 1, 1)   # end date\n\ndelta = edate - sdate       # as timedelta\n\nfor i in range(delta.days + 1):\n    day = sdate + timedelta(days=i)\n    list_day=day.strftime('%Y%m%d')\n    days.append(list_day)\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/training_data.csv',index=False)\n\n",
  "history_output" : "20211030\n20211031\n20211101\n20211102\n20211103\n20211104\n20211105\n20211106\n20211107\n20211108\n20211109\n20211110\n20211111\n20211112\n20211113\n20211114\n20211115\n20211116\n20211117\n20211118\n20211119\n20211120\n20211121\n20211122\n20211123\n20211124\n20211125\n20211126\n20211127\n20211128\n20211129\n20211130\n20211201\n20211202\n20211203\n20211204\n20211205\n20211206\n20211207\n20211208\n20211209\n20211210\n20211211\n20211212\n20211213\n20211214\n20211215\n20211216\n20211217\n20211218\n20211219\n20211220\n20211221\n20211222\n20211223\n20211224\n20211225\n20211226\n20211227\n20211228\n20211229\n20211230\n20211231\n20220101\n179911680\n179911680\n179911680\n179911680\n179911680\n179911680\n179911680\n179911680\n",
  "history_begin_time" : 1652045859633,
  "history_end_time" : 1652786130075,
  "history_notes" : null,
  "history_process" : "6up921",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "e8bl5a022en",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: e8bl5a022en.tar: Disk quota exceeded",
  "history_begin_time" : 1652786130403,
  "history_end_time" : 1652786132614,
  "history_notes" : null,
  "history_process" : "xpdg66",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "jt875cy4ef5",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: jt875cy4ef5.tar: Disk quota exceeded",
  "history_begin_time" : 1652786133164,
  "history_end_time" : 1652786134999,
  "history_notes" : null,
  "history_process" : "xlayd5",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "4k52pyetkx5",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: 4k52pyetkx5.tar: Disk quota exceeded",
  "history_begin_time" : 1652786135646,
  "history_end_time" : 1652786137654,
  "history_notes" : null,
  "history_process" : "argv3i",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "nzkd32bw9gd",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: nzkd32bw9gd.tar: Disk quota exceeded",
  "history_begin_time" : 1652786138024,
  "history_end_time" : 1652786139520,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "ncm0obwm03c",
  "history_input" : null,
  "history_output" : "Received unknown response code",
  "history_begin_time" : 1652786144698,
  "history_end_time" : 1652786145493,
  "history_notes" : null,
  "history_process" : "l8vlic",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "65isind7el0",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: 65isind7el0.tar: Disk quota exceeded",
  "history_begin_time" : 1652786139673,
  "history_end_time" : 1652786141679,
  "history_notes" : null,
  "history_process" : "b8uv5z",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "5avzq2ptfpa",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: 5avzq2ptfpa.tar: Disk quota exceeded",
  "history_begin_time" : 1652786142540,
  "history_end_time" : 1652786144392,
  "history_notes" : null,
  "history_process" : "361yw7",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "bzla5a7gju4",
  "history_input" : null,
  "history_output" : "Received unknown response code",
  "history_begin_time" : 1652786146413,
  "history_end_time" : 1652786147149,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
}]
