[{
  "history_id" : "9blreipi53o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709278,
  "history_end_time" : 1664426992818,
  "history_notes" : null,
  "history_process" : "6up921",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "x2uvrp15qo6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709284,
  "history_end_time" : 1664426992847,
  "history_notes" : null,
  "history_process" : "xpdg66",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "0vv8dhprkx6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709287,
  "history_end_time" : 1664426992848,
  "history_notes" : null,
  "history_process" : "xlayd5",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "iozu3hdjgn9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709292,
  "history_end_time" : 1664426992849,
  "history_notes" : null,
  "history_process" : "argv3i",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "9uipdp63fr0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709330,
  "history_end_time" : 1664426992849,
  "history_notes" : null,
  "history_process" : "wny2dz",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "azy8g4rz1sq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709351,
  "history_end_time" : 1664426992851,
  "history_notes" : null,
  "history_process" : "9xdvh6",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "40xquo2mf40",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709359,
  "history_end_time" : 1664426992852,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "bdge7ypv9qs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709383,
  "history_end_time" : 1664426992854,
  "history_notes" : null,
  "history_process" : "b8uv5z",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "m8oavghxfv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709414,
  "history_end_time" : 1664426992855,
  "history_notes" : null,
  "history_process" : "h76ld0",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "xi67lto3k25",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709417,
  "history_end_time" : 1664426992856,
  "history_notes" : null,
  "history_process" : "s6hbic",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "atg622tdebf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1664426709419,
  "history_end_time" : 1664426992856,
  "history_notes" : null,
  "history_process" : "pvzabv",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
},{
  "history_id" : "n2g2dt8nghv",
  "history_input" : "# use the trained model to predict on the testing data and save the results to prediction_rf.csv\n\nimport pandas as pd\nimport pickle\nfrom pathlib import Path\nfrom time import sleep\nimport glob, os\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom cmaq_ai_utils import *\nfrom scipy import spatial\n\n# from geopy import distance\nfrom math import radians, cos, sin, asin, sqrt\nimport time\n\n\ndef match_closest_airnow_with_gridCell():\n  \"\"\"\n  Match all airnow stations to closest grid cell.\n  \"\"\"\n  print(\"Starting!\")\n  remove_file(f'{cmaq_folder}/updated_station_to_cell.csv')\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  stations = pd.read_csv(f'{cmaq_folder}/AQF5X_Hourly_2022091304.dat', sep=', ', skiprows=1, names=['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)', 'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'])\n\n  # stations = stations.replace(',','', regex=True)\n  print(stations.columns)\n  print(stations[['Latitude', 'Longitude']])\n  station_locations = stations[['Latitude', 'Longitude']].astype(float).values\n  print(\"station_locations - \", station_locations)\n  print(\"station_locations.shape: \", station_locations.shape)\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0]) # just pick the first one to generate the mapping\n  print(testing_df['YYYYMMDDHH'].values[0])\n\n  closest_stations = []\n  cmaq_cell_array = []\n  final_mapping_array = []\n  for j, cmaq in testing_df.iterrows():\n    cmaq_location = [cmaq['Latitude'], cmaq['Longitude']]\n    cmaq_cell_array.append(cmaq_location)\n  \n  print(\"cmaq_cell_array.shape: \", len(cmaq_cell_array))\n  \n  for station_loc in station_locations:\n    distance,index = spatial.KDTree(cmaq_cell_array).query(station_loc)\n    if distance > 0.2:\n      continue\n    closest_cell = cmaq_cell_array[index]\n    new_row = [station_loc[0], station_loc[1], closest_cell[0], closest_cell[1]]\n    final_mapping_array.append(new_row)\n\n  print(\"final_mapping_array length: \", len(final_mapping_array))\n  closest = pd.DataFrame(final_mapping_array, columns=[\"Lat_airnow\", \"Lon_airnow\", \"Lat_cmaq\", \"Lon_cmaq\"])\n  #closest.drop_duplicates().reset_index(drop=True)\n  print(\"Saving fixed_station_cmaq_location.csv...\")\n  closest.to_csv(f'{cmaq_folder}/updated_station_to_cell.csv',index=False)\n\n  \n\ndef prepare_update_grid_cells_with_distance(station_distance=0.2):\n  \"\"\"\n  Get all grid cells within the specified distance around airnow stations\n  args: station_distance, default: 50km (0.2 degrees)\n  \"\"\"\n  print(\"Starting!\")\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  airnow_obs_path = '/groups/ESS/share/projects/SWUS3km/data/OBS/AirNow/AQF5X'\n  stations = pd.read_csv(f'{cmaq_folder}/station_cmaq_location.csv')\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0])\n  print(testing_df['YYYYMMDDHH'].values[0])\n  file_dateTime = testing_df['YYYYMMDDHH'].values[0]\n  print(\"copying testing_df to new_df\")\n  new_df = testing_df.copy()\n  new_df.drop(new_df.index, inplace=True)\n  print(testing_df.shape, new_df.shape)\n\n  for j, cmaq in testing_df.iterrows():\n    if j % 1000 == 0:\n  \t  print(\"Looping through: \", j)\n    for i, station in stations.iterrows():\n      #print(\"inner-Looping through: \", i)\n      airnow_stations = (station['Latitude_y'], station['Longitude_y'])\n      prediction_location = (cmaq['Latitude'], cmaq['Longitude'])\n        \n      if (station['Latitude_y'] < cmaq['Latitude'] + station_distance) and (station['Latitude_y'] > cmaq['Latitude'] - station_distance) and (station['Longitude_y'] < cmaq['Longitude'] + station_distance) and (station['Longitude_y'] > cmaq['Longitude'] - station_distance):\n        new_df.loc[j] = cmaq\n        break\n  new_df.to_csv(f'{cmaq_folder}/prediction_files/update_cell.csv',index=False)\n\ndef prepare_update_grid_cells_with_distance(station_distance=0.2):\n  \"\"\"\n  Get all grid cells within the specified distance around airnow stations\n  args: station_distance, default: 50km (0.2 degrees)\n  \"\"\"\n  print(\"Starting!\")\n  testing_path = f'{cmaq_folder}/testing_input_hourly'\n  all_hourly_files = sorted(glob.glob(os.path.join(testing_path, \"test_data_*.csv\")))\n  print(\"reading stations csv\")\n  stations = pd.read_csv(f'{cmaq_folder}/station_cmaq_location.csv')\n  print(\"reading testing data csv\")\n\n  testing_df = pd.read_csv(all_hourly_files[0])\n  print(testing_df['YYYYMMDDHH'].values[0])\n  file_dateTime = testing_df['YYYYMMDDHH'].values[0]\n  print(\"copying testing_df to new_df\")\n  new_df = testing_df.copy()\n  new_df.drop(new_df.index, inplace=True)\n  print(testing_df.shape, new_df.shape)\n\n  for j, cmaq in testing_df.iterrows():\n    if j % 1000 == 0:\n  \t  print(\"Looping through: \", j)\n    for i, station in stations.iterrows():\n      #print(\"inner-Looping through: \", i)\n      airnow_stations = (station['Latitude_y'], station['Longitude_y'])\n      prediction_location = (cmaq['Latitude'], cmaq['Longitude'])\n        \n      if (station['Latitude_y'] < cmaq['Latitude'] + station_distance) and (station['Latitude_y'] > cmaq['Latitude'] - station_distance) and (station['Longitude_y'] < cmaq['Longitude'] + station_distance) and (station['Longitude_y'] > cmaq['Longitude'] - station_distance):\n        new_df.loc[j] = cmaq\n        break\n  new_df.to_csv(f'{cmaq_folder}/prediction_files/update_cell.csv',index=False)\n  \n#prepare_update_grid_cells(0.2)\nmatch_closest_airnow_with_gridCell()",
  "history_output" : "Starting!\nremove old files/groups/ESS/zsun/cmaq//updated_station_to_cell.csv\nreading stations csv\nprepare_update_cell_csv.py:26: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n  stations = pd.read_csv(f'{cmaq_folder}/AQF5X_Hourly_2022091304.dat', sep=', ', skiprows=1, names=['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)', 'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'])\nIndex(['AQSID', 'Latitude', 'Longitude', 'OZONE(ppb)', 'NO2(ppb)', 'CO(ppm)',\n       'PM25(ug/m3)', 'SO2(ppb)', 'PM10(ug/m3)'],\n      dtype='object')\n       Latitude  Longitude\n0     31.169399 -81.496399\n1     42.062199 -87.673599\n2     39.758900 -86.397202\n3     40.931396 -81.123520\n4     43.435001 -88.527802\n...         ...        ...\n2915  35.913799 -81.191002\n2916  40.246990 -76.846985\n2917  39.818714 -75.413971\n2918  37.046902 -95.613297\n2919  32.791000 -79.959000\n\n[2920 rows x 2 columns]\nstation_locations -  [[ 31.169399 -81.496399]\n [ 42.062199 -87.673599]\n [ 39.7589   -86.397202]\n ...\n [ 39.818714 -75.413971]\n [ 37.046902 -95.613297]\n [ 32.791    -79.959   ]]\nstation_locations.shape:  (2920, 2)\nreading testing data csv\n2022080512\ncmaq_cell_array.shape:  117130\n",
  "history_begin_time" : 1664426721258,
  "history_end_time" : 1664426992857,
  "history_notes" : null,
  "history_process" : "8i9ptn",
  "host_id" : "aqt8fv",
  "indicator" : "Stopped"
}]
