[{
  "history_id" : "XzP0fzyyq3jt",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n#     print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n#     print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n#     print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n#     print(\"o3 shape: \", o3.shape)\n#     print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660806029705,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "XAsmkESHrMW0",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n#     print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n#     print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n#     print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n#     print(\"o3 shape: \", o3.shape)\n#     print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660788451048,
  "history_end_time" : 1660806022944,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "pZ8QfGpYxvFt",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n#     print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n#     print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n#     print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n#     print(\"o3 shape: \", o3.shape)\n#     print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660787798758,
  "history_end_time" : 1660806022513,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "CIrZE6T9hM8C",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n#     print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n#     print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n#     print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n#     cmaq_O3=list(np.ravel(o3).transpose())\n#     print(\"o3 shape: \", o3.shape)\n#     print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 112, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\nNameError: name 'cmaq_O3' is not defined\n",
  "history_begin_time" : 1660787747513,
  "history_end_time" : 1660806021894,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "5ri50befevm",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n#     print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n#     print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n#     print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n#     cmaq_O3=list(np.ravel(o3).transpose())\n#     print(\"o3 shape: \", o3.shape)\n#     print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 112, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\nNameError: name 'cmaq_O3' is not defined\n",
  "history_begin_time" : 1660786883643,
  "history_end_time" : 1660786906365,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "UA4Yzdsm4far",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660784789921,
  "history_end_time" : 1660785040569,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Fcs52yJSkCwL",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 5)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660779081237,
  "history_end_time" : 1660785041397,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "nh6shs45x4m",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 5)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660777590641,
  "history_end_time" : 1660778171063,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "H1LbETM4qO30",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660773535115,
  "history_end_time" : 1660785042063,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "vF0gfyujwVja",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660765766844,
  "history_end_time" : 1660785042563,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "VpgeRMwc4kKo",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660761715756,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "mzgfE4KINJFc",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220805_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220806_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660760005142,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "LZO70HrFq56G",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660750218642,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "kkrknf10u6r1",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220801_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220802_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\ncmaq_O3 shape:  (117130,)\nlat shape (265, 442)\nSaving file: test_data_20220803_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660708321154,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "91HOQCG1eGLV",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    print(\"cmaq_O3 shape: \", cmaq_O3.shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 50, in <module>\n    print(\"cmaq_O3 shape: \", cmaq_O3.shape)\nAttributeError: 'list' object has no attribute 'shape'\n",
  "history_begin_time" : 1660708197539,
  "history_end_time" : 1660708574085,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "X8yiNVGDCkhX",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_21.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_22.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220801_23.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_00.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_01.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_02.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_03.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_04.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_05.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_06.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_07.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_08.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_09.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_10.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_13.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_14.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_15.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_16.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_17.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_18.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_19.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\nlat shape (265, 442)\nSaving file: test_data_20220802_20.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (265, 442)\n",
  "history_begin_time" : 1660707966869,
  "history_end_time" : 1660708573318,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "RaGAOgIYG7nB",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/GRIDCRO2D_'+current_day+'.nc')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nSaving file: test_data_20220805_12.csv\nSaving file: test_data_20220805_13.csv\nSaving file: test_data_20220805_14.csv\nSaving file: test_data_20220805_15.csv\nSaving file: test_data_20220805_16.csv\nSaving file: test_data_20220805_17.csv\nSaving file: test_data_20220805_18.csv\nSaving file: test_data_20220805_19.csv\nSaving file: test_data_20220805_20.csv\nSaving file: test_data_20220805_21.csv\nSaving file: test_data_20220805_22.csv\nSaving file: test_data_20220805_23.csv\nSaving file: test_data_20220806_00.csv\nSaving file: test_data_20220806_01.csv\nSaving file: test_data_20220806_02.csv\nSaving file: test_data_20220806_03.csv\nSaving file: test_data_20220806_04.csv\nSaving file: test_data_20220806_05.csv\nSaving file: test_data_20220806_06.csv\nSaving file: test_data_20220806_07.csv\nSaving file: test_data_20220806_08.csv\nSaving file: test_data_20220806_09.csv\nSaving file: test_data_20220806_10.csv\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nSaving file: test_data_20220806_12.csv\nSaving file: test_data_20220806_13.csv\nSaving file: test_data_20220806_14.csv\nSaving file: test_data_20220806_15.csv\nSaving file: test_data_20220806_16.csv\nSaving file: test_data_20220806_17.csv\nSaving file: test_data_20220806_18.csv\nSaving file: test_data_20220806_19.csv\nSaving file: test_data_20220806_20.csv\nSaving file: test_data_20220806_21.csv\nSaving file: test_data_20220806_22.csv\nSaving file: test_data_20220806_23.csv\nSaving file: test_data_20220807_00.csv\nSaving file: test_data_20220807_01.csv\nSaving file: test_data_20220807_02.csv\nSaving file: test_data_20220807_03.csv\nSaving file: test_data_20220807_04.csv\nSaving file: test_data_20220807_05.csv\nSaving file: test_data_20220807_06.csv\nSaving file: test_data_20220807_07.csv\nSaving file: test_data_20220807_08.csv\nSaving file: test_data_20220807_09.csv\nSaving file: test_data_20220807_10.csv\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660706200394,
  "history_end_time" : 1660785046805,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "WvjzrnAi0tNI",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nSaving file: test_data_20220805_12.csv\nSaving file: test_data_20220805_13.csv\nSaving file: test_data_20220805_14.csv\nSaving file: test_data_20220805_15.csv\nSaving file: test_data_20220805_16.csv\nSaving file: test_data_20220805_17.csv\nSaving file: test_data_20220805_18.csv\nSaving file: test_data_20220805_19.csv\nSaving file: test_data_20220805_20.csv\nSaving file: test_data_20220805_21.csv\nSaving file: test_data_20220805_22.csv\nSaving file: test_data_20220805_23.csv\nSaving file: test_data_20220806_00.csv\nSaving file: test_data_20220806_01.csv\nSaving file: test_data_20220806_02.csv\nSaving file: test_data_20220806_03.csv\nSaving file: test_data_20220806_04.csv\nSaving file: test_data_20220806_05.csv\nSaving file: test_data_20220806_06.csv\nSaving file: test_data_20220806_07.csv\nSaving file: test_data_20220806_08.csv\nSaving file: test_data_20220806_09.csv\nSaving file: test_data_20220806_10.csv\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nSaving file: test_data_20220806_12.csv\nSaving file: test_data_20220806_13.csv\nSaving file: test_data_20220806_14.csv\nSaving file: test_data_20220806_15.csv\nSaving file: test_data_20220806_16.csv\nSaving file: test_data_20220806_17.csv\nSaving file: test_data_20220806_18.csv\nSaving file: test_data_20220806_19.csv\nSaving file: test_data_20220806_20.csv\nSaving file: test_data_20220806_21.csv\nSaving file: test_data_20220806_22.csv\nSaving file: test_data_20220806_23.csv\nSaving file: test_data_20220807_00.csv\nSaving file: test_data_20220807_01.csv\nSaving file: test_data_20220807_02.csv\nSaving file: test_data_20220807_03.csv\nSaving file: test_data_20220807_04.csv\nSaving file: test_data_20220807_05.csv\nSaving file: test_data_20220807_06.csv\nSaving file: test_data_20220807_07.csv\nSaving file: test_data_20220807_08.csv\nSaving file: test_data_20220807_09.csv\nSaving file: test_data_20220807_10.csv\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660680063392,
  "history_end_time" : 1660785047322,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "OkhBbz6GYEar",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    #print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    #print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    #print(\"df_cmaq.variables['O3'][:].values[k].shape\", df_cmaq.variables['O3'][:].values[k].shape)\n    #print(df_cmaq.variables['O3'][:].values[k, :] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][k,k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n#     # NO2\n#     no2=df_cmaq.variables['NO2'][k,k]\n#     cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n#     # CO\n#     co=df_cmaq.variables['CO'][k,k]\n#     cmaq_CO=list(np.ravel(co).transpose().round())\n    \n#     # PM25_CO\n#     pm25=df_cmaq.variables['PM25_OC'][k,k]\n#     cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n#     # EMIS data\n#     co_emis=df_emis.variables['CO'][k,k]\n#     CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n#     # MCIP data\n#     # CO variable\n#     prsfc=df_mcip.variables['PRSFC'][k,k]\n#     PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n#     # NO2\n#     pbl=df_mcip.variables['PBL'][k,k]\n#     PBL=list(np.ravel(pbl).transpose().round())\n    \n#     # TEMP2\n#     temp2=df_mcip.variables['TEMP2'][k,k]\n#     TEMP2=list(np.ravel(temp2).transpose().round())\n    \n#     # WSPD10\n#     wspd10=df_mcip.variables['WSPD10'][k,k]\n#     WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n#     # WDIR10\n#     wdir10=df_mcip.variables['WDIR10'][k,k]\n#     WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n#     # RGRND\n#     rgrnd=df_mcip.variables['RGRND'][k,k]\n#     RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n#     # CFRAC\n#     cfrac=df_mcip.variables['CFRAC'][k,k]\n#     CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n#     df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n#     df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n#     df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n#     df_hourly['CO(moles/s)'] = CO_emi\n#     df_hourly['PRSFC(Pa)'] = PRSFC\n#     df_hourly['PBL(m)'] = PBL\n#     df_hourly['TEMP2(K)'] = TEMP2\n#     df_hourly['WSPD10(m/s)'] = WSPD10\n#     df_hourly['WDIR10(degree)'] = WDIR10\n#     df_hourly['RGRND(W/m2)'] = RGRND\n#     df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nSaving file: test_data_20220805_12.csv\nSaving file: test_data_20220805_13.csv\nSaving file: test_data_20220805_14.csv\nSaving file: test_data_20220805_15.csv\nSaving file: test_data_20220805_16.csv\nSaving file: test_data_20220805_17.csv\nSaving file: test_data_20220805_18.csv\nSaving file: test_data_20220805_19.csv\nSaving file: test_data_20220805_20.csv\nSaving file: test_data_20220805_21.csv\nSaving file: test_data_20220805_22.csv\nSaving file: test_data_20220805_23.csv\nSaving file: test_data_20220806_00.csv\nSaving file: test_data_20220806_01.csv\nSaving file: test_data_20220806_02.csv\nSaving file: test_data_20220806_03.csv\nSaving file: test_data_20220806_04.csv\nSaving file: test_data_20220806_05.csv\nSaving file: test_data_20220806_06.csv\nSaving file: test_data_20220806_07.csv\nSaving file: test_data_20220806_08.csv\nSaving file: test_data_20220806_09.csv\nSaving file: test_data_20220806_10.csv\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nSaving file: test_data_20220806_12.csv\nSaving file: test_data_20220806_13.csv\nSaving file: test_data_20220806_14.csv\nSaving file: test_data_20220806_15.csv\nSaving file: test_data_20220806_16.csv\nSaving file: test_data_20220806_17.csv\nSaving file: test_data_20220806_18.csv\nSaving file: test_data_20220806_19.csv\nSaving file: test_data_20220806_20.csv\nSaving file: test_data_20220806_21.csv\nSaving file: test_data_20220806_22.csv\nSaving file: test_data_20220806_23.csv\nSaving file: test_data_20220807_00.csv\nSaving file: test_data_20220807_01.csv\nSaving file: test_data_20220807_02.csv\nSaving file: test_data_20220807_03.csv\nSaving file: test_data_20220807_04.csv\nSaving file: test_data_20220807_05.csv\nSaving file: test_data_20220807_06.csv\nSaving file: test_data_20220807_07.csv\nSaving file: test_data_20220807_08.csv\nSaving file: test_data_20220807_09.csv\nSaving file: test_data_20220807_10.csv\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660673668263,
  "history_end_time" : 1660680010051,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Fx4b8HlaGlv5",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k].shape\", df_cmaq.variables['O3'][:].values[k].shape)\n    #print(df_cmaq.variables['O3'][:].values[k, :] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][k,k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][k,k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][k,k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][k,k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][k,k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][k,k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][k,k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][k,k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][k,k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][k,k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][k,k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][k,k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k].shape (35, 265, 442)\nSaving file: test_data_20220805_12.csv\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k].shape (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 65, in <module>\n    co_emis=df_emis.variables['CO'][k,k]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/variable.py\", line 779, in __getitem__\n    data = as_indexable(self._data)[indexer]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/indexing.py\", line 556, in __getitem__\n    return type(self)(_wrap_numpy_scalars(self.array[key]))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/indexing.py\", line 525, in __getitem__\n    return type(self)(_wrap_numpy_scalars(self.array[key]))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/indexing.py\", line 432, in __getitem__\n    return type(self)(self.array, self._updated_key(indexer))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/indexing.py\", line 404, in _updated_key\n    full_key.append(_index_indexer_1d(k, next(iter_new_key), size))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/indexing.py\", line 177, in _index_indexer_1d\n    indexer = _expand_slice(old_indexer, size)[applied_indexer]\nIndexError: index 1 is out of bounds for axis 0 with size 1\n",
  "history_begin_time" : 1660673560700,
  "history_end_time" : 1660680010602,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "eQzBityW67T7",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k].shape\", df_cmaq.variables['O3'][:].values[k].shape)\n    #print(df_cmaq.variables['O3'][:].values[k, :] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:][k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:][k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:][k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:][k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:][k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:][k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:][k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:][k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:][k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:][k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k].shape (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660672764110,
  "history_end_time" : 1660680011086,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "GV30pPjcFJm8",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k].shape\", df_cmaq.variables['O3'][:].values[k].shape)\n    #print(df_cmaq.variables['O3'][:].values[k, :] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k].shape (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660665968848,
  "history_end_time" : 1660680011474,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Exe8QksvLVgr",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k].shape\", df_cmaq.variables['O3'][:].values[k].shape)\n    #print(df_cmaq.variables['O3'][:].values[k, :] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k].shape (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660664340181,
  "history_end_time" : 1660680012874,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "sT3raSMWm8N9",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, :].shape\", df_cmaq.variables['O3'][:].values[k, 1].shape)\n    print(df_cmaq.variables['O3'][:].values[k, 0] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, ]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, :].shape (265, 442)\n[[False False False ... False False False]\n [False False False ... False False False]\n [False False False ... False False False]\n ...\n [False False False ... False False False]\n [False False False ... False False False]\n [False False False ... False False False]]\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660662306764,
  "history_end_time" : 1660680013285,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "WkucLkfWiLUH",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, :].shape\", df_cmaq.variables['O3'][:].values[k, 1].shape)\n\tprint(df_cmaq.variables['O3'][:].values[k, 0] == df_cmaq.variables['O3'][:].values[k, 1])\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, ]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "  File \"processing_test_data.py\", line 45\n    print(df_cmaq.variables['O3'][:].values[k, 0] == df_cmaq.variables['O3'][:].values[k, 1])\n                                                                                            ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1660662294980,
  "history_end_time" : 1660680013684,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "kIxM6Lr3jxXx",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, :].shape\", df_cmaq.variables['O3'][:].values[k, 1])\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, ]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, :].shape [[21.308657 21.417473 21.513016 ... 24.174425 24.17941  24.18687 ]\n [22.041962 22.153883 22.296396 ... 24.277836 24.227646 24.189241]\n [23.108046 23.284126 23.57169  ... 24.362986 24.29129  24.195206]\n ...\n [14.440056 14.42948  14.430858 ... 32.76771  28.636433 31.654171]\n [14.422243 14.442701 14.438529 ... 35.77274  31.738668 30.585644]\n [14.419816 14.416931 14.456125 ... 35.26982  33.137398 32.96003 ]]\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660662243950,
  "history_end_time" : 1660680014633,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jUjQukMynhgu",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, :].shape\", df_cmaq.variables['O3'][:].values[k, :])\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, ]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, :].shape [[[ 21.283276   21.39204    21.488752  ...  24.140644   24.141964\n    24.15858  ]\n  [ 22.01434    22.123598   22.268742  ...  24.238356   24.185963\n    24.160936 ]\n  [ 23.08023    23.252342   23.545292  ...  24.319624   24.238934\n    24.166649 ]\n  ...\n  [ 14.423449   14.417658   14.415162  ...  32.315456   28.204237\n    31.643282 ]\n  [ 14.4092455  14.424084   14.426204  ...  35.26965    31.156649\n    30.042578 ]\n  [ 14.411868   14.409443   14.435751  ...  34.658813   32.664543\n    32.560825 ]]\n\n [[ 21.308657   21.417473   21.513016  ...  24.174425   24.17941\n    24.18687  ]\n  [ 22.041962   22.153883   22.296396  ...  24.277836   24.227646\n    24.189241 ]\n  [ 23.108046   23.284126   23.57169   ...  24.362986   24.29129\n    24.195206 ]\n  ...\n  [ 14.440056   14.42948    14.430858  ...  32.76771    28.636433\n    31.654171 ]\n  [ 14.422243   14.442701   14.438529  ...  35.77274    31.738668\n    30.585644 ]\n  [ 14.419816   14.416931   14.456125  ...  35.26982    33.137398\n    32.96003  ]]\n\n [[ 21.324984   21.432995   21.523943  ...  24.195436   24.205488\n    24.206213 ]\n  [ 22.05357    22.166498   22.306957  ...  24.301224   24.26104\n    24.205772 ]\n  [ 23.120657   23.296555   23.583014  ...  24.390974   24.32938\n    24.215515 ]\n  ...\n  [ 14.455269   14.435414   14.442837  ...  33.003696   28.94278\n    31.757221 ]\n  [ 14.435153   14.454583   14.447505  ...  36.179058   32.20054\n    31.016783 ]\n  [ 14.428122   14.424944   14.475885  ...  35.63118    33.63458\n    33.316143 ]]\n\n ...\n\n [[ 99.48274    99.47294    99.4766    ...  96.20587    95.88396\n    95.803665 ]\n  [ 99.49081    99.48729    99.490425  ...  95.78341    95.52051\n    95.45189  ]\n  [ 99.50136    99.50342    99.511795  ...  95.47565    95.23164\n    95.14256  ]\n  ...\n  [ 99.49206    99.49808    99.49937   ...  75.37479    78.07336\n    82.122154 ]\n  [ 99.49359    99.49854    99.49939   ...  74.83854    76.39122\n    79.75029  ]\n  [ 99.49511    99.498215   99.49861   ...  74.5586     75.38073\n    77.921    ]]\n\n [[ 99.99465    99.98974    99.98849   ...  98.96174    98.98331\n    98.96948  ]\n  [ 99.98797    99.96863    99.9615    ...  98.77528    98.731476\n    98.637344 ]\n  [ 99.98264    99.95531    99.947395  ...  98.11985    97.93741\n    97.864914 ]\n  ...\n  [100.00001    99.99989   100.00004   ...  87.785774   86.75163\n    85.318115 ]\n  [100.00001    99.99992    99.99993   ...  88.28335    87.92074\n    86.90676  ]\n  [ 99.99998    99.99996    99.99998   ...  88.28223    88.15628\n    87.48966  ]]\n\n [[100.00162   100.00127   100.000145  ...  99.93933    99.95858\n    99.98073  ]\n  [ 99.99769    99.99894    99.99959   ...  99.92008    99.93406\n    99.972664 ]\n  [ 99.99829    99.99742    99.99846   ...  99.89082    99.91523\n    99.96969  ]\n  ...\n  [100.00002    99.999954   99.99992   ...  86.08778    85.11906\n    84.768684 ]\n  [ 99.99996    99.99991    99.9999    ...  86.787926   85.57089\n    84.990906 ]\n  [ 99.999954   99.99996    99.99993   ...  87.46585    86.08957\n    85.31666  ]]]\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660662174224,
  "history_end_time" : 1660680015048,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "PKYOaeXabwVB",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, :].shape)\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660662084425,
  "history_end_time" : 1660680016004,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "z4Fry49yohTD",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 2].shape)\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660662018752,
  "history_end_time" : 1660680019671,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "vMy2dcjMUmU9",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 1].shape)\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660661982705,
  "history_end_time" : 1660680019145,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "8LQhiIxHuqVb",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n\n\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 111, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660661782280,
  "history_end_time" : 1660680018730,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "M8bDUCtcVxJN",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    \n    print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\ndf_cmaq.variables['O3'] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:] shape:  (24, 35, 265, 442)\ndf_cmaq.variables['O3'][:].values[k, 0].shape (265, 442)\no3 shape:  (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 110, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660661011700,
  "history_end_time" : 1660708572768,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "mgzlMPhLILM7",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())\n    print(\"o3 shape: \", o3.shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\no3 shape:  (35, 265, 442)\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 106, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660660849884,
  "history_end_time" : 1660708572234,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "9peeBGLQ8XVT",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 105, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660660758000,
  "history_end_time" : 1660680018148,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "V0xmR2SeDNgP",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 105, in <module>\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 4529, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (4099550) does not match length of index (117130)\n",
  "history_begin_time" : 1660660475358,
  "history_end_time" : 1660660667228,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Xp3Vy7RIFq8x",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 5)   # start date\nedate = date(2022, 8, 6)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220805\nSaving file: test_data_20220805_12.csv\nSaving file: test_data_20220805_13.csv\nSaving file: test_data_20220805_14.csv\nSaving file: test_data_20220805_15.csv\nSaving file: test_data_20220805_16.csv\nSaving file: test_data_20220805_17.csv\nSaving file: test_data_20220805_18.csv\nSaving file: test_data_20220805_19.csv\nSaving file: test_data_20220805_20.csv\nSaving file: test_data_20220805_21.csv\nSaving file: test_data_20220805_22.csv\nSaving file: test_data_20220805_23.csv\nSaving file: test_data_20220806_00.csv\nSaving file: test_data_20220806_01.csv\nSaving file: test_data_20220806_02.csv\nSaving file: test_data_20220806_03.csv\nSaving file: test_data_20220806_04.csv\nSaving file: test_data_20220806_05.csv\nSaving file: test_data_20220806_06.csv\nSaving file: test_data_20220806_07.csv\nSaving file: test_data_20220806_08.csv\nSaving file: test_data_20220806_09.csv\nSaving file: test_data_20220806_10.csv\nSaving file: test_data_20220806_11.csv\nGetting data for: 20220806\nSaving file: test_data_20220806_12.csv\nSaving file: test_data_20220806_13.csv\nSaving file: test_data_20220806_14.csv\nSaving file: test_data_20220806_15.csv\nSaving file: test_data_20220806_16.csv\nSaving file: test_data_20220806_17.csv\nSaving file: test_data_20220806_18.csv\nSaving file: test_data_20220806_19.csv\nSaving file: test_data_20220806_20.csv\nSaving file: test_data_20220806_21.csv\nSaving file: test_data_20220806_22.csv\nSaving file: test_data_20220806_23.csv\nSaving file: test_data_20220807_00.csv\nSaving file: test_data_20220807_01.csv\nSaving file: test_data_20220807_02.csv\nSaving file: test_data_20220807_03.csv\nSaving file: test_data_20220807_04.csv\nSaving file: test_data_20220807_05.csv\nSaving file: test_data_20220807_06.csv\nSaving file: test_data_20220807_07.csv\nSaving file: test_data_20220807_08.csv\nSaving file: test_data_20220807_09.csv\nSaving file: test_data_20220807_10.csv\nSaving file: test_data_20220807_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660566875726,
  "history_end_time" : 1660660666707,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "dofBKk1OyirT",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220802_00.csv\nSaving file: test_data_20220802_01.csv\nSaving file: test_data_20220802_02.csv\nSaving file: test_data_20220802_03.csv\nSaving file: test_data_20220802_04.csv\nSaving file: test_data_20220802_05.csv\nSaving file: test_data_20220802_06.csv\nSaving file: test_data_20220802_07.csv\nSaving file: test_data_20220802_08.csv\nSaving file: test_data_20220802_09.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220803_00.csv\nSaving file: test_data_20220803_01.csv\nSaving file: test_data_20220803_02.csv\nSaving file: test_data_20220803_03.csv\nSaving file: test_data_20220803_04.csv\nSaving file: test_data_20220803_05.csv\nSaving file: test_data_20220803_06.csv\nSaving file: test_data_20220803_07.csv\nSaving file: test_data_20220803_08.csv\nSaving file: test_data_20220803_09.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660565201361,
  "history_end_time" : 1660660666257,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "sCBBZOcIYjKM",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220802_00.csv\nSaving file: test_data_20220802_01.csv\nSaving file: test_data_20220802_02.csv\nSaving file: test_data_20220802_03.csv\nSaving file: test_data_20220802_04.csv\nSaving file: test_data_20220802_05.csv\nSaving file: test_data_20220802_06.csv\nSaving file: test_data_20220802_07.csv\nSaving file: test_data_20220802_08.csv\nSaving file: test_data_20220802_09.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220803_00.csv\nSaving file: test_data_20220803_01.csv\nSaving file: test_data_20220803_02.csv\nSaving file: test_data_20220803_03.csv\nSaving file: test_data_20220803_04.csv\nSaving file: test_data_20220803_05.csv\nSaving file: test_data_20220803_06.csv\nSaving file: test_data_20220803_07.csv\nSaving file: test_data_20220803_08.csv\nSaving file: test_data_20220803_09.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660520696105,
  "history_end_time" : 1660708571701,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "t53W7X0o50ZY",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 8, 1)   # start date\nedate = date(2022, 8, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220802_00.csv\nSaving file: test_data_20220802_01.csv\nSaving file: test_data_20220802_02.csv\nSaving file: test_data_20220802_03.csv\nSaving file: test_data_20220802_04.csv\nSaving file: test_data_20220802_05.csv\nSaving file: test_data_20220802_06.csv\nSaving file: test_data_20220802_07.csv\nSaving file: test_data_20220802_08.csv\nSaving file: test_data_20220802_09.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220803_00.csv\nSaving file: test_data_20220803_01.csv\nSaving file: test_data_20220803_02.csv\nSaving file: test_data_20220803_03.csv\nSaving file: test_data_20220803_04.csv\nSaving file: test_data_20220803_05.csv\nSaving file: test_data_20220803_06.csv\nSaving file: test_data_20220803_07.csv\nSaving file: test_data_20220803_08.csv\nSaving file: test_data_20220803_09.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660371331121,
  "history_end_time" : 1660660665712,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "zQIdxGGa8x5C",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 7, 1)   # start date\nedate = date(2022, 7, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220701\nSaving file: test_data_20220701_12.csv\nSaving file: test_data_20220701_13.csv\nSaving file: test_data_20220701_14.csv\nSaving file: test_data_20220701_15.csv\nSaving file: test_data_20220701_16.csv\nSaving file: test_data_20220701_17.csv\nSaving file: test_data_20220701_18.csv\nSaving file: test_data_20220701_19.csv\nSaving file: test_data_20220701_20.csv\nSaving file: test_data_20220701_21.csv\nSaving file: test_data_20220701_22.csv\nSaving file: test_data_20220701_23.csv\nSaving file: test_data_20220702_00.csv\nSaving file: test_data_20220702_01.csv\nSaving file: test_data_20220702_02.csv\nSaving file: test_data_20220702_03.csv\nSaving file: test_data_20220702_04.csv\nSaving file: test_data_20220702_05.csv\nSaving file: test_data_20220702_06.csv\nSaving file: test_data_20220702_07.csv\nSaving file: test_data_20220702_08.csv\nSaving file: test_data_20220702_09.csv\nSaving file: test_data_20220702_10.csv\nSaving file: test_data_20220702_11.csv\nGetting data for: 20220702\nSaving file: test_data_20220702_12.csv\nSaving file: test_data_20220702_13.csv\nSaving file: test_data_20220702_14.csv\nSaving file: test_data_20220702_15.csv\nSaving file: test_data_20220702_16.csv\nSaving file: test_data_20220702_17.csv\nSaving file: test_data_20220702_18.csv\nSaving file: test_data_20220702_19.csv\nSaving file: test_data_20220702_20.csv\nSaving file: test_data_20220702_21.csv\nSaving file: test_data_20220702_22.csv\nSaving file: test_data_20220702_23.csv\nSaving file: test_data_20220703_00.csv\nSaving file: test_data_20220703_01.csv\nSaving file: test_data_20220703_02.csv\nSaving file: test_data_20220703_03.csv\nSaving file: test_data_20220703_04.csv\nSaving file: test_data_20220703_05.csv\nSaving file: test_data_20220703_06.csv\nSaving file: test_data_20220703_07.csv\nSaving file: test_data_20220703_08.csv\nSaving file: test_data_20220703_09.csv\nSaving file: test_data_20220703_10.csv\nSaving file: test_data_20220703_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660311335189,
  "history_end_time" : 1660708571201,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "u8jwkhe1njc",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 7, 20)   # start date\nedate = date(2022, 7, 21)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220720\nSaving file: test_data_20220720_12.csv\nSaving file: test_data_20220720_13.csv\nSaving file: test_data_20220720_14.csv\nSaving file: test_data_20220720_15.csv\nSaving file: test_data_20220720_16.csv\nSaving file: test_data_20220720_17.csv\nSaving file: test_data_20220720_18.csv\nSaving file: test_data_20220720_19.csv\nSaving file: test_data_20220720_20.csv\nSaving file: test_data_20220720_21.csv\nSaving file: test_data_20220720_22.csv\nSaving file: test_data_20220720_23.csv\nSaving file: test_data_20220721_0.csv\nSaving file: test_data_20220721_1.csv\nSaving file: test_data_20220721_2.csv\nSaving file: test_data_20220721_3.csv\nSaving file: test_data_20220721_4.csv\nSaving file: test_data_20220721_5.csv\nSaving file: test_data_20220721_6.csv\nSaving file: test_data_20220721_7.csv\nSaving file: test_data_20220721_8.csv\nSaving file: test_data_20220721_9.csv\nSaving file: test_data_20220721_10.csv\nSaving file: test_data_20220721_11.csv\nGetting data for: 20220721\nSaving file: test_data_20220721_12.csv\nSaving file: test_data_20220721_13.csv\nSaving file: test_data_20220721_14.csv\nSaving file: test_data_20220721_15.csv\nSaving file: test_data_20220721_16.csv\nSaving file: test_data_20220721_17.csv\nSaving file: test_data_20220721_18.csv\nSaving file: test_data_20220721_19.csv\nSaving file: test_data_20220721_20.csv\nSaving file: test_data_20220721_21.csv\nSaving file: test_data_20220721_22.csv\nSaving file: test_data_20220721_23.csv\nSaving file: test_data_20220722_0.csv\nSaving file: test_data_20220722_1.csv\nSaving file: test_data_20220722_2.csv\nSaving file: test_data_20220722_3.csv\nSaving file: test_data_20220722_4.csv\nSaving file: test_data_20220722_5.csv\nSaving file: test_data_20220722_6.csv\nSaving file: test_data_20220722_7.csv\nSaving file: test_data_20220722_8.csv\nSaving file: test_data_20220722_9.csv\nSaving file: test_data_20220722_10.csv\nSaving file: test_data_20220722_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660299968783,
  "history_end_time" : 1660301768667,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "mDUXM765mh1q",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n# end_date = datetime.today()\n# base = end_date - timedelta(days=2)\n\nsdate = date(2022, 7, 1)   # start date\nedate = date(2022, 7, 2)   # end date\ndays = get_days_list(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220701\nSaving file: test_data_20220701_12.csv\nSaving file: test_data_20220701_13.csv\nSaving file: test_data_20220701_14.csv\nSaving file: test_data_20220701_15.csv\nSaving file: test_data_20220701_16.csv\nSaving file: test_data_20220701_17.csv\nSaving file: test_data_20220701_18.csv\nSaving file: test_data_20220701_19.csv\nSaving file: test_data_20220701_20.csv\nSaving file: test_data_20220701_21.csv\nSaving file: test_data_20220701_22.csv\nSaving file: test_data_20220701_23.csv\nSaving file: test_data_20220702_0.csv\nSaving file: test_data_20220702_1.csv\nSaving file: test_data_20220702_2.csv\nSaving file: test_data_20220702_3.csv\nSaving file: test_data_20220702_4.csv\nSaving file: test_data_20220702_5.csv\nSaving file: test_data_20220702_6.csv\nSaving file: test_data_20220702_7.csv\nSaving file: test_data_20220702_8.csv\nSaving file: test_data_20220702_9.csv\nSaving file: test_data_20220702_10.csv\nSaving file: test_data_20220702_11.csv\nGetting data for: 20220702\nSaving file: test_data_20220702_12.csv\nSaving file: test_data_20220702_13.csv\nSaving file: test_data_20220702_14.csv\nSaving file: test_data_20220702_15.csv\nSaving file: test_data_20220702_16.csv\nSaving file: test_data_20220702_17.csv\nSaving file: test_data_20220702_18.csv\nSaving file: test_data_20220702_19.csv\nSaving file: test_data_20220702_20.csv\nSaving file: test_data_20220702_21.csv\nSaving file: test_data_20220702_22.csv\nSaving file: test_data_20220702_23.csv\nSaving file: test_data_20220703_0.csv\nSaving file: test_data_20220703_1.csv\nSaving file: test_data_20220703_2.csv\nSaving file: test_data_20220703_3.csv\nSaving file: test_data_20220703_4.csv\nSaving file: test_data_20220703_5.csv\nSaving file: test_data_20220703_6.csv\nSaving file: test_data_20220703_7.csv\nSaving file: test_data_20220703_8.csv\nSaving file: test_data_20220703_9.csv\nSaving file: test_data_20220703_10.csv\nSaving file: test_data_20220703_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660279595992,
  "history_end_time" : 1660708570666,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "DOxXPQwIQdvw",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n  print(\"Getting data for: \"+day)\n    \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n            \n    df_hourly = pd.DataFrame()\n            \n    # CMAQ data\n            \n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n\n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n    # EMIS data\n                              \n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n    # MCIP data\n            \n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n            \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n            \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n            \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n            \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n\n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n\n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n\n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n            \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n    print('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n    df_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220809\nSaving file: test_data_20220809_12.csv\nSaving file: test_data_20220809_13.csv\nSaving file: test_data_20220809_14.csv\nSaving file: test_data_20220809_15.csv\nSaving file: test_data_20220809_16.csv\nSaving file: test_data_20220809_17.csv\nSaving file: test_data_20220809_18.csv\nSaving file: test_data_20220809_19.csv\nSaving file: test_data_20220809_20.csv\nSaving file: test_data_20220809_21.csv\nSaving file: test_data_20220809_22.csv\nSaving file: test_data_20220809_23.csv\nSaving file: test_data_20220809_0.csv\nSaving file: test_data_20220809_1.csv\nSaving file: test_data_20220809_2.csv\nSaving file: test_data_20220809_3.csv\nSaving file: test_data_20220809_4.csv\nSaving file: test_data_20220809_5.csv\nSaving file: test_data_20220809_6.csv\nSaving file: test_data_20220809_7.csv\nSaving file: test_data_20220809_8.csv\nSaving file: test_data_20220809_9.csv\nSaving file: test_data_20220809_10.csv\nSaving file: test_data_20220809_11.csv\nGetting data for: 20220810\nSaving file: test_data_20220810_12.csv\nSaving file: test_data_20220810_13.csv\nSaving file: test_data_20220810_14.csv\nSaving file: test_data_20220810_15.csv\nSaving file: test_data_20220810_16.csv\nSaving file: test_data_20220810_17.csv\nSaving file: test_data_20220810_18.csv\nSaving file: test_data_20220810_19.csv\nSaving file: test_data_20220810_20.csv\nSaving file: test_data_20220810_21.csv\nSaving file: test_data_20220810_22.csv\nSaving file: test_data_20220810_23.csv\nSaving file: test_data_20220810_0.csv\nSaving file: test_data_20220810_1.csv\nSaving file: test_data_20220810_2.csv\nSaving file: test_data_20220810_3.csv\nSaving file: test_data_20220810_4.csv\nSaving file: test_data_20220810_5.csv\nSaving file: test_data_20220810_6.csv\nSaving file: test_data_20220810_7.csv\nSaving file: test_data_20220810_8.csv\nSaving file: test_data_20220810_9.csv\nSaving file: test_data_20220810_10.csv\nSaving file: test_data_20220810_11.csv\nDone!\n",
  "history_begin_time" : 1660275320850,
  "history_end_time" : 1660660664122,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "s39PVZiJ7I8G",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\nend_date = datetime.today()\nbase = end_date - timedelta(days=2)\ndays = get_days_list(base, end_date)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Getting data for: 20220809\nSaving file: test_data_20220809_12.csv\nSaving file: test_data_20220809_13.csv\nSaving file: test_data_20220809_14.csv\nSaving file: test_data_20220809_15.csv\nSaving file: test_data_20220809_16.csv\nSaving file: test_data_20220809_17.csv\nSaving file: test_data_20220809_18.csv\nSaving file: test_data_20220809_19.csv\nSaving file: test_data_20220809_20.csv\nSaving file: test_data_20220809_21.csv\nSaving file: test_data_20220809_22.csv\nSaving file: test_data_20220809_23.csv\nSaving file: test_data_20220810_0.csv\nSaving file: test_data_20220810_1.csv\nSaving file: test_data_20220810_2.csv\nSaving file: test_data_20220810_3.csv\nSaving file: test_data_20220810_4.csv\nSaving file: test_data_20220810_5.csv\nSaving file: test_data_20220810_6.csv\nSaving file: test_data_20220810_7.csv\nSaving file: test_data_20220810_8.csv\nSaving file: test_data_20220810_9.csv\nSaving file: test_data_20220810_10.csv\nSaving file: test_data_20220810_11.csv\nGetting data for: 20220810\nSaving file: test_data_20220810_12.csv\nSaving file: test_data_20220810_13.csv\nSaving file: test_data_20220810_14.csv\nSaving file: test_data_20220810_15.csv\nSaving file: test_data_20220810_16.csv\nSaving file: test_data_20220810_17.csv\nSaving file: test_data_20220810_18.csv\nSaving file: test_data_20220810_19.csv\nSaving file: test_data_20220810_20.csv\nSaving file: test_data_20220810_21.csv\nSaving file: test_data_20220810_22.csv\nSaving file: test_data_20220810_23.csv\nSaving file: test_data_20220811_0.csv\nSaving file: test_data_20220811_1.csv\nSaving file: test_data_20220811_2.csv\nSaving file: test_data_20220811_3.csv\nSaving file: test_data_20220811_4.csv\nSaving file: test_data_20220811_5.csv\nSaving file: test_data_20220811_6.csv\nSaving file: test_data_20220811_7.csv\nSaving file: test_data_20220811_8.csv\nSaving file: test_data_20220811_9.csv\nSaving file: test_data_20220811_10.csv\nSaving file: test_data_20220811_11.csv\nGetting data for: 20220811\nSaving file: test_data_20220811_12.csv\nSaving file: test_data_20220811_13.csv\nSaving file: test_data_20220811_14.csv\nSaving file: test_data_20220811_15.csv\nSaving file: test_data_20220811_16.csv\nSaving file: test_data_20220811_17.csv\nSaving file: test_data_20220811_18.csv\nSaving file: test_data_20220811_19.csv\nSaving file: test_data_20220811_20.csv\nSaving file: test_data_20220811_21.csv\nSaving file: test_data_20220811_22.csv\nSaving file: test_data_20220811_23.csv\nSaving file: test_data_20220812_0.csv\nSaving file: test_data_20220812_1.csv\nSaving file: test_data_20220812_2.csv\nSaving file: test_data_20220812_3.csv\nSaving file: test_data_20220812_4.csv\nSaving file: test_data_20220812_5.csv\nSaving file: test_data_20220812_6.csv\nSaving file: test_data_20220812_7.csv\nSaving file: test_data_20220812_8.csv\nSaving file: test_data_20220812_9.csv\nSaving file: test_data_20220812_10.csv\nSaving file: test_data_20220812_11.csv\nDone with preparing testing data!\n",
  "history_begin_time" : 1660274524901,
  "history_end_time" : 1660708570152,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "PJFgDNaatktW",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\nend_date = datetime.today()\nbase = end_date - timedelta(days=2)\ndays = get_days_list(base, end_date)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  print(\"Getting data for: \"+day)\n  current_day = days[x]\n  next_day = days[x+1]\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Traceback (most recent call last):\n  File \"processing_test_data.py\", line 16, in <module>\n    print(\"Getting data for: \"+day)\nNameError: name 'day' is not defined\n",
  "history_begin_time" : 1660274454839,
  "history_end_time" : 1660708569684,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "2PoeiWQOXcPw",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\nend_date = datetime.datetime.today()\nbase = end_date - timedelta(days=2)\ndays = get_days_list(base, end_date)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  print(\"Getting data for: \"+day)\n  current_day = days[x]\n  next_day = days[x+1]\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "Traceback (most recent call last):\n  File \"processing_test_data.py\", line 5, in <module>\n    end_date = datetime.datetime.today()\nAttributeError: type object 'datetime.datetime' has no attribute 'datetime'\n",
  "history_begin_time" : 1660274393619,
  "history_end_time" : 1660274501330,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "mroFlzWGS5kw",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\nend_date = datetime.datetime.today()\nbase = end_date - timedelta(days=2)\ndays = get_days_list(base, end_date)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/input_hourly/\"\ncreate_and_clean_folder(test_folder)\n\nfor x in range(len(days)-1):\n  print(\"Getting data for: \"+day)\n  current_day = days[x]\n  next_day = days[x+1]\n  \n  # read cmaq results\n  df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\"_extracted.nc\")\n  \n  # read mcip results \n  df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+current_day+\".nc\")\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  \n  for k in time_step_in_netcdf_list:\n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    df_hourly = pd.DataFrame()\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k,0]\n    cmaq_O3=list(np.ravel(o3).transpose().round())  \n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k,0]\n    cmaq_NO2=list(np.ravel(no2).transpose().round())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k,0]\n    cmaq_CO=list(np.ravel(co).transpose().round())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k,0]\n    CO_emi=list(np.ravel(co_emis).transpose().round())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n    PRSFC=list(np.ravel(prsfc).transpose().round())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k,0]\n    PBL=list(np.ravel(pbl).transpose().round())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n    TEMP2=list(np.ravel(temp2).transpose().round())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n    WSPD10=list(np.ravel(wspd10).transpose().round())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n    WDIR10=list(np.ravel(wdir10).transpose().round())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n    RGRND=list(np.ravel(rgrnd).transpose().round())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n    CFRAC=list(np.ravel(cfrac).transpose().round())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    lat_flt=np.ravel(lat)\n    LAT=np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{str(real_hour_value)}.csv')\n\t\tdf_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n\nprint('Done with preparing testing data!')",
  "history_output" : "  File \"processing_test_data.py\", line 118\n    df_hourly.to_csv(f'{test_folder}/test_data_{day}_{str(real_hour_value)}.csv',index=False)\n                                                                                            ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1660274327817,
  "history_end_time" : 1660274500610,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "4ivQC6bjVo7u",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220728', '20220729']\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in time_step_in_netcdf_list:\n\t\treal_hour_value = real_hour_list[k]\n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220728\nSaving file: test_data_20220728_12.csv\nSaving file: test_data_20220728_13.csv\nSaving file: test_data_20220728_14.csv\nSaving file: test_data_20220728_15.csv\nSaving file: test_data_20220728_16.csv\nSaving file: test_data_20220728_17.csv\nSaving file: test_data_20220728_18.csv\nSaving file: test_data_20220728_19.csv\nSaving file: test_data_20220728_20.csv\nSaving file: test_data_20220728_21.csv\nSaving file: test_data_20220728_22.csv\nSaving file: test_data_20220728_23.csv\nSaving file: test_data_20220728_0.csv\nSaving file: test_data_20220728_1.csv\nSaving file: test_data_20220728_2.csv\nSaving file: test_data_20220728_3.csv\nSaving file: test_data_20220728_4.csv\nSaving file: test_data_20220728_5.csv\nSaving file: test_data_20220728_6.csv\nSaving file: test_data_20220728_7.csv\nSaving file: test_data_20220728_8.csv\nSaving file: test_data_20220728_9.csv\nSaving file: test_data_20220728_10.csv\nSaving file: test_data_20220728_11.csv\nGetting data for: 20220729\nSaving file: test_data_20220729_12.csv\nSaving file: test_data_20220729_13.csv\nSaving file: test_data_20220729_14.csv\nSaving file: test_data_20220729_15.csv\nSaving file: test_data_20220729_16.csv\nSaving file: test_data_20220729_17.csv\nSaving file: test_data_20220729_18.csv\nSaving file: test_data_20220729_19.csv\nSaving file: test_data_20220729_20.csv\nSaving file: test_data_20220729_21.csv\nSaving file: test_data_20220729_22.csv\nSaving file: test_data_20220729_23.csv\nSaving file: test_data_20220729_0.csv\nSaving file: test_data_20220729_1.csv\nSaving file: test_data_20220729_2.csv\nSaving file: test_data_20220729_3.csv\nSaving file: test_data_20220729_4.csv\nSaving file: test_data_20220729_5.csv\nSaving file: test_data_20220729_6.csv\nSaving file: test_data_20220729_7.csv\nSaving file: test_data_20220729_8.csv\nSaving file: test_data_20220729_9.csv\nSaving file: test_data_20220729_10.csv\nSaving file: test_data_20220729_11.csv\nDone!\n",
  "history_begin_time" : 1660190027708,
  "history_end_time" : 1660660669825,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "3phz6kba9cm",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220728', '20220729']\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in time_step_in_netcdf_list:\n\t\treal_hour_value = real_hour_list[k]\n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220728\n",
  "history_begin_time" : 1660166278573,
  "history_end_time" : 1660166318936,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Running"
},{
  "history_id" : "wi7h3me0tmp",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220803', '20220804']\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in time_step_in_netcdf_list:\n\t\treal_hour_value = real_hour_list[k]\n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220803\nSaving file: test_data_20220803_12.csv\nSaving file: test_data_20220803_13.csv\nSaving file: test_data_20220803_14.csv\nSaving file: test_data_20220803_15.csv\nSaving file: test_data_20220803_16.csv\nSaving file: test_data_20220803_17.csv\nSaving file: test_data_20220803_18.csv\nSaving file: test_data_20220803_19.csv\nSaving file: test_data_20220803_20.csv\nSaving file: test_data_20220803_21.csv\nSaving file: test_data_20220803_22.csv\nSaving file: test_data_20220803_23.csv\nSaving file: test_data_20220803_0.csv\nSaving file: test_data_20220803_1.csv\nSaving file: test_data_20220803_2.csv\nSaving file: test_data_20220803_3.csv\nSaving file: test_data_20220803_4.csv\nSaving file: test_data_20220803_5.csv\nSaving file: test_data_20220803_6.csv\nSaving file: test_data_20220803_7.csv\nSaving file: test_data_20220803_8.csv\nSaving file: test_data_20220803_9.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nGetting data for: 20220804\nSaving file: test_data_20220804_12.csv\nSaving file: test_data_20220804_13.csv\nSaving file: test_data_20220804_14.csv\nSaving file: test_data_20220804_15.csv\nSaving file: test_data_20220804_16.csv\nSaving file: test_data_20220804_17.csv\nSaving file: test_data_20220804_18.csv\nSaving file: test_data_20220804_19.csv\nSaving file: test_data_20220804_20.csv\nSaving file: test_data_20220804_21.csv\nSaving file: test_data_20220804_22.csv\nSaving file: test_data_20220804_23.csv\nSaving file: test_data_20220804_0.csv\nSaving file: test_data_20220804_1.csv\nSaving file: test_data_20220804_2.csv\nSaving file: test_data_20220804_3.csv\nSaving file: test_data_20220804_4.csv\nSaving file: test_data_20220804_5.csv\nSaving file: test_data_20220804_6.csv\nSaving file: test_data_20220804_7.csv\nSaving file: test_data_20220804_8.csv\nSaving file: test_data_20220804_9.csv\nSaving file: test_data_20220804_10.csv\nSaving file: test_data_20220804_11.csv\nDone!\n",
  "history_begin_time" : 1660008090778,
  "history_end_time" : 1660008287870,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "csU7DkC7N1kz",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in time_step_in_netcdf_list:\n\t\treal_hour_value = real_hour_list[k]\n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220803\nSaving file: test_data_20220803_12.csv\nSaving file: test_data_20220803_13.csv\nSaving file: test_data_20220803_14.csv\nSaving file: test_data_20220803_15.csv\nSaving file: test_data_20220803_16.csv\nSaving file: test_data_20220803_17.csv\nSaving file: test_data_20220803_18.csv\nSaving file: test_data_20220803_19.csv\nSaving file: test_data_20220803_20.csv\nSaving file: test_data_20220803_21.csv\nSaving file: test_data_20220803_22.csv\nSaving file: test_data_20220803_23.csv\nSaving file: test_data_20220803_0.csv\nSaving file: test_data_20220803_1.csv\nSaving file: test_data_20220803_2.csv\nSaving file: test_data_20220803_3.csv\nSaving file: test_data_20220803_4.csv\nSaving file: test_data_20220803_5.csv\nSaving file: test_data_20220803_6.csv\nSaving file: test_data_20220803_7.csv\nSaving file: test_data_20220803_8.csv\nSaving file: test_data_20220803_9.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nGetting data for: 20220804\nSaving file: test_data_20220804_12.csv\nSaving file: test_data_20220804_13.csv\nSaving file: test_data_20220804_14.csv\nSaving file: test_data_20220804_15.csv\nSaving file: test_data_20220804_16.csv\nSaving file: test_data_20220804_17.csv\nSaving file: test_data_20220804_18.csv\nSaving file: test_data_20220804_19.csv\nSaving file: test_data_20220804_20.csv\nSaving file: test_data_20220804_21.csv\nSaving file: test_data_20220804_22.csv\nSaving file: test_data_20220804_23.csv\nSaving file: test_data_20220804_0.csv\nSaving file: test_data_20220804_1.csv\nSaving file: test_data_20220804_2.csv\nSaving file: test_data_20220804_3.csv\nSaving file: test_data_20220804_4.csv\nSaving file: test_data_20220804_5.csv\nSaving file: test_data_20220804_6.csv\nSaving file: test_data_20220804_7.csv\nSaving file: test_data_20220804_8.csv\nSaving file: test_data_20220804_9.csv\nSaving file: test_data_20220804_10.csv\nSaving file: test_data_20220804_11.csv\nDone!\n",
  "history_begin_time" : 1659741923897,
  "history_end_time" : 1660274500112,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "TGLYDWxca3km",
  "history_input" : "# get hourly CMAQ data into csv for prediction\n\nimport xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n\t\treal_hour_value = real_hour_list[k]\n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(real_hour_value)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(real_hour_value)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(real_hour_value)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220803\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 34, in <module>\n    for k in t:\nNameError: name 't' is not defined\n",
  "history_begin_time" : 1659741886247,
  "history_end_time" : 1660274499580,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "cMBxQTIkvW4U",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220801', '20220802']\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220801_0.csv\nSaving file: test_data_20220801_1.csv\nSaving file: test_data_20220801_2.csv\nSaving file: test_data_20220801_3.csv\nSaving file: test_data_20220801_4.csv\nSaving file: test_data_20220801_5.csv\nSaving file: test_data_20220801_6.csv\nSaving file: test_data_20220801_7.csv\nSaving file: test_data_20220801_8.csv\nSaving file: test_data_20220801_9.csv\nSaving file: test_data_20220801_10.csv\nSaving file: test_data_20220801_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nDone!\n",
  "history_begin_time" : 1659721013654,
  "history_end_time" : 1660274499076,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "4mZNU3VzZYyj",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220803\nSaving file: test_data_20220803_12.csv\nSaving file: test_data_20220803_13.csv\nSaving file: test_data_20220803_14.csv\nSaving file: test_data_20220803_15.csv\nSaving file: test_data_20220803_16.csv\nSaving file: test_data_20220803_17.csv\nSaving file: test_data_20220803_18.csv\nSaving file: test_data_20220803_19.csv\nSaving file: test_data_20220803_20.csv\nSaving file: test_data_20220803_21.csv\nSaving file: test_data_20220803_22.csv\nSaving file: test_data_20220803_23.csv\nSaving file: test_data_20220803_0.csv\nSaving file: test_data_20220803_1.csv\nSaving file: test_data_20220803_2.csv\nSaving file: test_data_20220803_3.csv\nSaving file: test_data_20220803_4.csv\nSaving file: test_data_20220803_5.csv\nSaving file: test_data_20220803_6.csv\nSaving file: test_data_20220803_7.csv\nSaving file: test_data_20220803_8.csv\nSaving file: test_data_20220803_9.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone!\n",
  "history_begin_time" : 1659664533456,
  "history_end_time" : 1660274498545,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Kx5U9ernHRX0",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220803\nSaving file: test_data_20220803_12.csv\nSaving file: test_data_20220803_13.csv\nSaving file: test_data_20220803_14.csv\nSaving file: test_data_20220803_15.csv\nSaving file: test_data_20220803_16.csv\nSaving file: test_data_20220803_17.csv\nSaving file: test_data_20220803_18.csv\nSaving file: test_data_20220803_19.csv\nSaving file: test_data_20220803_20.csv\nSaving file: test_data_20220803_21.csv\nSaving file: test_data_20220803_22.csv\nSaving file: test_data_20220803_23.csv\nSaving file: test_data_20220803_0.csv\nSaving file: test_data_20220803_1.csv\nSaving file: test_data_20220803_2.csv\nSaving file: test_data_20220803_3.csv\nSaving file: test_data_20220803_4.csv\nSaving file: test_data_20220803_5.csv\nSaving file: test_data_20220803_6.csv\nSaving file: test_data_20220803_7.csv\nSaving file: test_data_20220803_8.csv\nSaving file: test_data_20220803_9.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone!\n",
  "history_begin_time" : 1659661121519,
  "history_end_time" : 1660274497345,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "7SaKQoCK41y0",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nGetting data for: 20220803\nSaving file: test_data_20220803_12.csv\nSaving file: test_data_20220803_13.csv\nSaving file: test_data_20220803_14.csv\nSaving file: test_data_20220803_15.csv\nSaving file: test_data_20220803_16.csv\nSaving file: test_data_20220803_17.csv\nSaving file: test_data_20220803_18.csv\nSaving file: test_data_20220803_19.csv\nSaving file: test_data_20220803_20.csv\nSaving file: test_data_20220803_21.csv\nSaving file: test_data_20220803_22.csv\nSaving file: test_data_20220803_23.csv\nSaving file: test_data_20220803_0.csv\nSaving file: test_data_20220803_1.csv\nSaving file: test_data_20220803_2.csv\nSaving file: test_data_20220803_3.csv\nSaving file: test_data_20220803_4.csv\nSaving file: test_data_20220803_5.csv\nSaving file: test_data_20220803_6.csv\nSaving file: test_data_20220803_7.csv\nSaving file: test_data_20220803_8.csv\nSaving file: test_data_20220803_9.csv\nSaving file: test_data_20220803_10.csv\nSaving file: test_data_20220803_11.csv\nDone!\n",
  "history_begin_time" : 1659660832172,
  "history_end_time" : 1659661084465,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "CmFe64WYQdyZ",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220801_0.csv\nSaving file: test_data_20220801_1.csv\nSaving file: test_data_20220801_2.csv\nSaving file: test_data_20220801_3.csv\nSaving file: test_data_20220801_4.csv\nSaving file: test_data_20220801_5.csv\nSaving file: test_data_20220801_6.csv\nSaving file: test_data_20220801_7.csv\nSaving file: test_data_20220801_8.csv\nSaving file: test_data_20220801_9.csv\nSaving file: test_data_20220801_10.csv\nSaving file: test_data_20220801_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nDone!\n",
  "history_begin_time" : 1659581913324,
  "history_end_time" : 1659661083853,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "dt27ic89vna",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+' '+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220801_0.csv\nSaving file: test_data_20220801_1.csv\nSaving file: test_data_20220801_2.csv\nSaving file: test_data_20220801_3.csv\nSaving file: test_data_20220801_4.csv\nSaving file: test_data_20220801_5.csv\nSaving file: test_data_20220801_6.csv\nSaving file: test_data_20220801_7.csv\nSaving file: test_data_20220801_8.csv\nSaving file: test_data_20220801_9.csv\nSaving file: test_data_20220801_10.csv\nSaving file: test_data_20220801_11.csv\nGetting data for: 20220802\nSaving file: test_data_20220802_12.csv\nSaving file: test_data_20220802_13.csv\nSaving file: test_data_20220802_14.csv\nSaving file: test_data_20220802_15.csv\nSaving file: test_data_20220802_16.csv\nSaving file: test_data_20220802_17.csv\nSaving file: test_data_20220802_18.csv\nSaving file: test_data_20220802_19.csv\nSaving file: test_data_20220802_20.csv\nSaving file: test_data_20220802_21.csv\nSaving file: test_data_20220802_22.csv\nSaving file: test_data_20220802_23.csv\nSaving file: test_data_20220802_0.csv\nSaving file: test_data_20220802_1.csv\nSaving file: test_data_20220802_2.csv\nSaving file: test_data_20220802_3.csv\nSaving file: test_data_20220802_4.csv\nSaving file: test_data_20220802_5.csv\nSaving file: test_data_20220802_6.csv\nSaving file: test_data_20220802_7.csv\nSaving file: test_data_20220802_8.csv\nSaving file: test_data_20220802_9.csv\nSaving file: test_data_20220802_10.csv\nSaving file: test_data_20220802_11.csv\nDone!\n",
  "history_begin_time" : 1659578719172,
  "history_end_time" : 1659578968390,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "6pjKYpH3vygV",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220731\nSaving file: test_data_20220731_12.csv\nSaving file: test_data_20220731_13.csv\nSaving file: test_data_20220731_14.csv\nSaving file: test_data_20220731_15.csv\nSaving file: test_data_20220731_16.csv\nSaving file: test_data_20220731_17.csv\nSaving file: test_data_20220731_18.csv\nSaving file: test_data_20220731_19.csv\nSaving file: test_data_20220731_20.csv\nSaving file: test_data_20220731_21.csv\nSaving file: test_data_20220731_22.csv\nSaving file: test_data_20220731_23.csv\nSaving file: test_data_20220731_0.csv\nSaving file: test_data_20220731_1.csv\nSaving file: test_data_20220731_2.csv\nSaving file: test_data_20220731_3.csv\nSaving file: test_data_20220731_4.csv\nSaving file: test_data_20220731_5.csv\nSaving file: test_data_20220731_6.csv\nSaving file: test_data_20220731_7.csv\nSaving file: test_data_20220731_8.csv\nSaving file: test_data_20220731_9.csv\nSaving file: test_data_20220731_10.csv\nSaving file: test_data_20220731_11.csv\nGetting data for: 20220801\nSaving file: test_data_20220801_12.csv\nSaving file: test_data_20220801_13.csv\nSaving file: test_data_20220801_14.csv\nSaving file: test_data_20220801_15.csv\nSaving file: test_data_20220801_16.csv\nSaving file: test_data_20220801_17.csv\nSaving file: test_data_20220801_18.csv\nSaving file: test_data_20220801_19.csv\nSaving file: test_data_20220801_20.csv\nSaving file: test_data_20220801_21.csv\nSaving file: test_data_20220801_22.csv\nSaving file: test_data_20220801_23.csv\nSaving file: test_data_20220801_0.csv\nSaving file: test_data_20220801_1.csv\nSaving file: test_data_20220801_2.csv\nSaving file: test_data_20220801_3.csv\nSaving file: test_data_20220801_4.csv\nSaving file: test_data_20220801_5.csv\nSaving file: test_data_20220801_6.csv\nSaving file: test_data_20220801_7.csv\nSaving file: test_data_20220801_8.csv\nSaving file: test_data_20220801_9.csv\nSaving file: test_data_20220801_10.csv\nSaving file: test_data_20220801_11.csv\nDone!\n",
  "history_begin_time" : 1659448812217,
  "history_end_time" : 1659735577580,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Sb5FBNYwPjIw",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220612', '20220613']\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220612\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 30, in <module>\n    df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/api.py\", line 479, in open_dataset\n    engine = plugins.guess_engine(filename_or_obj)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/plugins.py\", line 148, in guess_engine\n    raise ValueError(error_msg)\nValueError: did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html\n",
  "history_begin_time" : 1657618989637,
  "history_end_time" : 1658940332321,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "z9wq1mkp8zj",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\ndays = ['20220612', '20220613']\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220612\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 30, in <module>\n    df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/api.py\", line 479, in open_dataset\n    engine = plugins.guess_engine(filename_or_obj)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/backends/plugins.py\", line 148, in guess_engine\n    raise ValueError(error_msg)\nValueError: did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html\n",
  "history_begin_time" : 1657618902657,
  "history_end_time" : 1657618956269,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "FmERur3rFKh2",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220705\nSaving file: test_data_20220705_12.csv\nSaving file: test_data_20220705_13.csv\nSaving file: test_data_20220705_14.csv\nSaving file: test_data_20220705_15.csv\nSaving file: test_data_20220705_16.csv\nSaving file: test_data_20220705_17.csv\nSaving file: test_data_20220705_18.csv\nSaving file: test_data_20220705_19.csv\nSaving file: test_data_20220705_20.csv\nSaving file: test_data_20220705_21.csv\nSaving file: test_data_20220705_22.csv\nSaving file: test_data_20220705_23.csv\nSaving file: test_data_20220705_0.csv\nSaving file: test_data_20220705_1.csv\nSaving file: test_data_20220705_2.csv\nSaving file: test_data_20220705_3.csv\nSaving file: test_data_20220705_4.csv\nSaving file: test_data_20220705_5.csv\nSaving file: test_data_20220705_6.csv\nSaving file: test_data_20220705_7.csv\nSaving file: test_data_20220705_8.csv\nSaving file: test_data_20220705_9.csv\nSaving file: test_data_20220705_10.csv\nSaving file: test_data_20220705_11.csv\nGetting data for: 20220706\nSaving file: test_data_20220706_12.csv\nSaving file: test_data_20220706_13.csv\nSaving file: test_data_20220706_14.csv\nSaving file: test_data_20220706_15.csv\nSaving file: test_data_20220706_16.csv\nSaving file: test_data_20220706_17.csv\nSaving file: test_data_20220706_18.csv\nSaving file: test_data_20220706_19.csv\nSaving file: test_data_20220706_20.csv\nSaving file: test_data_20220706_21.csv\nSaving file: test_data_20220706_22.csv\nSaving file: test_data_20220706_23.csv\nSaving file: test_data_20220706_0.csv\nSaving file: test_data_20220706_1.csv\nSaving file: test_data_20220706_2.csv\nSaving file: test_data_20220706_3.csv\nSaving file: test_data_20220706_4.csv\nSaving file: test_data_20220706_5.csv\nSaving file: test_data_20220706_6.csv\nSaving file: test_data_20220706_7.csv\nSaving file: test_data_20220706_8.csv\nSaving file: test_data_20220706_9.csv\nSaving file: test_data_20220706_10.csv\nSaving file: test_data_20220706_11.csv\nDone!\n",
  "history_begin_time" : 1657244622314,
  "history_end_time" : 1658940331759,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "4mlBcpOK6ORE",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n\t\tdf_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220704\nSaving file: test_data_20220704_12.csv\nSaving file: test_data_20220704_13.csv\nSaving file: test_data_20220704_14.csv\nSaving file: test_data_20220704_15.csv\nSaving file: test_data_20220704_16.csv\nSaving file: test_data_20220704_17.csv\nSaving file: test_data_20220704_18.csv\nSaving file: test_data_20220704_19.csv\nSaving file: test_data_20220704_20.csv\nSaving file: test_data_20220704_21.csv\nSaving file: test_data_20220704_22.csv\nSaving file: test_data_20220704_23.csv\nSaving file: test_data_20220704_0.csv\nSaving file: test_data_20220704_1.csv\nSaving file: test_data_20220704_2.csv\nSaving file: test_data_20220704_3.csv\nSaving file: test_data_20220704_4.csv\nSaving file: test_data_20220704_5.csv\nSaving file: test_data_20220704_6.csv\nSaving file: test_data_20220704_7.csv\nSaving file: test_data_20220704_8.csv\nSaving file: test_data_20220704_9.csv\nSaving file: test_data_20220704_10.csv\nSaving file: test_data_20220704_11.csv\nGetting data for: 20220705\nSaving file: test_data_20220705_12.csv\nSaving file: test_data_20220705_13.csv\nSaving file: test_data_20220705_14.csv\nSaving file: test_data_20220705_15.csv\nSaving file: test_data_20220705_16.csv\nSaving file: test_data_20220705_17.csv\nSaving file: test_data_20220705_18.csv\nSaving file: test_data_20220705_19.csv\nSaving file: test_data_20220705_20.csv\nSaving file: test_data_20220705_21.csv\nSaving file: test_data_20220705_22.csv\nSaving file: test_data_20220705_23.csv\nSaving file: test_data_20220705_0.csv\nSaving file: test_data_20220705_1.csv\nSaving file: test_data_20220705_2.csv\nSaving file: test_data_20220705_3.csv\nSaving file: test_data_20220705_4.csv\nSaving file: test_data_20220705_5.csv\nSaving file: test_data_20220705_6.csv\nSaving file: test_data_20220705_7.csv\nSaving file: test_data_20220705_8.csv\nSaving file: test_data_20220705_9.csv\nSaving file: test_data_20220705_10.csv\nSaving file: test_data_20220705_11.csv\nDone!\n",
  "history_begin_time" : 1657155751228,
  "history_end_time" : 1658940331271,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "voS9WmHTkrEz",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n        df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 121\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n                                                        ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1657155723847,
  "history_end_time" : 1658940330657,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "eADvhAjzDU1g",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n        df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n\t\tdf_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n\t\tdf_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : null,
  "history_begin_time" : 1657155687728,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "6h8ioyrUmtjW",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220704\nSaving file: test_data_20220704_12.csv\nSaving file: test_data_20220704_13.csv\nSaving file: test_data_20220704_14.csv\nSaving file: test_data_20220704_15.csv\nSaving file: test_data_20220704_16.csv\nSaving file: test_data_20220704_17.csv\nSaving file: test_data_20220704_18.csv\nSaving file: test_data_20220704_19.csv\nSaving file: test_data_20220704_20.csv\nSaving file: test_data_20220704_21.csv\nSaving file: test_data_20220704_22.csv\nSaving file: test_data_20220704_23.csv\nSaving file: test_data_20220704_0.csv\nSaving file: test_data_20220704_1.csv\nSaving file: test_data_20220704_2.csv\nSaving file: test_data_20220704_3.csv\nSaving file: test_data_20220704_4.csv\nSaving file: test_data_20220704_5.csv\nSaving file: test_data_20220704_6.csv\nSaving file: test_data_20220704_7.csv\nSaving file: test_data_20220704_8.csv\nSaving file: test_data_20220704_9.csv\nSaving file: test_data_20220704_10.csv\nSaving file: test_data_20220704_11.csv\nGetting data for: 20220705\nSaving file: test_data_20220705_12.csv\nSaving file: test_data_20220705_13.csv\nSaving file: test_data_20220705_14.csv\nSaving file: test_data_20220705_15.csv\nSaving file: test_data_20220705_16.csv\nSaving file: test_data_20220705_17.csv\nSaving file: test_data_20220705_18.csv\nSaving file: test_data_20220705_19.csv\nSaving file: test_data_20220705_20.csv\nSaving file: test_data_20220705_21.csv\nSaving file: test_data_20220705_22.csv\nSaving file: test_data_20220705_23.csv\nSaving file: test_data_20220705_0.csv\nSaving file: test_data_20220705_1.csv\nSaving file: test_data_20220705_2.csv\nSaving file: test_data_20220705_3.csv\nSaving file: test_data_20220705_4.csv\nSaving file: test_data_20220705_5.csv\nSaving file: test_data_20220705_6.csv\nSaving file: test_data_20220705_7.csv\nSaving file: test_data_20220705_8.csv\nSaving file: test_data_20220705_9.csv\nSaving file: test_data_20220705_10.csv\nSaving file: test_data_20220705_11.csv\nDone!\n",
  "history_begin_time" : 1657139140215,
  "history_end_time" : 1659735579281,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "13x1sl1rnhEK",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n        \n    for k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 32\n    for k in t:\n              ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1657139126896,
  "history_end_time" : 1659735579780,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "XAkMlHFtAbqP",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\"\n        \n    for k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 32\n    for k in t:\n              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1657138970959,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "kGro4EfLM5x7",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n\tprint(\"Getting data for: \"+day)\n    \n\t# read cmaq results\n\tdf_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n\t# read mcip results \n\tdf_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n\t# read emissions results \n\tdf_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\"\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 32\n    for k in t:\n              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1657138943703,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "BGIMuZyN3hZd",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n    print(\"Getting data for: \"+day)\n    \n    # read cmaq results\n    df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n    # read mcip results \n    df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n    # read emissions results \n    df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\"\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 32\n    for k in t:\n              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1657138907495,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "JLshgevDBkaq",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n    print(\"Getting data for: \"+day)\n    \n    # read cmaq results\n    df_cmaq = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n    # read mcip results \n    df_mcip = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/METCRO2D_\"+day+\".nc\")\n        \n    # read emissions results \n    df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\"\n        \n\tfor k in t:\n            \n            \n\t\tdf_hourly = pd.DataFrame()\n            \n\t\t# CMAQ data\n            \n\t\t# O3 variable\n\t\to3=df_cmaq.variables['O3'][:].values[k,0]\n\t\tcmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n\t\t# NO2\n\t\tno2=df_cmaq.variables['NO2'][:].values[k,0]\n\t\tcmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n\t\t# CO\n\t\tco=df_cmaq.variables['CO'][:].values[k,0]\n\t\tcmaq_CO=list(np.ravel(co).transpose().round())\n\n\t\t# PM25_CO\n\t\tpm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n\t\tcmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n                              \n                              \n\t\t# EMIS data\n                              \n\t\tco_emis=df_emis.variables['CO'][:].values[k,0]\n\t\tCO_emi=list(np.ravel(co_emis).transpose().round())    \n                \n                              \n                              \n\t\t# MCIP data\n            \n\t\t# CO variable\n\t\tprsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n\t\tPRSFC=list(np.ravel(prsfc).transpose().round())\n            \n\t\t# NO2\n\t\tpbl=df_mcip.variables['PBL'][:].values[k,0]\n\t\tPBL=list(np.ravel(pbl).transpose().round())\n            \n\t\t# TEMP2\n\t\ttemp2=df_mcip.variables['TEMP2'][:].values[k,0]\n\t\tTEMP2=list(np.ravel(temp2).transpose().round())\n            \n\t\t# WSPD10\n\t\twspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n\t\tWSPD10=list(np.ravel(wspd10).transpose().round())\n            \n\t\t# WDIR10\n\t\twdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n\t\tWDIR10=list(np.ravel(wdir10).transpose().round())\n\n\t\t# RGRND\n\t\trgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n\t\tRGRND=list(np.ravel(rgrnd).transpose().round())\n\n\t\t# CFRAC\n\t\tcfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n\t\tCFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n\t\t## LAT/LON data\n\t\tdf_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n\t\tlat = df_coords.variables['LAT'][:].values[0,0]\n\t\tlat_flt=np.ravel(lat)\n\t\tLAT=np.tile(lat_flt,1)\n\n\t\tlon = df_coords.variables['LON'][:].values[0,0]\n\t\tlon_flt=np.ravel(lon)\n\t\tLON=np.tile(lon_flt,1)\n            \n\t\tdf_hourly['Latitude'] = LAT\n\t\tdf_hourly['Longitude'] = LON\n\t\tdf_hourly['YYYYMMDDHH'] = day+str(k)\n\t\tdf_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n\t\tdf_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n\t\tdf_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n\t\tdf_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n\t\tdf_hourly['CO(moles/s)'] = CO_emi\n\t\tdf_hourly['PRSFC(Pa)'] = PRSFC\n\t\tdf_hourly['PBL(m)'] = PBL\n\t\tdf_hourly['TEMP2(K)'] = TEMP2\n\t\tdf_hourly['WSPD10(m/s)'] = WSPD10\n\t\tdf_hourly['WDIR10(degree)'] = WDIR10\n\t\tdf_hourly['RGRND(W/m2)'] = RGRND\n\t\tdf_hourly['CFRAC'] = CFRAC\n            \n            \n\t\tprint('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n\t\tdf_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "  File \"processing_test_data.py\", line 32\n    for k in t:\n              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1657138877040,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "1IAP0joOvnZS",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base + timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor day in days:\n    print(\"Getting data for: \"+day)\n    \n    # read cmaq results\n    files_cmaq = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\n                      \"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+day+\"_extracted.nc\")\n    \n    # read mcip results \n    files_mcip = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+day+\".nc\")\n    \n    for cmaq, mcip in zip(files_cmaq, files_mcip):\n        \n        df_cmaq = xr.open_dataset(cmaq)\n        df_mcip = xr.open_dataset(mcip)\n        \n        for k in t:\n            \n            \n            df_hourly = pd.DataFrame()\n            \n            # CMAQ data\n            \n            # O3 variable\n            o3=df_cmaq.variables['O3'][:].values[k,0]\n            cmaq_O3=list(np.ravel(o3).transpose().round())  \n            \n            # NO2\n            no2=df_cmaq.variables['NO2'][:].values[k,0]\n            cmaq_NO2=list(np.ravel(no2).transpose().round())\n      \n            # CO\n            co=df_cmaq.variables['CO'][:].values[k,0]\n            cmaq_CO=list(np.ravel(co).transpose().round())\n\n            # PM25_CO\n            pm25=df_cmaq.variables['PM25_OC'][:].values[k,0]\n            cmaq_PM25_CO=list(np.ravel(pm25).transpose().round())\n            \n            \n            # MCIP data\n            \n            # CO variable\n            prsfc=df_mcip.variables['PRSFC'][:].values[k,0]\n            PRSFC=list(np.ravel(prsfc).transpose().round())\n            \n            # NO2\n            pbl=df_mcip.variables['PBL'][:].values[k,0]\n            PBL=list(np.ravel(pbl).transpose().round())\n            \n            # TEMP2\n            temp2=df_mcip.variables['TEMP2'][:].values[k,0]\n            TEMP2=list(np.ravel(temp2).transpose().round())\n            \n            # WSPD10\n            wspd10=df_mcip.variables['WSPD10'][:].values[k,0]\n            WSPD10=list(np.ravel(wspd10).transpose().round())\n            \n            # WDIR10\n            wdir10=df_mcip.variables['WDIR10'][:].values[k,0]\n            WDIR10=list(np.ravel(wdir10).transpose().round())\n\n            # RGRND\n            rgrnd=df_mcip.variables['RGRND'][:].values[k,0]\n            RGRND=list(np.ravel(rgrnd).transpose().round())\n\n            # CFRAC\n            cfrac=df_mcip.variables['CFRAC'][:].values[k,0]\n            CFRAC=list(np.ravel(cfrac).transpose().round())\n\n            \n            ## getting data for lat and long\n            df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\n            \n            lat = df_coords.variables['LAT'][:].values[0,0]\n            lat_flt=np.ravel(lat)\n            LAT=np.tile(lat_flt,1)\n\n            # long\n            lon = df_coords.variables['LON'][:].values[0,0]\n            lon_flt=np.ravel(lon)\n            LON=np.tile(lon_flt,1)\n            \n            # {'YYYYMMDDHH':YYMMDDHH,}\n            df_hourly['Latitude'] = LAT\n            df_hourly['Longitude'] = LON\n            df_hourly['YYMMDDHH'] = day+str(k)\n            df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n            df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n            df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n            df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n            df_hourly['PRSFC(Pa)'] = PRSFC\n            df_hourly['PBL(m)'] = PBL\n            df_hourly['TEMP2(K)'] = TEMP2\n            df_hourly['WSPD10(m/s)'] = WSPD10\n            df_hourly['WDIR10(degree)'] = WDIR10\n            df_hourly['RGRND(W/m2)'] = RGRND\n            df_hourly['CFRAC'] = CFRAC\n            \n            \n            print('Saving file: test_data_'+day+'_'+str(k)+'.csv')\n            df_hourly.to_csv('/groups/ESS/aalnaim/cmaq/input_hourly/test_data_'+day+'_'+str(k)+'.csv',index=False)\n\nprint('Done!')",
  "history_output" : "Getting data for: 20220704\nSaving file: test_data_20220704_12.csv\nSaving file: test_data_20220704_13.csv\nSaving file: test_data_20220704_14.csv\nSaving file: test_data_20220704_15.csv\nSaving file: test_data_20220704_16.csv\nSaving file: test_data_20220704_17.csv\nSaving file: test_data_20220704_18.csv\nSaving file: test_data_20220704_19.csv\nSaving file: test_data_20220704_20.csv\nSaving file: test_data_20220704_21.csv\nSaving file: test_data_20220704_22.csv\nSaving file: test_data_20220704_23.csv\nSaving file: test_data_20220704_0.csv\nSaving file: test_data_20220704_1.csv\nSaving file: test_data_20220704_2.csv\nSaving file: test_data_20220704_3.csv\nSaving file: test_data_20220704_4.csv\nSaving file: test_data_20220704_5.csv\nSaving file: test_data_20220704_6.csv\nSaving file: test_data_20220704_7.csv\nSaving file: test_data_20220704_8.csv\nSaving file: test_data_20220704_9.csv\nSaving file: test_data_20220704_10.csv\nSaving file: test_data_20220704_11.csv\nGetting data for: 20220705\nSaving file: test_data_20220705_12.csv\nSaving file: test_data_20220705_13.csv\nSaving file: test_data_20220705_14.csv\nSaving file: test_data_20220705_15.csv\nSaving file: test_data_20220705_16.csv\nSaving file: test_data_20220705_17.csv\nSaving file: test_data_20220705_18.csv\nSaving file: test_data_20220705_19.csv\nSaving file: test_data_20220705_20.csv\nSaving file: test_data_20220705_21.csv\nSaving file: test_data_20220705_22.csv\nSaving file: test_data_20220705_23.csv\nSaving file: test_data_20220705_0.csv\nSaving file: test_data_20220705_1.csv\nSaving file: test_data_20220705_2.csv\nSaving file: test_data_20220705_3.csv\nSaving file: test_data_20220705_4.csv\nSaving file: test_data_20220705_5.csv\nSaving file: test_data_20220705_6.csv\nSaving file: test_data_20220705_7.csv\nSaving file: test_data_20220705_8.csv\nSaving file: test_data_20220705_9.csv\nSaving file: test_data_20220705_10.csv\nSaving file: test_data_20220705_11.csv\nDone!\n",
  "history_begin_time" : 1657103512565,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "orxddctze9j",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv('/groups/ESS/aalnaim/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220626\n20220625\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022062612  ...             9.0        592.0    0.0\n1  21.855751 -120.512497  2022062612  ...             9.0        590.0    0.0\n2  21.882309 -120.404144  2022062612  ...             9.0        589.0    0.0\n3  21.908745 -120.295715  2022062612  ...             9.0        587.0    0.0\n4  21.935051 -120.187225  2022062612  ...             8.0        585.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1656428452856,
  "history_end_time" : 1656450968066,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "vwnsae06o0m",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(2)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv('/groups/ESS/aalnaim/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "bash: python: command not found\n",
  "history_begin_time" : 1656428411868,
  "history_end_time" : 1656428429384,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "ra78VXpBhR2N",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(3)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\ndays = ['20220615','20220614', '20220613', '20220612']\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv('/groups/ESS/aalnaim/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220615\n20220614\n20220613\n20220612\n11244480\n11244480\n11244480\n11244480\n11244480\n11244480\n11244480\n11244480\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022061512  ...           342.0        595.0    0.0\n1  21.855751 -120.512497  2022061512  ...           342.0        594.0    0.0\n2  21.882309 -120.404144  2022061512  ...           341.0        592.0    0.0\n3  21.908745 -120.295715  2022061512  ...           341.0        591.0    0.0\n4  21.935051 -120.187225  2022061512  ...           341.0        589.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1655489193303,
  "history_end_time" : 1655490491850,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "kHJiGOZQYjvf",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(3)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv('/groups/ESS/aalnaim/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220613\n20220612\n20220611\n8433360\n8433360\n8433360\n8433360\n8433360\n8433360\n8433360\n8433360\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022061312  ...           347.0        341.0    0.0\n1  21.855751 -120.512497  2022061312  ...           346.0        338.0    0.0\n2  21.882309 -120.404144  2022061312  ...           346.0        311.0    1.0\n3  21.908745 -120.295715  2022061312  ...           347.0        300.0    1.0\n4  21.935051 -120.187225  2022061312  ...           348.0        308.0    1.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1655276511890,
  "history_end_time" : 1655490491266,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "X8cRTB8AM4y9",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220610\n20220609\n20220608\n20220607\n20220606\n20220605\n20220604\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022061012  ...           315.0        599.0    0.0\n1  21.855751 -120.512497  2022061012  ...           315.0        597.0    0.0\n2  21.882309 -120.404144  2022061012  ...           315.0        596.0    0.0\n3  21.908745 -120.295715  2022061012  ...           315.0        594.0    0.0\n4  21.935051 -120.187225  2022061012  ...           314.0        593.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1655077019296,
  "history_end_time" : 1655490490336,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "bpsieog903q",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220610\n20220609\n20220608\n20220607\n20220606\n20220605\n20220604\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022061012\n1  21.855751 -120.512497  2022061012\n2  21.882309 -120.404144  2022061012\n3  21.908745 -120.295715  2022061012\n4  21.935051 -120.187225  2022061012\n",
  "history_begin_time" : 1655072871942,
  "history_end_time" : 1655073496197,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "xDAf45QSyIE9",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today() - timedelta(days=2)\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220610\n20220609\n20220608\n20220607\n20220606\n20220605\n20220604\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022061012\n1  21.855751 -120.512497  2022061012\n2  21.882309 -120.404144  2022061012\n3  21.908745 -120.295715  2022061012\n4  21.935051 -120.187225  2022061012\n",
  "history_begin_time" : 1655070684424,
  "history_end_time" : 1655076929974,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "kGkFHxwTajuH",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today()\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220612\n20220611\n20220610\n20220609\n20220608\n20220607\n20220606\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022061212\n1  21.855751 -120.512497  2022061212\n2  21.882309 -120.404144  2022061212\n3  21.908745 -120.295715  2022061212\n4  21.935051 -120.187225  2022061212\n",
  "history_begin_time" : 1655068448119,
  "history_end_time" : 1655076930531,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "3l96bzaacsn",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today()\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220608\n20220607\n20220606\n20220605\n20220604\n20220603\n20220602\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/3l96bzaacsn/processing_test_data.py\", line 140, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654726160895,
  "history_end_time" : 1654726162384,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "6pp1zzyywf7",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today()\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220607\n20220606\n20220605\n20220604\n20220603\n20220602\n20220601\n2811120\n2811120\n2811120\n2811120\n14055600\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022060712\n1  21.855751 -120.512497  2022060712\n2  21.882309 -120.404144  2022060712\n3  21.908745 -120.295715  2022060712\n4  21.935051 -120.187225  2022060712\n",
  "history_begin_time" : 1654618513417,
  "history_end_time" : 1654618774279,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "aqt8fv",
  "indicator" : "Done"
},{
  "history_id" : "PveR6QlvcIvf",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today()\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndays = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220607\n20220606\n20220605\n20220604\n20220603\n20220602\n20220601\n2811120\n2811120\n2811120\n2811120\n14055600\n19677840\n19677840\n19677840\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022060712\n1  21.855751 -120.512497  2022060712\n2  21.882309 -120.404144  2022060712\n3  21.908745 -120.295715  2022060712\n4  21.935051 -120.187225  2022060712\n",
  "history_begin_time" : 1654616977749,
  "history_end_time" : 1654620106124,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "opgfgou2xy0",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220607\n20220606\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654616694262,
  "history_end_time" : 1654616728564,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "aqt8fv",
  "indicator" : "Failed"
},{
  "history_id" : "YrQh3bYU76XA",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\nbase = datetime.datetime.today()\ndate_list = [base - timedelta(days=x) for x in range(7)]\ndate_list = [date.strftime('%Y%m%d') for date in date_list]\n\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"processing_test_data.py\", line 19, in <module>\n    for i in days:\nNameError: name 'days' is not defined\n",
  "history_begin_time" : 1654611118035,
  "history_end_time" : 1654611601419,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "yszMq4eHJEZq",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\nfrom datetime import timedelta\n# home directory\nhome = str(Path.home())\n\ndt = datetime.datetime.today()\nstart = (dt - timedelta(days = (dt.weekday() + 2) % 7))  - timedelta(days=7)\nend = (start + timedelta(days=6))\nstart = start.strftime('%Y%m%d')\nend = end.strftime('%Y%m%d')\ndays=[start, end]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220528\n20220603\n2811120\n2811120\n2811120\n2811120\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022052812\n1  21.855751 -120.512497  2022052812\n2  21.882309 -120.404144  2022052812\n3  21.908745 -120.295715  2022052812\n4  21.935051 -120.187225  2022052812\n",
  "history_begin_time" : 1654610368754,
  "history_end_time" : 1654611597790,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "0kFrv2SwqWbK",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ndt = datetime.datetime.today()\nstart = (dt - timedelta(days = (dt.weekday() + 2) % 7))  - timedelta(days=7)\nend = (start + timedelta(days=6))\nstart = start.strftime('%Y%m%d')\nend = end.strftime('%Y%m%d')\ndays=[start, end]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"processing_test_data.py\", line 11, in <module>\n    start = (dt - timedelta(days = (dt.weekday() + 2) % 7))  - timedelta(days=7)\nNameError: name 'timedelta' is not defined\n",
  "history_begin_time" : 1654610330395,
  "history_end_time" : 1654611597294,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "GihqxlfgqqKe",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ndt = datetime.today()\nstart = (dt - timedelta(days = (dt.weekday() + 2) % 7))  - timedelta(days=7)\nend = (start + timedelta(days=6))\nstart = start.strftime('%Y%m%d')\nend = end.strftime('%Y%m%d')\ndays=[start, end]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"processing_test_data.py\", line 10, in <module>\n    dt = datetime.today()\nAttributeError: module 'datetime' has no attribute 'today'\n",
  "history_begin_time" : 1654610243184,
  "history_end_time" : 1654611596701,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jPLF1AvFF9R4",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ndt = datetime.today()\nstart = (dt - timedelta(days = (dt.weekday() + 2) % 7))  - timedelta(days=7)\nend = (start + timedelta(days=6))\nstart = start.strftime('%Y%m%d')\nend = end..strftime('%Y%m%d')\ndays=[start, end]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "  File \"processing_test_data.py\", line 14\n    end = end..strftime('%Y%m%d')\n              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1654610053562,
  "history_end_time" : 1654610233931,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "OHGom6kjOLXn",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today, pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220606\n20220605\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654534602317,
  "history_end_time" : 1654534633990,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "hxxQG0xh7FWU",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=5)\npday=pday_.strftime('%Y%m%d')\nfday_= pday_ + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[pday, fday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220601\n20220602\n2811120\n2811120\n2811120\n2811120\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH\n0  21.829086 -120.620789  2022060112\n1  21.855751 -120.512497  2022060112\n2  21.882309 -120.404144  2022060112\n3  21.908745 -120.295715  2022060112\n4  21.935051 -120.187225  2022060112\n",
  "history_begin_time" : 1654534255229,
  "history_end_time" : 1654534633004,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "oQXGDeARIud0",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=5)\npday=pday_.strftime('%Y%m%d')\nfday_= pday_ + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[pday, fday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n\n",
  "history_output" : "20220601\n20220602\n2811120\n2811120\n2811120\n2811120\n5622240\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 209, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/frame.py\", line 636, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/internals/construction.py\", line 502, in dict_to_mgr\n    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/internals/construction.py\", line 120, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/core/internals/construction.py\", line 674, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n",
  "history_begin_time" : 1654533966876,
  "history_end_time" : 1654534632522,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "OswE1bo0Y2hR",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=5)\npday=pday_.strftime('%Y%m%d')\nfday_= pday_ + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[pday, fday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\nprint(files)\nfor j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n    # O3 variable\n    # O3 variable\n        oo=df.variables['O3'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)      \n        aa.append(o3tp)\n    # NO2\n        oo=df.variables['NO2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        bb.append(o3tp)\n        # CO\n        oo=df.variables['CO'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        cc.append(o3tp)\n\n        # PM25_CO\n        oo=df.variables['PM25_OC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ee.append(o3tp)\n\n        cmaq_O3=list(np.concatenate(aa).flat) \n        print(len(cmaq_O3))\n        del aa\n        cmaq_NO2=list(np.concatenate(bb).flat) \n        print(len(cmaq_NO2))\n        del bb\n        cmaq_CO=list(np.concatenate(cc).flat) \n        print(len(cmaq_CO))\n        del cc\n\n        cmaq_PM25_CO=list(np.concatenate(ee).flat)\n\n        del ee\n      \n\n\n\n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n        # CO variable\n        oo=df.variables['PRSFC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ii.append(o3tp)\n        # NO2\n        oo=df.variables['PBL'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        jj.append(o3tp)\n        # NO\n        oo=df.variables['TEMP2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        kk.append(o3tp)\n            # NO\n        oo=df.variables['WSPD10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ll.append(o3tp)\n            # NO\n        oo=df.variables['WDIR10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        mm.append(o3tp)\n\n            # NO\n        oo=df.variables['RGRND'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        oo1.append(o3tp)\n\n            # NO2\n        oo=df.variables['CFRAC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        rr.append(o3tp)\n\n        #NO_emi=list(np.concatenate(hh).flat) \n        #del hh\n        PRSFC=list(np.concatenate(ii).flat) \n        del ii\n        PBL=list(np.concatenate(jj).flat) \n        del jj\n        TEMP2=list(np.concatenate(kk).flat) \n        del kk\n        WSPD10=list(np.concatenate(ll).flat) \n        del ll\n        WDIR10=list(np.concatenate(mm).flat)\n        del mm\n\n        RGRND=list(np.concatenate(oo1).flat) \n        del oo1\n        #RN=list(np.concatenate(pp).flat)\n        #del pp\n        #RC=list(np.concatenate(qq).flat)\n        #del qq\n        CFRAC=list(np.concatenate(rr).flat)\n        print(len(CFRAC))\n        del rr\n      \n      \n\n# CO_emi=list(np.concatenate(ff).flat) \n# print(len(CO_emi))\n# del ff\n\n\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\nprint(dat)\n\n\n",
  "history_output" : "20220601\n20220602\n['/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_20220602_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf']\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 49, in <module>\n    oo=df.variables['O3'][:].values[k,0]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/utils.py\", line 457, in __getitem__\n    return self.mapping[key]\nKeyError: 'O3'\n",
  "history_begin_time" : 1654533897147,
  "history_end_time" : 1654534631971,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "N6CXBr90E8kv",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=5)\npday=pday_.strftime('%Y%m%d')\nfday_= pday_ + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\nprint(files)\nfor j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n    # O3 variable\n    # O3 variable\n        oo=df.variables['O3'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)      \n        aa.append(o3tp)\n    # NO2\n        oo=df.variables['NO2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        bb.append(o3tp)\n        # CO\n        oo=df.variables['CO'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        cc.append(o3tp)\n\n        # PM25_CO\n        oo=df.variables['PM25_OC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ee.append(o3tp)\n\n        cmaq_O3=list(np.concatenate(aa).flat) \n        print(len(cmaq_O3))\n        del aa\n        cmaq_NO2=list(np.concatenate(bb).flat) \n        print(len(cmaq_NO2))\n        del bb\n        cmaq_CO=list(np.concatenate(cc).flat) \n        print(len(cmaq_CO))\n        del cc\n\n        cmaq_PM25_CO=list(np.concatenate(ee).flat)\n\n        del ee\n      \n\n\n\n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n        # CO variable\n        oo=df.variables['PRSFC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ii.append(o3tp)\n        # NO2\n        oo=df.variables['PBL'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        jj.append(o3tp)\n        # NO\n        oo=df.variables['TEMP2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        kk.append(o3tp)\n            # NO\n        oo=df.variables['WSPD10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ll.append(o3tp)\n            # NO\n        oo=df.variables['WDIR10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        mm.append(o3tp)\n\n            # NO\n        oo=df.variables['RGRND'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        oo1.append(o3tp)\n\n            # NO2\n        oo=df.variables['CFRAC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        rr.append(o3tp)\n\n        #NO_emi=list(np.concatenate(hh).flat) \n        #del hh\n        PRSFC=list(np.concatenate(ii).flat) \n        del ii\n        PBL=list(np.concatenate(jj).flat) \n        del jj\n        TEMP2=list(np.concatenate(kk).flat) \n        del kk\n        WSPD10=list(np.concatenate(ll).flat) \n        del ll\n        WDIR10=list(np.concatenate(mm).flat)\n        del mm\n\n        RGRND=list(np.concatenate(oo1).flat) \n        del oo1\n        #RN=list(np.concatenate(pp).flat)\n        #del pp\n        #RC=list(np.concatenate(qq).flat)\n        #del qq\n        CFRAC=list(np.concatenate(rr).flat)\n        print(len(CFRAC))\n        del rr\n      \n      \n\n# CO_emi=list(np.concatenate(ff).flat) \n# print(len(CO_emi))\n# del ff\n\n\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\nprint(dat)\n\n\n",
  "history_output" : "20220606\n20220601\n['/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_20220601_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf']\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 49, in <module>\n    oo=df.variables['O3'][:].values[k,0]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/xarray/core/utils.py\", line 457, in __getitem__\n    return self.mapping[key]\nKeyError: 'O3'\n",
  "history_begin_time" : 1654533778350,
  "history_end_time" : 1654534631489,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "XT7Pk2USdvgX",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\nprint(files)\nfor j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n    # O3 variable\n    # O3 variable\n        oo=df.variables['O3'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)      \n        aa.append(o3tp)\n    # NO2\n        oo=df.variables['NO2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        bb.append(o3tp)\n        # CO\n        oo=df.variables['CO'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        cc.append(o3tp)\n\n        # PM25_CO\n        oo=df.variables['PM25_OC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ee.append(o3tp)\n\n        cmaq_O3=list(np.concatenate(aa).flat) \n        print(len(cmaq_O3))\n        del aa\n        cmaq_NO2=list(np.concatenate(bb).flat) \n        print(len(cmaq_NO2))\n        del bb\n        cmaq_CO=list(np.concatenate(cc).flat) \n        print(len(cmaq_CO))\n        del cc\n\n        cmaq_PM25_CO=list(np.concatenate(ee).flat)\n\n        del ee\n      \n\n\n\n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n        # CO variable\n        oo=df.variables['PRSFC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ii.append(o3tp)\n        # NO2\n        oo=df.variables['PBL'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        jj.append(o3tp)\n        # NO\n        oo=df.variables['TEMP2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        kk.append(o3tp)\n            # NO\n        oo=df.variables['WSPD10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ll.append(o3tp)\n            # NO\n        oo=df.variables['WDIR10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        mm.append(o3tp)\n\n            # NO\n        oo=df.variables['RGRND'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        oo1.append(o3tp)\n\n            # NO2\n        oo=df.variables['CFRAC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        rr.append(o3tp)\n\n        #NO_emi=list(np.concatenate(hh).flat) \n        #del hh\n        PRSFC=list(np.concatenate(ii).flat) \n        del ii\n        PBL=list(np.concatenate(jj).flat) \n        del jj\n        TEMP2=list(np.concatenate(kk).flat) \n        del kk\n        WSPD10=list(np.concatenate(ll).flat) \n        del ll\n        WDIR10=list(np.concatenate(mm).flat)\n        del mm\n\n        RGRND=list(np.concatenate(oo1).flat) \n        del oo1\n        #RN=list(np.concatenate(pp).flat)\n        #del pp\n        #RC=list(np.concatenate(qq).flat)\n        #del qq\n        CFRAC=list(np.concatenate(rr).flat)\n        print(len(CFRAC))\n        del rr\n      \n      \n\n# CO_emi=list(np.concatenate(ff).flat) \n# print(len(CO_emi))\n# del ff\n\n\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\nprint(dat)\n\n\n",
  "history_output" : "20220606\n20220605\n[]\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 201, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nNameError: name 'cmaq_O3' is not defined\n",
  "history_begin_time" : 1654533456703,
  "history_end_time" : 1654534630954,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "gM2EBitWsivj",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\nfor j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n    # O3 variable\n    # O3 variable\n        oo=df.variables['O3'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)      \n        aa.append(o3tp)\n    # NO2\n        oo=df.variables['NO2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        bb.append(o3tp)\n        # CO\n        oo=df.variables['CO'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        cc.append(o3tp)\n\n        # PM25_CO\n        oo=df.variables['PM25_OC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ee.append(o3tp)\n\n        cmaq_O3=list(np.concatenate(aa).flat) \n        print(len(cmaq_O3))\n        del aa\n        cmaq_NO2=list(np.concatenate(bb).flat) \n        print(len(cmaq_NO2))\n        del bb\n        cmaq_CO=list(np.concatenate(cc).flat) \n        print(len(cmaq_CO))\n        del cc\n\n        cmaq_PM25_CO=list(np.concatenate(ee).flat)\n\n        del ee\n      \n\n\n\n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n        # CO variable\n        oo=df.variables['PRSFC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ii.append(o3tp)\n        # NO2\n        oo=df.variables['PBL'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        jj.append(o3tp)\n        # NO\n        oo=df.variables['TEMP2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        kk.append(o3tp)\n            # NO\n        oo=df.variables['WSPD10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ll.append(o3tp)\n            # NO\n        oo=df.variables['WDIR10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        mm.append(o3tp)\n\n            # NO\n        oo=df.variables['RGRND'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        oo1.append(o3tp)\n\n            # NO2\n        oo=df.variables['CFRAC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        rr.append(o3tp)\n\n        #NO_emi=list(np.concatenate(hh).flat) \n        #del hh\n        PRSFC=list(np.concatenate(ii).flat) \n        del ii\n        PBL=list(np.concatenate(jj).flat) \n        del jj\n        TEMP2=list(np.concatenate(kk).flat) \n        del kk\n        WSPD10=list(np.concatenate(ll).flat) \n        del ll\n        WDIR10=list(np.concatenate(mm).flat)\n        del mm\n\n        RGRND=list(np.concatenate(oo1).flat) \n        del oo1\n        #RN=list(np.concatenate(pp).flat)\n        #del pp\n        #RC=list(np.concatenate(qq).flat)\n        #del qq\n        CFRAC=list(np.concatenate(rr).flat)\n        print(len(CFRAC))\n        del rr\n      \n      \n\n# CO_emi=list(np.concatenate(ff).flat) \n# print(len(CO_emi))\n# del ff\n\n\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\nprint(dat)\n\n\n",
  "history_output" : "20220606\n20220605\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 201, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nNameError: name 'cmaq_O3' is not defined\n",
  "history_begin_time" : 1654533256095,
  "history_end_time" : 1654534630506,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "KhUW39AUfb9B",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\n\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\nfor j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n    # O3 variable\n    # O3 variable\n        oo=df.variables['O3'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)      \n        aa.append(o3tp)\n    # NO2\n        oo=df.variables['NO2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        bb.append(o3tp)\n        # CO\n        oo=df.variables['CO'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        cc.append(o3tp)\n\n        # PM25_CO\n        oo=df.variables['PM25_OC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ee.append(o3tp)\n\n        cmaq_O3=list(np.concatenate(aa).flat) \n        print(len(cmaq_O3))\n        del aa\n        cmaq_NO2=list(np.concatenate(bb).flat) \n        print(len(cmaq_NO2))\n        del bb\n        cmaq_CO=list(np.concatenate(cc).flat) \n        print(len(cmaq_CO))\n        del cc\n\n        cmaq_PM25_CO=list(np.concatenate(ee).flat)\n\n        del ee\n      \n\n\n\n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n        # CO variable\n        oo=df.variables['PRSFC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ii.append(o3tp)\n        # NO2\n        oo=df.variables['PBL'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        jj.append(o3tp)\n        # NO\n        oo=df.variables['TEMP2'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        kk.append(o3tp)\n            # NO\n        oo=df.variables['WSPD10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        ll.append(o3tp)\n            # NO\n        oo=df.variables['WDIR10'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        mm.append(o3tp)\n\n            # NO\n        oo=df.variables['RGRND'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        oo1.append(o3tp)\n\n            # NO2\n        oo=df.variables['CFRAC'][:].values[k,0]\n        oo3=np.ravel(oo)\n        o3tp=np.transpose(oo3)\n        o3tp=np.round(o3tp)\n        rr.append(o3tp)\n\n        #NO_emi=list(np.concatenate(hh).flat) \n        #del hh\n        PRSFC=list(np.concatenate(ii).flat) \n        del ii\n        PBL=list(np.concatenate(jj).flat) \n        del jj\n        TEMP2=list(np.concatenate(kk).flat) \n        del kk\n        WSPD10=list(np.concatenate(ll).flat) \n        del ll\n        WDIR10=list(np.concatenate(mm).flat)\n        del mm\n\n        RGRND=list(np.concatenate(oo1).flat) \n        del oo1\n        #RN=list(np.concatenate(pp).flat)\n        #del pp\n        #RC=list(np.concatenate(qq).flat)\n        #del qq\n        CFRAC=list(np.concatenate(rr).flat)\n        print(len(CFRAC))\n        del rr\n      \n      \n\n# CO_emi=list(np.concatenate(ff).flat) \n# print(len(CO_emi))\n# del ff\n\n\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\nprint(dat)\n\n\n",
  "history_output" : "20220606\n20220605\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 201, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nNameError: name 'cmaq_O3' is not defined\n",
  "history_begin_time" : 1654533177041,
  "history_end_time" : 1654534629954,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "VsWzWokYSjVW",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220630:\n    print(\"yes4\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\nfor j in files:\n    print(j)\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\nfiles = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\nfor j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\nyes3\n20220605\nyes3\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 157, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532852393,
  "history_end_time" : 1654534629505,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "s5MSJsC6Kqdw",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220630:\n    print(\"yes4\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\nfor j in files:\n    print(j)\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "  File \"processing_test_data.py\", line 107\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n                                                                                                       ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1654532795982,
  "history_end_time" : 1654534628923,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "1nrCjjDGdpzc",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n    print(j)\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\nyes3\n20220605\nyes3\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 156, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532443644,
  "history_end_time" : 1654534638789,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jpNJloWTR1tk",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\tprint(j)\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "  File \"processing_test_data.py\", line 75\n    print(j)\n           ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1654532420390,
  "history_end_time" : 1654534638188,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "xmzhQE1tcFmr",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\nyes3\n20220605\nyes3\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 156, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532365070,
  "history_end_time" : 1654534637704,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "ddLV6ktoF1I8",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n      print(aa)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\nyes3\n20220605\nyes3\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 156, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532331904,
  "history_end_time" : 1654534637171,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "7sW7NLZP574T",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"yes1\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    print(\"yes2\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    print(\"yes3\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\nyes3\n20220605\nyes3\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 155, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532218701,
  "history_end_time" : 1654534636706,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "16aXb5W0HEfC",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220630:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220606\n20220605\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 152, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654532150426,
  "history_end_time" : 1654534636172,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "y3bc17e5udv",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220605\n20220604\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654477412232,
  "history_end_time" : 1654477448684,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "roeaa3",
  "indicator" : "Failed"
},{
  "history_id" : "ophrppdyibn",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220605\n20220604\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 6, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654465998552,
  "history_end_time" : 1654465999407,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "09syopvs1cj",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220605\n20220604\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654456035636,
  "history_end_time" : 1654456069663,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "roeaa3",
  "indicator" : "Failed"
},{
  "history_id" : "CsQLFZxde8OA",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    print(\"YES\")\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220604\n20220603\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 142, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654321911911,
  "history_end_time" : 1654321928950,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7q2VqlXyJpIa",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220604\n20220603\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654321847557,
  "history_end_time" : 1654321865170,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "T65lA2clssKe",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "bash: python: command not found\n",
  "history_begin_time" : 1654320630130,
  "history_end_time" : 1654320631851,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "z3cnnln1v3n",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220604\n20220603\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 180, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654319723927,
  "history_end_time" : 1654319745021,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "2nbvwn43c52",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220604\n20220603\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654317871400,
  "history_end_time" : 1654317918048,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "roeaa3",
  "indicator" : "Done"
},{
  "history_id" : "c0ktfkmow7t",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220603\n20220602\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1654314655943,
  "history_end_time" : 1654314692848,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "roeaa3",
  "indicator" : "Done"
},{
  "history_id" : "86jiqh87wnv",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220527\n20220526\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022052712  ...            17.0        578.0    0.0\n1  21.855751 -120.512497  2022052712  ...            16.0        576.0    0.0\n2  21.882309 -120.404144  2022052712  ...            16.0        575.0    0.0\n3  21.908745 -120.295715  2022052712  ...            16.0        573.0    0.0\n4  21.935051 -120.187225  2022052712  ...            16.0        571.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1653698223684,
  "history_end_time" : 1653698489488,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "5aogvy3akz4",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220527\n20220526\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022052712  ...            17.0        578.0    0.0\n1  21.855751 -120.512497  2022052712  ...            16.0        576.0    0.0\n2  21.882309 -120.404144  2022052712  ...            16.0        575.0    0.0\n3  21.908745 -120.295715  2022052712  ...            16.0        573.0    0.0\n4  21.935051 -120.187225  2022052712  ...            16.0        571.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1653698126770,
  "history_end_time" : 1653698392328,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "y78mtjrm28e",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220519\n20220518\nTraceback (most recent call last):\n  File \"processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 6, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1652934715358,
  "history_end_time" : 1652934716198,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7tmx4b54vai",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220518\n20220517\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/7tmx4b54vai/processing_test_data.py\", line 141, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1652897340552,
  "history_end_time" : 1652897342141,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rkb9aeni5ts",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220517\n20220516\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022051712  ...            13.0        587.0    0.0\n1  21.855751 -120.512497  2022051712  ...            13.0        586.0    0.0\n2  21.882309 -120.404144  2022051712  ...            13.0        584.0    0.0\n3  21.908745 -120.295715  2022051712  ...            13.0        583.0    0.0\n4  21.935051 -120.187225  2022051712  ...            13.0        581.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1652831960005,
  "history_end_time" : 1652832228551,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "3mmbvxznj0w",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220517\n20220516\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022051712  ...            13.0        587.0    0.0\n1  21.855751 -120.512497  2022051712  ...            13.0        586.0    0.0\n2  21.882309 -120.404144  2022051712  ...            13.0        584.0    0.0\n3  21.908745 -120.295715  2022051712  ...            13.0        583.0    0.0\n4  21.935051 -120.187225  2022051712  ...            13.0        581.0    0.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1652831094620,
  "history_end_time" : 1652831359543,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "nzkd32bw9gd",
  "history_input" : null,
  "history_output" : "Remote SCP command had error: scp: nzkd32bw9gd.tar: Disk quota exceeded",
  "history_begin_time" : 1652786138024,
  "history_end_time" : 1652786139520,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "cgaalfh045q",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220508\n20220507\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022050812  ...             9.0        282.0    0.0\n1  21.855751 -120.512497  2022050812  ...             9.0        281.0    0.0\n2  21.882309 -120.404144  2022050812  ...             8.0        278.0    1.0\n3  21.908745 -120.295715  2022050812  ...             8.0        277.0    1.0\n4  21.935051 -120.187225  2022050812  ...             7.0        279.0    1.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1652054986013,
  "history_end_time" : 1652055212321,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "jat9fidsg1o",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220508\n20220507\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  WDIR10(degree)  RGRND(W/m2)  CFRAC\n0  21.829086 -120.620789  2022050812  ...             9.0        282.0    0.0\n1  21.855751 -120.512497  2022050812  ...             9.0        281.0    0.0\n2  21.882309 -120.404144  2022050812  ...             8.0        278.0    1.0\n3  21.908745 -120.295715  2022050812  ...             8.0        277.0    1.0\n4  21.935051 -120.187225  2022050812  ...             7.0        279.0    1.0\n\n[5 rows x 15 columns]\n",
  "history_begin_time" : 1652047846389,
  "history_end_time" : 1652048118277,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "bfxybxpjn10",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n       # PM25_EC\n      oo=df.variables['PM25_EC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      dd.append(o3tp)\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      gg.append(o3tp)\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n            # NO\n      oo=df.variables['WSTAR'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      nn.append(o3tp)\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n            # NO\n      oo=df.variables['RN'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      pp.append(o3tp)\n        \t# NO2\n      oo=df.variables['RC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      qq.append(o3tp)\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\ncmaq_PM25_EC=list(np.concatenate(dd).flat) \nprint(len(cmaq_PM25_EC))\ndel dd\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\nNO2_emi=list(np.concatenate(gg).flat) \nprint(len(NO2_emi))\ndel gg\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\nWSTAR=list(np.concatenate(nn).flat) \ndel nn\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\nRN=list(np.concatenate(pp).flat)\ndel pp\nRC=list(np.concatenate(qq).flat)\ndel qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_EC(ug/m3)':cmaq_PM25_EC,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'NO2(moles/s)':NO2_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'WSTAR(m/s)':WSTAR,'RGRND(W/m2)':RGRND,'RN(cm)':RN,'RC(cm)':RC,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220430\n20220429\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/bfxybxpjn10/processing_test_data.py\", line 167, in <module>\n    cmaq_O3=list(np.concatenate(aa).flat) \n  File \"<__array_function__ internals>\", line 5, in concatenate\nValueError: need at least one array to concatenate\n",
  "history_begin_time" : 1651361414689,
  "history_end_time" : 1651361416221,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7cobt8kdx7i",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220420\n20220419\n2811120\n2811120\n2811120\n2811120\n2811120\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"/home/mislam25/gw-workspace/7cobt8kdx7i/processing_test_data.py\", line 209, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 464, in dict_to_mgr\n    return arrays_to_mgr(\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 119, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 635, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n",
  "history_begin_time" : 1650480551788,
  "history_end_time" : 1650480845629,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "t59moyyfae7",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\n\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\n\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\n\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\n#RN=list(np.concatenate(pp).flat)\n#del pp\n#RC=list(np.concatenate(qq).flat)\n#del qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220420\n20220419\n2811120\n2811120\n2811120\n2811120\n2811120\n5622240\n5622240\n5622240\nTraceback (most recent call last):\n  File \"/home/mislam25/gw-workspace/t59moyyfae7/processing_test_data.py\", line 209, in <module>\n    dat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'RGRND(W/m2)':RGRND,'CFRAC':CFRAC})\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 464, in dict_to_mgr\n    return arrays_to_mgr(\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 119, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 635, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n",
  "history_begin_time" : 1650473497697,
  "history_end_time" : 1650473789079,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "7lxad71eov1",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n       # PM25_EC\n      oo=df.variables['PM25_EC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      dd.append(o3tp)\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      gg.append(o3tp)\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n            # NO\n      oo=df.variables['WSTAR'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      nn.append(o3tp)\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n            # NO\n      oo=df.variables['RN'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      pp.append(o3tp)\n        \t# NO2\n      oo=df.variables['RC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      qq.append(o3tp)\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\ncmaq_PM25_EC=list(np.concatenate(dd).flat) \nprint(len(cmaq_PM25_EC))\ndel dd\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\nNO2_emi=list(np.concatenate(gg).flat) \nprint(len(NO2_emi))\ndel gg\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\nWSTAR=list(np.concatenate(nn).flat) \ndel nn\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\nRN=list(np.concatenate(pp).flat)\ndel pp\nRC=list(np.concatenate(qq).flat)\ndel qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_EC(ug/m3)':cmaq_PM25_EC,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'NO2(moles/s)':NO2_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'WSTAR(m/s)':WSTAR,'RGRND(W/m2)':RGRND,'RN(cm)':RN,'RC(cm)':RC,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220417\n20220416\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  RN(cm)  RC(cm)  CFRAC\n0  21.829086 -120.620789  2022041712  ...     0.0     0.0    0.0\n1  21.855751 -120.512497  2022041712  ...     0.0     0.0    0.0\n2  21.882309 -120.404144  2022041712  ...     0.0     0.0    0.0\n3  21.908745 -120.295715  2022041712  ...     0.0     0.0    0.0\n4  21.935051 -120.187225  2022041712  ...     0.0     0.0    0.0\n\n[5 rows x 20 columns]\n",
  "history_begin_time" : 1650252115378,
  "history_end_time" : 1650252522395,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "r7nzz3da9sl",
  "history_input" : "import xarray as xr\nimport pandas as pd\nimport glob, os\nimport numpy as np\nfrom pathlib import Path\nimport datetime\n# home directory\nhome = str(Path.home())\n\ntoday=datetime.datetime.today().strftime('%Y%m%d')\npday_= datetime.datetime.today() - datetime.timedelta(days=1)\npday=pday_.strftime('%Y%m%d')\nfday_= datetime.datetime.today() + datetime.timedelta(days=1)\nfday=fday_.strftime('%Y%m%d')\ndays=[today,pday]\naa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo1,pp,qq,rr,ss=[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]\n#ff=[]\n# k = time dimension - start from 12 to match with data\nt = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\nfor i in days:\n  print(i)\n  # read cmaq results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20210315 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  else:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/CCTMout/12km/POST/\"+\"COMBINE3D_ACONC_v531_gcc_AQF5X_\"+i+\"_extracted.nc\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# O3 variable\n  \t# O3 variable\n      oo=df.variables['O3'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)      \n      aa.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      bb.append(o3tp)\n      # CO\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      cc.append(o3tp)\n       # PM25_EC\n      oo=df.variables['PM25_EC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      dd.append(o3tp)\n      # PM25_CO\n      oo=df.variables['PM25_OC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ee.append(o3tp)\n      \n      \n  # read emission results\n  # old files before 20210315 are not in diractory. must choose later date.\n  if int(i)>=20191231 and int(i)<=20210902:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_nobeis_2016fh_16j.ncf\")\n  elif int(i)==20220303:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n\n# set todays date if they don't change dataformate    \n#  else if int(i)>=20220313 and int(i)<=int(today):\n  elif int(i)>=20220313 and int(i)<=20220331:\n    files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/\"+\"emis_mole_all_\"+i+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\")\n  for j in files:\n\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['CO'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ff.append(o3tp)\n  \t# NO2\n      oo=df.variables['NO2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      gg.append(o3tp)\n      # NO\n#      oo=df.variables['NO'][:].values[k,0]\n#      oo3=np.ravel(oo)\n#      o3tp=np.transpose(oo3)\n#      o3tp=np.round(o3tp)\n#      hh.append(o3tp)  \n      \n# read mcip results \n# date must be later of 20210101\n  files = glob.glob(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/mcip/12km/\"+\"METCRO2D_\"+i+\".nc\")\n  for j in files:\n    df = xr.open_dataset(j)\n    for k in t:\n  \t# CO variable\n      oo=df.variables['PRSFC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ii.append(o3tp)\n  \t# NO2\n      oo=df.variables['PBL'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      jj.append(o3tp)\n      # NO\n      oo=df.variables['TEMP2'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      kk.append(o3tp)\n            # NO\n      oo=df.variables['WSPD10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      ll.append(o3tp)\n            # NO\n      oo=df.variables['WDIR10'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      mm.append(o3tp)\n            # NO\n      oo=df.variables['WSTAR'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      nn.append(o3tp)\n            # NO\n      oo=df.variables['RGRND'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      oo1.append(o3tp)\n            # NO\n      oo=df.variables['RN'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      pp.append(o3tp)\n        \t# NO2\n      oo=df.variables['RC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      qq.append(o3tp)\n        \t# NO2\n      oo=df.variables['CFRAC'][:].values[k,0]\n      oo3=np.ravel(oo)\n      o3tp=np.transpose(oo3)\n      o3tp=np.round(o3tp)\n      rr.append(o3tp)\n      \n      \ncmaq_O3=list(np.concatenate(aa).flat) \nprint(len(cmaq_O3))\ndel aa\ncmaq_NO2=list(np.concatenate(bb).flat) \nprint(len(cmaq_NO2))\ndel bb\ncmaq_CO=list(np.concatenate(cc).flat) \nprint(len(cmaq_CO))\ndel cc\ncmaq_PM25_EC=list(np.concatenate(dd).flat) \nprint(len(cmaq_PM25_EC))\ndel dd\ncmaq_PM25_CO=list(np.concatenate(ee).flat)\n\ndel ee\nCO_emi=list(np.concatenate(ff).flat) \nprint(len(CO_emi))\ndel ff\nNO2_emi=list(np.concatenate(gg).flat) \nprint(len(NO2_emi))\ndel gg\n#NO_emi=list(np.concatenate(hh).flat) \n#del hh\nPRSFC=list(np.concatenate(ii).flat) \ndel ii\nPBL=list(np.concatenate(jj).flat) \ndel jj\nTEMP2=list(np.concatenate(kk).flat) \ndel kk\nWSPD10=list(np.concatenate(ll).flat) \ndel ll\nWDIR10=list(np.concatenate(mm).flat)\ndel mm\nWSTAR=list(np.concatenate(nn).flat) \ndel nn\nRGRND=list(np.concatenate(oo1).flat) \ndel oo1\nRN=list(np.concatenate(pp).flat)\ndel pp\nRC=list(np.concatenate(qq).flat)\ndel qq\nCFRAC=list(np.concatenate(rr).flat)\nprint(len(CFRAC))\ndel rr\n\n## selecting lat and long\ndf = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D')\nlat_1 = df.variables['LAT'][:].values[0,0]\nlat_flt=np.ravel(lat_1)\n# need to manipulate 48 values if the next day data is available\nLAT=np.tile(lat_flt,len(days)*24)\nprint(len(LAT))\n# long\nlon_1 = df.variables['LON'][:].values[0,0]\nlon_flt=np.ravel(lon_1)\n# need to manipulate 48 values if the next day data is available\nLON=np.tile(lon_flt,len(days)*24)\nprint(len(LON))\n# creating dataframe\n\n## creatime date-time dimension\n# date-time dimension for today\ntime0=[]\nt = ['12','13','14','15','16','17','18','19','20','21','22','23','00','01','02','03','04','05','06','07','08','09','10','11']\nfor i in days:\n  for j in t:\n    time_0=np.full((265,442),i+j)\n    time0.append(time_0)\nYYMMDDHH=list(np.concatenate(time0).flat)  \nprint(len(YYMMDDHH))\n\n\n# saving variables\ndat=pd.DataFrame({'Latitude':LAT,'Longitude':LON,'YYYYMMDDHH':YYMMDDHH,'CMAQ12KM_O3(ppb)':cmaq_O3,'CMAQ12KM_NO2(ppb)':cmaq_NO2,'CMAQ12KM_CO(ppm)':cmaq_CO,'CMAQ_EC(ug/m3)':cmaq_PM25_EC,'CMAQ_OC(ug/m3)':cmaq_PM25_CO,'CO(moles/s)':CO_emi,'NO2(moles/s)':NO2_emi,'PRSFC(Pa)':PRSFC,'PBL(m)':PBL,'TEMP2(K)':TEMP2,'WSPD10(m/s)':WSPD10,'WDIR10(degree)':WDIR10,'WSTAR(m/s)':WSTAR,'RGRND(W/m2)':RGRND,'RN(cm)':RN,'RC(cm)':RC,'CFRAC':CFRAC})\nprint(dat.head())\ndat.to_csv(home+'/cmaq/test_data.csv',index=False)\n\n",
  "history_output" : "20220417\n20220416\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n5622240\n    Latitude   Longitude  YYYYMMDDHH  ...  RN(cm)  RC(cm)  CFRAC\n0  21.829086 -120.620789  2022041712  ...     0.0     0.0    0.0\n1  21.855751 -120.512497  2022041712  ...     0.0     0.0    0.0\n2  21.882309 -120.404144  2022041712  ...     0.0     0.0    0.0\n3  21.908745 -120.295715  2022041712  ...     0.0     0.0    0.0\n4  21.935051 -120.187225  2022041712  ...     0.0     0.0    0.0\n\n[5 rows x 20 columns]\n",
  "history_begin_time" : 1650214699608,
  "history_end_time" : 1650215096720,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "ufba03m0aa4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660189690459,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "wvvzf43644r",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660294477707,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "p06mnua52xw",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660295756104,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "qdhf4ch6l4a",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660777307068,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "2eoaury9olq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660786975144,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "kxp4juko0j8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660853992779,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "xd7siv54q02",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1660854222326,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},]
