[{
  "history_id" : "kcwdf4y26k4",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1725175814263,
  "history_end_time" : 1725175814327,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0y4qhpechex",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1725134503913,
  "history_end_time" : 1725134510311,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "WTs8KIlavwcf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1725114766992,
  "history_end_time" : 1725114780441,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "y48bofanfvf",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1725089412867,
  "history_end_time" : 1725089412928,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "36blrcyjwqy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1725004059742,
  "history_end_time" : 1725004073030,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1wi1nh6glc7",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724916612028,
  "history_end_time" : 1724916612089,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "18kk0d33nuz",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724830214000,
  "history_end_time" : 1724830214066,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "vss730maf6r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1724745348079,
  "history_end_time" : 1724745366605,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1pb86ha9etj",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724484611521,
  "history_end_time" : 1724484611586,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "iaqrsevp031",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724398214231,
  "history_end_time" : 1724398214307,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "vypishvee5g",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724311812044,
  "history_end_time" : 1724311812107,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "sa0vc9diqdz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1724232261726,
  "history_end_time" : 1724232273097,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "16b00ascy37",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1724225413292,
  "history_end_time" : 1724225413362,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "2hz6tacanyg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1724139869141,
  "history_end_time" : 1724139879024,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "reir5uetsme",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1724053466101,
  "history_end_time" : 1724053472656,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zj9mgrnpwrt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723966508393,
  "history_end_time" : 1723966513150,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p2gvbln1sm7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723959191095,
  "history_end_time" : 1723959199992,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7yhnzka8v7m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723949471609,
  "history_end_time" : 1723949480094,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t4ggyz3lfzq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723891977516,
  "history_end_time" : 1723891985414,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vdw42grq0n9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723803751909,
  "history_end_time" : 1723803760467,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "70svujiuny7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723718001219,
  "history_end_time" : 1723718010915,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "air5qp4mfpr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723656850444,
  "history_end_time" : 1723656861524,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mj42fy4sywe",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723570488203,
  "history_end_time" : 1723570503598,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qs0a04v7xs9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723459239202,
  "history_end_time" : 1723459256116,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "c6yeokuh3zl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723362972886,
  "history_end_time" : 1723362988237,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4o4d09ri0id",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723276899773,
  "history_end_time" : 1723276906217,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "Pay3XJ9unz2M",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723213759732,
  "history_end_time" : 1723213764728,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Qc36WJsWMs2u",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723195233324,
  "history_end_time" : 1723195238428,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1jroe539cg5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723189922740,
  "history_end_time" : 1723189928490,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "97iCZF2z1PPZ",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723184623436,
  "history_end_time" : 1723184629596,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ib9l2jkstyy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723147246178,
  "history_end_time" : 1723147253330,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "eqpwla2m2Hjq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723108795527,
  "history_end_time" : 1723108799915,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TLMXub21bR3J",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723108636764,
  "history_end_time" : 1723108640954,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sA6lmocqh7sn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723107465014,
  "history_end_time" : 1723107474035,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "wl48z1l53nn",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1723102213449,
  "history_end_time" : 1723102213514,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "o30CmusmbkJE",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723101034821,
  "history_end_time" : 1723101039281,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nStQc2W3hl7Z",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1723097117079,
  "history_end_time" : 1723097129995,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "k0gy1ng3bqd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722629436152,
  "history_end_time" : 1722629444274,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "in5o5pt92jl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722586117145,
  "history_end_time" : 1722586125367,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sy5s914t8sr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722547823809,
  "history_end_time" : 1722547835001,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7g8m4lgfz52",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722499419247,
  "history_end_time" : 1722499430764,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3aaw1sgr1si",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722455748900,
  "history_end_time" : 1722455756024,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9yer90rj5ea",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722413862893,
  "history_end_time" : 1722413868258,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t4a1418d9gv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722369433494,
  "history_end_time" : 1722369439814,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "w7gn9p7qonb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722327176706,
  "history_end_time" : 1722327182978,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rmdkl81czlt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722283119574,
  "history_end_time" : 1722283125574,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "be6lwygg3r3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722240822167,
  "history_end_time" : 1722240831689,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ir2ynp2s9di",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722196770599,
  "history_end_time" : 1722196781035,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vqkorwidqet",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722154379380,
  "history_end_time" : 1722154390006,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qisvp2img9m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722110317712,
  "history_end_time" : 1722110327471,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "36k4xkmru23",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722068133367,
  "history_end_time" : 1722068143316,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jboa4son9ug",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1722023930290,
  "history_end_time" : 1722023940003,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rq8mjlfq5nb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721981714468,
  "history_end_time" : 1721981724059,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g9lhrowc7xl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721961336931,
  "history_end_time" : 1721961348159,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o6avxk50159",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721895287201,
  "history_end_time" : 1721895295590,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6iwj178i9ra",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721851027682,
  "history_end_time" : 1721851035504,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q11kdl6h1hx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721808912599,
  "history_end_time" : 1721808920470,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "epqwaq3z82l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721764603449,
  "history_end_time" : 1721764613759,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bdjiaqcwcwq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721722469097,
  "history_end_time" : 1721722476431,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ighiix7fe5l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721678300478,
  "history_end_time" : 1721678308777,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u63949t5f4t",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721636018778,
  "history_end_time" : 1721636027840,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rahffkgy7dr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721591878190,
  "history_end_time" : 1721591886682,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gi5pcqcdbxw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721549645129,
  "history_end_time" : 1721549653782,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u9hdvfo737s",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721506802775,
  "history_end_time" : 1721506815493,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ublpkjns2s4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721377266932,
  "history_end_time" : 1721377278013,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xylazaibspb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721333086582,
  "history_end_time" : 1721333098293,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x8rfjhw221p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721290528124,
  "history_end_time" : 1721290539294,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "i88wfez3g2m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721275022270,
  "history_end_time" : 1721275034361,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vcthi3wc3lg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721159563026,
  "history_end_time" : 1721159571118,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yhp29nowrb5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721117740078,
  "history_end_time" : 1721117748166,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e5nalv8jene",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721073733348,
  "history_end_time" : 1721073738959,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "novlodwepdz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721030987523,
  "history_end_time" : 1721030992697,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hNQlbp1UhXaJ",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1721010809132,
  "history_end_time" : 1721010814432,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "S476ytK9ANtJ",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/scratch/sma8/forecast/mcip/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_evaluation_charts.py\", line 70, in <module>\n    do_it()\n  File \"plot_evaluation_charts.py\", line 28, in do_it\n    cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 933, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1217, in _make_engine\n    self.handles = get_handle(  # type: ignore[call-overload]\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/common.py\", line 789, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: '/scratch/sma8/forecast/mcip/12km/alleva_12km_o3_fore.txt'\n",
  "history_begin_time" : 1721010731956,
  "history_end_time" : 1721010733120,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "fkUybvF4KWPP",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720991755980,
  "history_end_time" : 1720991761218,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mk1wxlggdnz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720985567475,
  "history_end_time" : 1720985572696,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "62hl8mcyt4a",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720942474561,
  "history_end_time" : 1720942481034,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ghuytco2osv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720899167891,
  "history_end_time" : 1720899173856,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b2vx3p2ht7g",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720856068750,
  "history_end_time" : 1720856074704,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "avxb5i689ao",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720812768769,
  "history_end_time" : 1720812776299,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g1xg28av112",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720769669223,
  "history_end_time" : 1720769678492,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sbm5aqbsq3l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720726381936,
  "history_end_time" : 1720726391516,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "m93hthgewwg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720683272632,
  "history_end_time" : 1720683282784,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9esq1tezz51",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720639983167,
  "history_end_time" : 1720639995635,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "brumhbae4rl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720596870144,
  "history_end_time" : 1720596874598,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jgPFHZuLcQXn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720587985523,
  "history_end_time" : 1720587990915,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "to6g6uvf1zb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720555290348,
  "history_end_time" : 1720555297247,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gws6kud193q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720512251420,
  "history_end_time" : 1720512256616,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vkkmge1ycfx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720469490810,
  "history_end_time" : 1720469496286,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ywrjn14t8yf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720424398162,
  "history_end_time" : 1720424404141,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t506kbb2wjq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720381065465,
  "history_end_time" : 1720381070592,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tf6eytf72ds",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720338060312,
  "history_end_time" : 1720338065182,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0mp5qjgc1mb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720294873831,
  "history_end_time" : 1720294879496,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ckw1f26veu5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720251624296,
  "history_end_time" : 1720251629550,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gdkcvopiqc5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720208368891,
  "history_end_time" : 1720208377291,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1gfl28y7646",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720165213496,
  "history_end_time" : 1720165219885,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6ud14nviptl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720122017664,
  "history_end_time" : 1720122025319,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "z5c1r32ielj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720078828013,
  "history_end_time" : 1720078833538,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dg9h40bjzhw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1720035625866,
  "history_end_time" : 1720035632864,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v8kukjp95op",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719992405464,
  "history_end_time" : 1719992411895,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ymsiisbopqe",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719949244686,
  "history_end_time" : 1719949251672,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u9vukzi95nc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719906024478,
  "history_end_time" : 1719906037388,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "korbeqap36d",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719862625848,
  "history_end_time" : 1719862631431,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6o54zbcbl9r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719819312809,
  "history_end_time" : 1719819318267,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cem2jhi6wsa",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719775991088,
  "history_end_time" : 1719775996067,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6kwrswis8vk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719733019866,
  "history_end_time" : 1719733025918,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dchfzx1ye4j",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719689780294,
  "history_end_time" : 1719689785539,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ji6sqme2yqf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719646683214,
  "history_end_time" : 1719646692138,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "97o2yyd3z98",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719603511847,
  "history_end_time" : 1719603521060,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cixdgad5aja",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719560327564,
  "history_end_time" : 1719560338404,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2j3lsamlh8f",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719517097011,
  "history_end_time" : 1719517103318,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "06g5a4zvepn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719474011236,
  "history_end_time" : 1719474016424,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "36zp08n84p9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719430842916,
  "history_end_time" : 1719430851716,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5j9z1ne8fpp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719387489611,
  "history_end_time" : 1719387497727,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zzka1kwp57o",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719344287398,
  "history_end_time" : 1719344294914,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6fw3oa3zgiy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719301100313,
  "history_end_time" : 1719301108124,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cb7z44cpv4y",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719257898063,
  "history_end_time" : 1719257904698,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v4q1xgt1rol",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719214740077,
  "history_end_time" : 1719214746111,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nsa8tb1ew1u",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719171563047,
  "history_end_time" : 1719171568353,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wvt0boedq2t",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719128480203,
  "history_end_time" : 1719128487906,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bssl4hycl8y",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719085214865,
  "history_end_time" : 1719085220513,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "eg20mapik1y",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1719042015350,
  "history_end_time" : 1719042022894,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lkuhk5rozd5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718998797120,
  "history_end_time" : 1718998802618,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x6xtktynyyd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718955617288,
  "history_end_time" : 1718955623675,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rygt82775j6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718912434926,
  "history_end_time" : 1718912445014,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x691h11jpye",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718869214693,
  "history_end_time" : 1718869225891,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ez17vacal1y",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718826268554,
  "history_end_time" : 1718826279331,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "51ujxllgehw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718782815313,
  "history_end_time" : 1718782826504,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "76hzo794y0v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718739677284,
  "history_end_time" : 1718739689265,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g456h1gntw8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718696389524,
  "history_end_time" : 1718696403036,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gr4g4t6n23r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718653209102,
  "history_end_time" : 1718653223374,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e20pncxej71",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1718221249657,
  "history_end_time" : 1718221267209,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "r7m3qj5s4ix",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1717573270337,
  "history_end_time" : 1717573278680,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0iyi0pmf9eb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1717314572092,
  "history_end_time" : 1717314579545,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bw8bdvro9u1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1717276371427,
  "history_end_time" : 1717276378187,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0ww70byqqpe",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716623682842,
  "history_end_time" : 1716623695612,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xkkjm6mdjum",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716579818456,
  "history_end_time" : 1716579830315,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fy5p9e5myvq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716537402446,
  "history_end_time" : 1716537409772,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "phy0e7rd0tz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716493396330,
  "history_end_time" : 1716493403157,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6z2hmcrxzqk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716451201094,
  "history_end_time" : 1716451209522,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ia5snfh2vvk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716407041061,
  "history_end_time" : 1716407050760,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zi6blcd8j8n",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716364858138,
  "history_end_time" : 1716364869787,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "c743sn6csvm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716320697231,
  "history_end_time" : 1716320710708,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sd84ynhm3ii",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1716284988589,
  "history_end_time" : 1716285003625,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1ainbrh9dsz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715542695199,
  "history_end_time" : 1715542731458,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g7sbpt930by",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715499664384,
  "history_end_time" : 1715499669680,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qggxig55k0r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715456216853,
  "history_end_time" : 1715456223150,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g4chceqm1lv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715413323926,
  "history_end_time" : 1715413329756,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "loaretgcaq9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715370168564,
  "history_end_time" : 1715370174530,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k5yt9zbadys",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715326922392,
  "history_end_time" : 1715326928214,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xxdtm10lftj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715283733212,
  "history_end_time" : 1715283741328,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "m6jme6110mk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715240518236,
  "history_end_time" : 1715240536768,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xjhd0xvwuoc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715197405453,
  "history_end_time" : 1715197422400,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qxy2zsbg6q9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1715024600406,
  "history_end_time" : 1715024609765,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2n79283kl2u",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714982207821,
  "history_end_time" : 1714982217978,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xfa0z3vjj8t",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714938610508,
  "history_end_time" : 1714938617810,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x787w14oczz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714895696740,
  "history_end_time" : 1714895705106,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3lznhovwkx7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714852208784,
  "history_end_time" : 1714852216440,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9guhpcctpms",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714765482941,
  "history_end_time" : 1714765490821,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bbf1ofm6b6p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714724064134,
  "history_end_time" : 1714724073244,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "m9px7h3dnm9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714679108023,
  "history_end_time" : 1714679118212,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zl46zafbfja",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714636794634,
  "history_end_time" : 1714636801892,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "00bl5k1xmel",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714593020054,
  "history_end_time" : 1714593026047,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "c59ph8qud99",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714549917744,
  "history_end_time" : 1714549923837,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o6vykeoe5m0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714506096805,
  "history_end_time" : 1714506102651,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4pjs8a24std",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714463999617,
  "history_end_time" : 1714464005352,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9hpj3so850z",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714419738992,
  "history_end_time" : 1714419745586,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5k7kqkajg2q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714377335475,
  "history_end_time" : 1714377340402,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rlp7l7z7l13",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714333187427,
  "history_end_time" : 1714333192691,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jw17wbngh9l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714291092743,
  "history_end_time" : 1714291098774,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "578wsoti2pk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714248772828,
  "history_end_time" : 1714248778713,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nn51pvsbmbg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714213252249,
  "history_end_time" : 1714213259845,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o183vf7waew",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714197588316,
  "history_end_time" : 1714197600825,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p2m5mumkokx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714160503196,
  "history_end_time" : 1714160511979,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9ga3ds02zrq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714117301505,
  "history_end_time" : 1714117306517,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mqvs7ti2fy0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714093961984,
  "history_end_time" : 1714093966890,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s43lyjhumd6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714093783468,
  "history_end_time" : 1714093790580,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "75evs9odqro",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714023906817,
  "history_end_time" : 1714023914937,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hpzebneo8a2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714023625146,
  "history_end_time" : 1714023633269,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3mdh8cjt9rp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714022699394,
  "history_end_time" : 1714022707710,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jiokbbcyxbb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714022698630,
  "history_end_time" : 1714022707102,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "d3c1tk8bin0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714022690173,
  "history_end_time" : 1714022694774,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7nm7a49tkbu",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1714022688985,
  "history_end_time" : 1714022694950,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8nzqbavbzfs",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713901250368,
  "history_end_time" : 1713901256026,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y3t9z5e2fc9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713858052287,
  "history_end_time" : 1713858057684,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t1x3fmw71pf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713832054872,
  "history_end_time" : 1713832060768,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0cbv6wenixx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713783796899,
  "history_end_time" : 1713783802393,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "52cq5c3232v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713730968555,
  "history_end_time" : 1713730973665,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gki6seysoh3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713685293513,
  "history_end_time" : 1713685298360,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3dapyoeopsr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713641673167,
  "history_end_time" : 1713641678032,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5dn8u8mxe1x",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713598890027,
  "history_end_time" : 1713598896630,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tikco9gc4y0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713555710080,
  "history_end_time" : 1713555717930,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "332zoscm0s5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713512511860,
  "history_end_time" : 1713512518478,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2echsf3mqfl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713469325898,
  "history_end_time" : 1713469332589,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t69q908xbn7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713426054990,
  "history_end_time" : 1713426060194,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ct0zop3jep9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713382660241,
  "history_end_time" : 1713382665634,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "40mrixo4lyp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713339454521,
  "history_end_time" : 1713339459360,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fd3spqdwna4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713296259869,
  "history_end_time" : 1713296265377,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ztngdu208nd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713253072039,
  "history_end_time" : 1713253079954,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yt4ns7ohuep",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713210006601,
  "history_end_time" : 1713210012368,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "syg0q5chdm4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713166711440,
  "history_end_time" : 1713166716436,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nkeek66hm3c",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713123270451,
  "history_end_time" : 1713123275486,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q8hw53ue3vy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713080403730,
  "history_end_time" : 1713080408661,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mb1jzcnxrld",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1713037009639,
  "history_end_time" : 1713037014690,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ym2kziushoo",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712994099718,
  "history_end_time" : 1712994105478,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vn0bqrvq2zc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712950882532,
  "history_end_time" : 1712950888275,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9x8tci8bf1q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712907669566,
  "history_end_time" : 1712907676938,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "glz365fm4qn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712864544098,
  "history_end_time" : 1712864550776,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fnv8k70ynyj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712821262141,
  "history_end_time" : 1712821269071,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7ccgjeo2qjw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712777948083,
  "history_end_time" : 1712777954417,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4f31l680snz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712734785776,
  "history_end_time" : 1712734791561,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jvsfoe7yy31",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712691674412,
  "history_end_time" : 1712691680516,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zhdztu5aem3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712648487200,
  "history_end_time" : 1712648493814,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1amaux8pqbn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712605397371,
  "history_end_time" : 1712605405568,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "igskaulnlip",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712562000406,
  "history_end_time" : 1712562007607,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "poqdzx5v6yz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712518574663,
  "history_end_time" : 1712518579486,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wc9u0nbqqrj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712475667066,
  "history_end_time" : 1712475674494,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v5rmf5xgoix",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712432377499,
  "history_end_time" : 1712432382532,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b3r22tc6kjk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712389302236,
  "history_end_time" : 1712389310446,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fr35favc3mb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712346051730,
  "history_end_time" : 1712346059852,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1t7jxc42jch",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712302914631,
  "history_end_time" : 1712302925963,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u1964ujcij2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712259660117,
  "history_end_time" : 1712259668763,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mh8e6r1qbes",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712216517321,
  "history_end_time" : 1712216525603,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dsn9p3zyj9o",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712173299086,
  "history_end_time" : 1712173308764,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ooecmnmhgd3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712130127979,
  "history_end_time" : 1712130138383,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4u9eitkg3x7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712086881206,
  "history_end_time" : 1712086893260,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u4ul5oeca9h",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712043670071,
  "history_end_time" : 1712043681645,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vk3phcrh42r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1712000288845,
  "history_end_time" : 1712000294472,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bjow93jgufl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711957103151,
  "history_end_time" : 1711957107873,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jd0hs54en3k",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711913883675,
  "history_end_time" : 1711913889868,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "78sjvrz7gfy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711870753821,
  "history_end_time" : 1711870758467,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1kzp4oe7d4o",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711827382369,
  "history_end_time" : 1711827388401,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lb00us0ksl1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711784331984,
  "history_end_time" : 1711784336610,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b6gcl8wek72",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711741196382,
  "history_end_time" : 1711741201719,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l1xbd86neot",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711698135379,
  "history_end_time" : 1711698140114,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3ay1ogufu75",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711654876428,
  "history_end_time" : 1711654882178,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "41xyr3pobag",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711611667202,
  "history_end_time" : 1711611673188,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0p1glul2zfp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711568554273,
  "history_end_time" : 1711568561595,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wsn0x5vhn8c",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711525296886,
  "history_end_time" : 1711525303379,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9fkvomiye9v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711482159152,
  "history_end_time" : 1711482165570,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o1w1ulh3b52",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711438891550,
  "history_end_time" : 1711438896908,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dbep49aev60",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711395703444,
  "history_end_time" : 1711395709904,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v18xcjs4nha",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711352491833,
  "history_end_time" : 1711352498118,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qgtamaqxcdj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711309283684,
  "history_end_time" : 1711309290648,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "efu1668c8cl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711266081287,
  "history_end_time" : 1711266089313,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "soazosgp0sc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711222898031,
  "history_end_time" : 1711222907174,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zkxc692ino8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711179644457,
  "history_end_time" : 1711179658243,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ohrj7nzmfay",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1711137004071,
  "history_end_time" : 1711137016708,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y4d1q5z1agt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710403082150,
  "history_end_time" : 1710403088831,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rh5zc69jwdx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710361233503,
  "history_end_time" : 1710361239182,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k1yd6bzenwq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710317833635,
  "history_end_time" : 1710317838971,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6g39dffebuu",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710277688508,
  "history_end_time" : 1710277694433,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hucbea8ni78",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710232096387,
  "history_end_time" : 1710232102497,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gugxfvw7qz1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710188221263,
  "history_end_time" : 1710188228778,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tes6s4c4d0q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710145182560,
  "history_end_time" : 1710145189822,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lg06wqnib49",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710105072529,
  "history_end_time" : 1710105082290,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nykmygf066x",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710061356161,
  "history_end_time" : 1710061362557,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "srmht72aanx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1710061174894,
  "history_end_time" : 1710061188775,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hdlremi8m63",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709650568566,
  "history_end_time" : 1709650573838,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y6umxpv39e3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709584987699,
  "history_end_time" : 1709584993019,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nhy3sjocra1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709542280464,
  "history_end_time" : 1709542285721,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kwxup7bfy1m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709498326474,
  "history_end_time" : 1709498331615,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hwnjywi8u7p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709456042260,
  "history_end_time" : 1709456047279,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zf62cj98na9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709413022685,
  "history_end_time" : 1709413028624,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6zwyb8zobnx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709325931385,
  "history_end_time" : 1709325938194,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q3kf5xayhuq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709283353363,
  "history_end_time" : 1709283359527,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "igf6f5rui3k",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709239523329,
  "history_end_time" : 1709239530206,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yk6hjixap7v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709196868755,
  "history_end_time" : 1709196875119,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vgkdtzm7yzv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709153123643,
  "history_end_time" : 1709153130296,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4ulh87pmpmz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709110474348,
  "history_end_time" : 1709110485125,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6n392hx7owz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709067119540,
  "history_end_time" : 1709067125980,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e7pq0otp5g9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1709024099643,
  "history_end_time" : 1709024105489,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sq21okshutw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708981725621,
  "history_end_time" : 1708981734886,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4ih3ifopeoh",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708937795607,
  "history_end_time" : 1708937806841,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p1r1zaspp2e",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708893648113,
  "history_end_time" : 1708893653507,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "divfkwg264l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708850523212,
  "history_end_time" : 1708850527994,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1vtp7k1uetf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708807462437,
  "history_end_time" : 1708807468882,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "h0zpyoyi0fi",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708765924576,
  "history_end_time" : 1708765929509,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tccpjaxmdoi",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708505973172,
  "history_end_time" : 1708505978619,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4uoyfc7sf10",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708461875397,
  "history_end_time" : 1708461882012,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "i67hfsh9gng",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708419496484,
  "history_end_time" : 1708419501526,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zfr1i9sropz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708375325595,
  "history_end_time" : 1708375331169,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "puylyimpnn0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708332904714,
  "history_end_time" : 1708332910874,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zeqwnqwo7c2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708289079477,
  "history_end_time" : 1708289085758,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "m93j1z4ps0r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708246519938,
  "history_end_time" : 1708246525823,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lfqtcmoohvx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708202720861,
  "history_end_time" : 1708202728325,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nym8pfslwru",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1708162223174,
  "history_end_time" : 1708162237098,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7s5kd0uy5yu",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707900589175,
  "history_end_time" : 1707900598157,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vgfnbdkijoj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707857096262,
  "history_end_time" : 1707857106090,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nmt92yfq7wy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707814966685,
  "history_end_time" : 1707814972850,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4px6qqajnvx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707772641127,
  "history_end_time" : 1707772646836,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jliz1ntupyl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707727573921,
  "history_end_time" : 1707727578720,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "50jgxbuokxp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707683873190,
  "history_end_time" : 1707683880069,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hlm0h8gz3fn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707641144379,
  "history_end_time" : 1707641149515,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zie472kcgjz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707597616850,
  "history_end_time" : 1707597623383,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "i1of7q5zr4g",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707555321833,
  "history_end_time" : 1707555330895,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "05o7m0dnx9p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707469410117,
  "history_end_time" : 1707469422949,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zmp5jm41p3s",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707425158359,
  "history_end_time" : 1707425167121,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "57it50s3e2c",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707382712250,
  "history_end_time" : 1707382718166,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "piisuwdg3lv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707338726472,
  "history_end_time" : 1707338733836,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8cw3zizt7z8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707296143404,
  "history_end_time" : 1707296148463,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "abhx6aq4j02",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707252358789,
  "history_end_time" : 1707252365792,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y3hxv8oslyi",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707209938325,
  "history_end_time" : 1707209943101,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9pblgh6buna",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707165894024,
  "history_end_time" : 1707165900399,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "007mpgs2h0q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707123231138,
  "history_end_time" : 1707123235680,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1hquw74myvw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707079294013,
  "history_end_time" : 1707079299601,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dhbs8ntyqya",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1707036967537,
  "history_end_time" : 1707036974830,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cqa0olbaopc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706993082096,
  "history_end_time" : 1706993090516,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b7qvsvdzjl0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706950736128,
  "history_end_time" : 1706950743092,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pc5epfuwwxq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706906740998,
  "history_end_time" : 1706906755606,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "81u45hrox51",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706864443045,
  "history_end_time" : 1706864449590,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6sq1jli33l8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706820750161,
  "history_end_time" : 1706820757056,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7nh2wqxjb00",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706777670405,
  "history_end_time" : 1706777676441,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qs55afyhmpp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706733863550,
  "history_end_time" : 1706733870551,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ba54519kokg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706691733909,
  "history_end_time" : 1706691738316,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qlcd6bbszz1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706647424233,
  "history_end_time" : 1706647429570,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qty2vbx21iz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706605186348,
  "history_end_time" : 1706605191159,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9sej8eprajp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706561097676,
  "history_end_time" : 1706561103402,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "abizpj195wv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706519107756,
  "history_end_time" : 1706519112489,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lrw7fov0aqe",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706474737183,
  "history_end_time" : 1706474743782,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xkzps9gw4ib",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706432672587,
  "history_end_time" : 1706432682257,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hwuf8e927bw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706388309714,
  "history_end_time" : 1706388314964,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9whzjr36duz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706346208375,
  "history_end_time" : 1706346212838,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xvsiptlegae",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706301877663,
  "history_end_time" : 1706301884100,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y14ilq63d3a",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706259726452,
  "history_end_time" : 1706259732957,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "c7h53cigdcg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706216439563,
  "history_end_time" : 1706216444582,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v1czzs1pu2l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706129052049,
  "history_end_time" : 1706129059802,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6kknviwikxa",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706086501334,
  "history_end_time" : 1706086505932,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6b3vnd239ih",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1706042831202,
  "history_end_time" : 1706042837401,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "353u67ghxkm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705999814965,
  "history_end_time" : 1705999819722,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qv88dml7o77",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705956071086,
  "history_end_time" : 1705956079669,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0mpd95frmp2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705913716532,
  "history_end_time" : 1705913721497,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7mh927zqzsb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705869324074,
  "history_end_time" : 1705869328859,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "iaa09prra05",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705827068028,
  "history_end_time" : 1705827077460,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "km9w5wsty8h",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705784635678,
  "history_end_time" : 1705784640238,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wwz96h3fp5k",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705697684908,
  "history_end_time" : 1705697696120,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "71ubikbqqtc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705610918943,
  "history_end_time" : 1705610923562,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fu91wbcp22q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705524605186,
  "history_end_time" : 1705524609834,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vss4w02llbp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705438388031,
  "history_end_time" : 1705438392683,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ubri0etrxpq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705352356444,
  "history_end_time" : 1705352361200,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lxtmdl2ynly",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705265684070,
  "history_end_time" : 1705265689091,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "59s51w57uru",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705179887034,
  "history_end_time" : 1705179893008,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7au35vcohk5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705092185662,
  "history_end_time" : 1705092191606,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s3wnclyxijx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1705005542890,
  "history_end_time" : 1705005551670,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zpmj0nndcgy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704790214676,
  "history_end_time" : 1704790219520,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l2a9ep6pp7a",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704746715382,
  "history_end_time" : 1704746720438,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fkp940cx0ly",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704702887595,
  "history_end_time" : 1704702891705,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2sekbz5hpcj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704659896699,
  "history_end_time" : 1704659901259,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rq80d8z93ip",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704617261683,
  "history_end_time" : 1704617267327,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8jrw96od1lz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704573568953,
  "history_end_time" : 1704573574568,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vvvwg6ssuap",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704530494866,
  "history_end_time" : 1704530500741,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ylf4wmrcj35",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704487232513,
  "history_end_time" : 1704487238296,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hsuniapec1p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704444978104,
  "history_end_time" : 1704444983669,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s41z87wkkqb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704401099781,
  "history_end_time" : 1704401106541,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hhl0h1iuiuw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704358782432,
  "history_end_time" : 1704358787521,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y0rli055pca",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704314674595,
  "history_end_time" : 1704314680449,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gg5acvr75xw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704272424832,
  "history_end_time" : 1704272430342,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "m7mhnk5ay2x",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704228315710,
  "history_end_time" : 1704228322566,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lt04vr1tg54",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704185485733,
  "history_end_time" : 1704185489963,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jdvqns6axn4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704141450823,
  "history_end_time" : 1704141455562,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3bogq16r579",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704099226609,
  "history_end_time" : 1704099231240,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bkncixrkwx1",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704055062562,
  "history_end_time" : 1704055067163,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "24oj6j9dxbv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1704013009127,
  "history_end_time" : 1704013013602,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "snpslf98lbm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703968560592,
  "history_end_time" : 1703968565262,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "762k1td4co3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703926622486,
  "history_end_time" : 1703926626973,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0tykb8hglnp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703882314345,
  "history_end_time" : 1703882318970,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hwde4hu7znr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703840216676,
  "history_end_time" : 1703840221418,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fdd4d60sjhj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703796085973,
  "history_end_time" : 1703796091566,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cr14anzrr8h",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703753891083,
  "history_end_time" : 1703753897843,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jw5tgz3ruf8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703709750253,
  "history_end_time" : 1703709755187,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6vm5xqvgi1o",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703667138735,
  "history_end_time" : 1703667144620,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8alov0vg9h9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703623088365,
  "history_end_time" : 1703623092873,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3w4yaoqo1dj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703580689586,
  "history_end_time" : 1703580694282,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "37hbta14qwo",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703536848577,
  "history_end_time" : 1703536853291,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nvc61k6wibg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703494556753,
  "history_end_time" : 1703494562037,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3sl5qvold2n",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703451109029,
  "history_end_time" : 1703451113757,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xqcjn785y1q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703409034161,
  "history_end_time" : 1703409039109,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4cthxo7s6r7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703364107544,
  "history_end_time" : 1703364112038,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0qe97mnvrvk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703320890591,
  "history_end_time" : 1703320897972,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zem8i58jy22",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703277308029,
  "history_end_time" : 1703277313402,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "f442zsfntgc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703235402971,
  "history_end_time" : 1703235408774,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0ja8kvswv8p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703191907594,
  "history_end_time" : 1703191913442,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tkgxu4vcjtp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703148147742,
  "history_end_time" : 1703148152384,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6lqzfo08yco",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703104962216,
  "history_end_time" : 1703104968067,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "n8fnqah13yj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703062086219,
  "history_end_time" : 1703062091057,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lsk2duj9iib",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1703018537869,
  "history_end_time" : 1703018542910,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4p5r4m54kma",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702980741015,
  "history_end_time" : 1702980745652,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2g0fzg57hxd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702932262315,
  "history_end_time" : 1702932266919,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "znz22kg5l9v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702889995107,
  "history_end_time" : 1702890000337,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ans7r006agi",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702845797290,
  "history_end_time" : 1702845802127,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vu8hyrhmucf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702803636122,
  "history_end_time" : 1702803642836,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e8bj7yy8iaw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702759466531,
  "history_end_time" : 1702759471721,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "adw5im14j77",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702716945241,
  "history_end_time" : 1702716952095,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b7cuwrlgpa6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702672985234,
  "history_end_time" : 1702672991289,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ig1902m8y4p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702630557987,
  "history_end_time" : 1702630564082,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "99okkk6chjn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702586679373,
  "history_end_time" : 1702586685245,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "oldkfw0adkt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702544178146,
  "history_end_time" : 1702544183908,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u0cr6fw4u86",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702500841397,
  "history_end_time" : 1702500845976,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kfybt7z79ja",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702458537569,
  "history_end_time" : 1702458542624,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tyxqjf2miik",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702414049639,
  "history_end_time" : 1702414054384,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "arw7f03k2ff",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702370949935,
  "history_end_time" : 1702370955623,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kbpytohu6uk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702327428056,
  "history_end_time" : 1702327433830,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9tzx9hq2gz5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702284130697,
  "history_end_time" : 1702284136372,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ebk5o9bn264",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702240611351,
  "history_end_time" : 1702240615905,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "07e4jfu1k1a",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702198220233,
  "history_end_time" : 1702198226722,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vr6b8md47jw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702154914987,
  "history_end_time" : 1702154921614,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3fuzygdm3xr",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1702110614025,
  "history_end_time" : 1702110614087,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ungwtegbwd2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702068285617,
  "history_end_time" : 1702068290577,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "plxhquq6id0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1702025868941,
  "history_end_time" : 1702025874777,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "r44lkgr6jsm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701981922818,
  "history_end_time" : 1701981928426,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cfi9s4qwkwc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701939617571,
  "history_end_time" : 1701939623083,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "r9u24uwroi3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701895583811,
  "history_end_time" : 1701895588649,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vtos1d27dfu",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701853285508,
  "history_end_time" : 1701853290446,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v3vap2b3c4h",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701809064802,
  "history_end_time" : 1701809070001,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dwnckbe9yq3",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701766971016,
  "history_end_time" : 1701766976658,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xx2p1hybur8",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701722552469,
  "history_end_time" : 1701722557150,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1fjapb0yh8l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701680207067,
  "history_end_time" : 1701680211513,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sbx70v2b2ka",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701635809541,
  "history_end_time" : 1701635814580,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t181kqn1v5d",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701593686782,
  "history_end_time" : 1701593692119,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0g2cwknuraw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701549398457,
  "history_end_time" : 1701549402883,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "annnoa9fm8l",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701507271784,
  "history_end_time" : 1701507277413,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0sjtuu7udej",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701465100177,
  "history_end_time" : 1701465104539,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "h9hv1uomunz",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1701419415123,
  "history_end_time" : 1701419415195,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "hktmufnt6kk",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1701376213770,
  "history_end_time" : 1701376213833,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "9uchv58x4tk",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1701333013954,
  "history_end_time" : 1701333014032,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "61bifpfasvw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701290669158,
  "history_end_time" : 1701290675728,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ljrhbiqc1r4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701248275469,
  "history_end_time" : 1701248280613,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5tio6c1vwur",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701204572660,
  "history_end_time" : 1701204579391,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "thxbh8k51mq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701161264302,
  "history_end_time" : 1701161268907,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "os1waovyqxf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701117816444,
  "history_end_time" : 1701117822182,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gqziw1s6d2y",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701075392432,
  "history_end_time" : 1701075396741,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5sjquz3noc2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1701031309833,
  "history_end_time" : 1701031315581,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p7ar3e0a0sl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700988784388,
  "history_end_time" : 1700988789324,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5l3mp3rbghc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700944513598,
  "history_end_time" : 1700944518048,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kvgpo0b10p5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700902335719,
  "history_end_time" : 1700902343224,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "h0g1ut2dkba",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700858113939,
  "history_end_time" : 1700858118412,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "94k6245cdms",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700816220885,
  "history_end_time" : 1700816226822,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5456n08mras",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700771723657,
  "history_end_time" : 1700771728276,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ogva4v9hb4e",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700729639098,
  "history_end_time" : 1700729644086,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "63832dbifzk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700685331270,
  "history_end_time" : 1700685335567,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "aux1f7ek4wg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700643504952,
  "history_end_time" : 1700643512286,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8uzokz2qdcz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700599834919,
  "history_end_time" : 1700599839691,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "248ttl0xwot",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700556756785,
  "history_end_time" : 1700556760853,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dy6gzcm443f",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700512876088,
  "history_end_time" : 1700512880704,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2srtldgq4fm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700469678228,
  "history_end_time" : 1700469682819,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4a5k6db879a",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700426159016,
  "history_end_time" : 1700426163751,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s367phx9mcw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700383748464,
  "history_end_time" : 1700383753302,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jezgwogr14p",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700339829585,
  "history_end_time" : 1700339835068,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "han6ih7lzsz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700297900047,
  "history_end_time" : 1700297907460,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nia7flqeyl9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700253768184,
  "history_end_time" : 1700253774619,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2mektoxadyo",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700211475126,
  "history_end_time" : 1700211481290,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lj2hpd4y1iq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700167366003,
  "history_end_time" : 1700167373853,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fdr4c0f7zu7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700125157934,
  "history_end_time" : 1700125164855,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q2rptm820mt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700080933630,
  "history_end_time" : 1700080942001,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pitcg10g943",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1700038651609,
  "history_end_time" : 1700038659054,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xl9h29iiybd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699994652115,
  "history_end_time" : 1699994657900,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xkbk60qe1pl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699952302501,
  "history_end_time" : 1699952309230,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "07zf6x6r2wx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699932202928,
  "history_end_time" : 1699932213147,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l4sujmrjt17",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699865860463,
  "history_end_time" : 1699865866262,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dco4cnb0bte",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699822373506,
  "history_end_time" : 1699822379485,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dmz1xam982r",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699779477891,
  "history_end_time" : 1699779483579,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hr2uyk7oclf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699735522519,
  "history_end_time" : 1699735528525,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "znoddtnawqx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699692892664,
  "history_end_time" : 1699692898700,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jehllhvzttz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699651550066,
  "history_end_time" : 1699651558752,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qclcgy5e2hk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699606027880,
  "history_end_time" : 1699606034627,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "he4i7dp1ycy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699562574321,
  "history_end_time" : 1699562581575,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "w2r1uox8vnx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699519803018,
  "history_end_time" : 1699519811643,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l1rnolb2eqk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699476264468,
  "history_end_time" : 1699476272136,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nho7u1yc87m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699434021840,
  "history_end_time" : 1699434030679,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "017w6d1tayq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699389931883,
  "history_end_time" : 1699389939172,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bt1bgsbp0ok",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699347662626,
  "history_end_time" : 1699347675409,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wsskdvtvv7b",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699303512655,
  "history_end_time" : 1699303520584,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gi4tqzpfjzf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699266294419,
  "history_end_time" : 1699266303087,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7sxd4h978wp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699266126147,
  "history_end_time" : 1699266136328,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "d6wurmfzaop",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699174924674,
  "history_end_time" : 1699174931626,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cbv1u2tmbqa",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699127055979,
  "history_end_time" : 1699127065419,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vwgsubmtgv9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699084999698,
  "history_end_time" : 1699085007545,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5ghjrhhfde9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1699040767447,
  "history_end_time" : 1699040781084,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7uk1blkq5oc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698998683474,
  "history_end_time" : 1698998690789,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jq06v1x8d91",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698954244155,
  "history_end_time" : 1698954252615,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0wue8scid0x",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698912089778,
  "history_end_time" : 1698912098927,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ipjp47wsdz2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698867843974,
  "history_end_time" : 1698867853127,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jpstrdnx39j",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698825671590,
  "history_end_time" : 1698825677574,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "w4i8tonc10v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698781514201,
  "history_end_time" : 1698781520194,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "80wf3g4unju",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698739584383,
  "history_end_time" : 1698739590536,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v1zdvcl8s2d",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698695406408,
  "history_end_time" : 1698695414189,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9kugynx6yhs",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698653264193,
  "history_end_time" : 1698653275288,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mm1xerxat7b",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698608754493,
  "history_end_time" : 1698608759883,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4y7bjtksu35",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698565846993,
  "history_end_time" : 1698565854776,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "on9ish2rsce",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698522324930,
  "history_end_time" : 1698522331131,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "laj964pt1qw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698479857112,
  "history_end_time" : 1698479862102,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hm9j1icy59g",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698436237732,
  "history_end_time" : 1698436243224,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o5kr56gdcdz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698392910813,
  "history_end_time" : 1698392915966,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "j53s4v2zh84",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698349380393,
  "history_end_time" : 1698349386483,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u3c134rjlet",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698307090954,
  "history_end_time" : 1698307098604,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tsn22ohbbtb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698264173273,
  "history_end_time" : 1698264181415,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hpxqg4ahxy7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698220563338,
  "history_end_time" : 1698220572517,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ao4vq49vucr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698177132830,
  "history_end_time" : 1698177138882,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "07ff7i857at",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698133750151,
  "history_end_time" : 1698133755775,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cipb57vjy9k",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698090751957,
  "history_end_time" : 1698090757403,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "470tv0ykwk9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698047483794,
  "history_end_time" : 1698047488590,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ze65singzyi",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1698003692335,
  "history_end_time" : 1698003697269,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7wcc4qeuwv0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697960995261,
  "history_end_time" : 1697960999788,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "am7y0pdv55v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697917350531,
  "history_end_time" : 1697917357944,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wjmt9hg77ap",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697874871240,
  "history_end_time" : 1697874877729,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kyhsj1qa2c2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697830976427,
  "history_end_time" : 1697830983654,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tba1veewnuk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697788890603,
  "history_end_time" : 1697788895271,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dn8czcur5us",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697744690285,
  "history_end_time" : 1697744696191,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "f04ifstqte0",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697702284830,
  "history_end_time" : 1697702289996,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "krltwf55tlk",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697658140958,
  "history_end_time" : 1697658146845,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ncbtxrjauzt",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697615765848,
  "history_end_time" : 1697615772883,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qysdvd11fmw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697571285218,
  "history_end_time" : 1697571293285,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pm3vno9fvld",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697529747763,
  "history_end_time" : 1697529754220,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8s3j3h5igjr",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697485702080,
  "history_end_time" : 1697485707841,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e2swxmf2d19",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697442568243,
  "history_end_time" : 1697442573308,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gg5il66kres",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697398924843,
  "history_end_time" : 1697398929556,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "a11kum0v35n",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697356214768,
  "history_end_time" : 1697356219931,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "53hzuyc3oma",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697312720796,
  "history_end_time" : 1697312725542,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4igx906mfs6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697270348791,
  "history_end_time" : 1697270356594,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wytn1azhndc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697226268718,
  "history_end_time" : 1697226274927,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "diy34wi3z8n",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697183915828,
  "history_end_time" : 1697183923803,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "39qyupt6ctg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697139924606,
  "history_end_time" : 1697139932427,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tqk0g7b6kq7",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697097562324,
  "history_end_time" : 1697097572417,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "iorn0priejo",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697053552091,
  "history_end_time" : 1697053559062,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vcb98zfeq95",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1697011194872,
  "history_end_time" : 1697011204844,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9hyy1mkqvnc",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696967495087,
  "history_end_time" : 1696967502445,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "d1xaoyymxns",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696924161869,
  "history_end_time" : 1696924166491,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2k81dr3ykm2",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696881048501,
  "history_end_time" : 1696881053612,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "06ilf10ruao",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696837740405,
  "history_end_time" : 1696837748048,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k3a9eq3wdlv",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696794594817,
  "history_end_time" : 1696794599331,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "uq4b8stb2sl",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696767526443,
  "history_end_time" : 1696767531608,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "a3ur4w87ue6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696707751048,
  "history_end_time" : 1696707756227,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "n02ikti133m",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696665618216,
  "history_end_time" : 1696665622436,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "szn4ce1p928",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696621458661,
  "history_end_time" : 1696621463828,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8aodh72s1rd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696579485092,
  "history_end_time" : 1696579492056,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "z4fu4ml22pb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696535555231,
  "history_end_time" : 1696535561725,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wncp4zyp48g",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696492348469,
  "history_end_time" : 1696492356593,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2t1yh9qtuqj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696448712711,
  "history_end_time" : 1696448720449,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9yjoawqfwyd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696406535561,
  "history_end_time" : 1696406542475,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bgr4d0mlsjg",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696362277338,
  "history_end_time" : 1696362285233,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nv6z8vvxnuy",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696320094645,
  "history_end_time" : 1696320101528,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lvuvl2tim11",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696276179296,
  "history_end_time" : 1696276183832,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dj7ium1bg9v",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696233013993,
  "history_end_time" : 1696233019383,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s10eqbxox3q",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696190499592,
  "history_end_time" : 1696190506109,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tmrl95jmext",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696148219565,
  "history_end_time" : 1696148225721,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bs4ex78bpvz",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696104097954,
  "history_end_time" : 1696104104258,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "npelfo3atw5",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696062049272,
  "history_end_time" : 1696062058704,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l7mjuq74epp",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1696017730584,
  "history_end_time" : 1696017738168,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l60jm8lbv23",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695931322523,
  "history_end_time" : 1695931332390,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3deyun5s6r6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695887996946,
  "history_end_time" : 1695888003055,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "i2fkzwsbibn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695843768384,
  "history_end_time" : 1695843773606,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zsmpharsgx9",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695801634690,
  "history_end_time" : 1695801639198,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cpuvzrfdomm",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695757569456,
  "history_end_time" : 1695757573780,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "a931d63mvcb",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695715570368,
  "history_end_time" : 1695715576871,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fqsn0cvuzux",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695671585487,
  "history_end_time" : 1695671593449,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vei9p32coni",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695628099934,
  "history_end_time" : 1695628109134,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "n6reoi4i4tn",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695584460974,
  "history_end_time" : 1695584468903,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zq1d8y7rjkf",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695541871402,
  "history_end_time" : 1695541878540,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nqkb3rpx1cw",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695498245736,
  "history_end_time" : 1695498252915,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7cnx9brfyl6",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695455893300,
  "history_end_time" : 1695455898572,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t6zstu3lqzj",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1695411017415,
  "history_end_time" : 1695411017475,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "aedmqlotuyq",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695370233419,
  "history_end_time" : 1695370241825,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "16adwewp6ri",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695326158482,
  "history_end_time" : 1695326167996,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "maibzauycp4",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695284399504,
  "history_end_time" : 1695284416801,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v53ey77b7dj",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695242562609,
  "history_end_time" : 1695242567396,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5fxmzfrafga",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695154336854,
  "history_end_time" : 1695154346041,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cv7lscawl7i",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695110139170,
  "history_end_time" : 1695110145493,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "24cvu28xk95",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695023532690,
  "history_end_time" : 1695023539756,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "WoSWDEU1l1qW",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef do_it():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  cmaq_df_clipped.loc[cmaq_df_clipped['AH'] < 0, 'AH'] = 0\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \n  print(\"all done\")\n  \ndo_it()\n",
  "history_output" : "Plot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\nall done\n",
  "history_begin_time" : 1695017014675,
  "history_end_time" : 1695017019061,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "i6uSBYilHS3G",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='AI', color='green')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ', color='blue')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\n",
  "history_begin_time" : 1695014972762,
  "history_end_time" : 1695014977077,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "RHCU0NJP82zd",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef draw_charts(column_name, ai_df_sorted, cmaq_df_clipped):\n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted[column_name], label='CMAQ AI', color='blue')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped[column_name], label='CMAQ Physics', color='green')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel(column_name)\n  plt.title(f'CMAQ AI Metrics - {column_name}')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plot_png_path = f'/groups/ESS3/zsun/cmaq/ai_results/evaluation/{column_name}_plot.png'\n  plt.savefig(plot_png_path)\n  print(f\"Plot saved to {plot_png_path}\")\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  \n  for column_name in column_names:\n    if column_name != \"DATE\":\n      draw_charts(column_name, ai_df_sorted, cmaq_df_clipped)\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NSITES_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_OBS_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AVG_MOD_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/RMSE_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/CORR_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NMB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/NME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/MB_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/ME_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AH_plot.png\nPlot saved to /groups/ESS3/zsun/cmaq/ai_results/evaluation/AFAR_plot.png\n",
  "history_begin_time" : 1695014553236,
  "history_end_time" : 1695014557652,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "33mllGZG5Sor",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  \n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(ai_df_sorted['DATE'], ai_df_sorted['RMSE'], label='CMAQ AI', color='blue')\n  plt.plot(cmaq_df_clipped['DATE'], cmaq_df_clipped['RMSE'], label='CMAQ Physics', color='green')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel('RMSE')\n  plt.title('CMAQ AI Metrics - RMSE')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plt.savefig('rmse_plot.png')\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695014361858,
  "history_end_time" : 1695014363877,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "D0dd2FuihRYx",
  "history_input" : "import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  \n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(dataframe1['DATE'], dataframe1['RMSE'], label='Dataframe 1', color='blue')\n  plt.plot(dataframe2['DATE'], dataframe2['RMSE'], label='Dataframe 2', color='green')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel('RMSE')\n  plt.title('RMSE Over Time')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plt.savefig('rmse_plot.png')\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nTraceback (most recent call last):\n  File \"plot_evaluation_charts.py\", line 64, in <module>\n    plot()\n  File \"plot_evaluation_charts.py\", line 50, in plot\n    plt.plot(dataframe1['DATE'], dataframe1['RMSE'], label='Dataframe 1', color='blue')\nNameError: name 'dataframe1' is not defined\n",
  "history_begin_time" : 1695014266744,
  "history_end_time" : 1695014268776,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "am4Fc0haLPyh",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n  \n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  min_date = ai_df_sorted['DATE'].min()\n  cmaq_df_clipped = cmaq_df_sorted[cmaq_df_sorted['DATE'] >= min_date]\n  \n  # Plot the RMSE values\n  plt.figure(figsize=(12, 6))\n  plt.plot(dataframe1['DATE'], dataframe1['RMSE'], label='Dataframe 1', color='blue')\n  plt.plot(dataframe2['DATE'], dataframe2['RMSE'], label='Dataframe 2', color='green')\n\n  # Customize the plot\n  plt.xlabel('Date')\n  plt.ylabel('RMSE')\n  plt.title('RMSE Over Time')\n  plt.legend()\n\n  # Save the plot as a PNG file\n  plt.grid(True)\n  plt.tight_layout()\n  plt.savefig('rmse_plot.png')\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nTraceback (most recent call last):\n  File \"plot_evaluation_charts.py\", line 63, in <module>\n    plot()\n  File \"plot_evaluation_charts.py\", line 48, in plot\n    plt.figure(figsize=(12, 6))\nNameError: name 'plt' is not defined\n",
  "history_begin_time" : 1695014243260,
  "history_end_time" : 1695014244515,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "1y5KfYoM7dIA",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  \n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n0    20221121     442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124     459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813     719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317     740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629     718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...     ...        ...  ...       ...        ...        ...\n312  20230115     516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207     482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906     687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110     552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202     469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME         AH       AFAR\n263 2022-10-19     641  33.277691  ...  4.302679  85.423729  11.578947\n155 2022-10-20     680  39.914154  ...  5.013285  86.486488   2.576112\n44  2022-10-21     717  45.095013  ...  7.623708  90.032158   1.926445\n247 2022-10-22     609  44.639366  ...  8.207237  95.593872   2.156863\n185 2022-10-23     664  40.823982  ...  6.321457  85.850861   4.264392\n..         ...     ...        ...  ...       ...        ...        ...\n296 2023-09-08     727  42.644085  ...  6.256389  96.261681   8.035714\n215 2023-09-09     677  42.197010  ...  5.489459  97.736626   6.311637\n245 2023-09-10     704  41.537819  ...  5.645339  98.795181   4.280156\n184 2023-09-11     713  40.478962  ...  5.839073  96.347031   4.524887\n152 2023-09-12     674  39.809349  ...  5.791101  93.243240   3.944315\n[317 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695013890526,
  "history_end_time" : 1695013891712,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "BRwhhnST0UsJ",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME', 'MB', 'ME', 'AH', 'AFAR']\n\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, names = column_names, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  \n  \n  ai_df = cmaq_df.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  \n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695013876356,
  "history_end_time" : 1695013877611,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8r1OABmETvlM",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df.columns)\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n  \n  column_names = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  \n  \n  ai_df = cmaq_df.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  \n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "Index(['DATE', 'NSITES', 'AVG_OBS', 'AVG_MOD', 'RMSE', 'CORR', 'NMB', 'NME',\n       'MB', 'ME', 'AH', 'AFAR'],\n      dtype='object')\n         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695013823835,
  "history_end_time" : 1695013825251,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "o1GruPbQsrlL",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df)\n  \n  ai_df = cmaq_df.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]\n  print(ai_df)\n  \n  # Convert the 'DATE' column to a datetime object\n  ai_df['DATE'] = pd.to_datetime(ai_df['DATE'], format='%Y%m%d')\n  cmaq_df['DATE'] = pd.to_datetime(cmaq_df['DATE'], format='%Y%m%d')\n  \n  # Sort the DataFrame by the 'DATE' column\n  ai_df_sorted = ai_df.sort_values(by='DATE')\n  cmaq_df_sorted = cmaq_df.sort_values(by='DATE')\n  print(\"ai_df_sorted=\", ai_df_sorted)\n  print(\"cmaq_df_sorted=\", cmaq_df_sorted)\n  \n  \n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\nai_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\ncmaq_df_sorted=           DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0   2021-12-31     560  27.285715  ...  6.630917 -999.000000    0.000000\n1   2022-01-01     463  30.977592  ...  4.886972 -999.000000    0.000000\n2   2022-01-02     543  33.850368  ...  4.437538 -999.000000    0.000000\n3   2022-01-03     509  33.585953  ...  4.140924 -999.000000    0.000000\n4   2022-01-04     453  33.751930  ...  4.903585 -999.000000    0.000000\n..         ...     ...        ...  ...       ...         ...         ...\n609 2023-09-08     727  42.644085  ...  7.439396   29.411766   58.333332\n610 2023-09-09     677  42.197010  ...  7.026895   69.230774   47.058823\n611 2023-09-10     704  41.537819  ...  7.748453   14.285715   91.666672\n612 2023-09-11     713  40.478962  ...  7.240509   78.947372   50.000000\n613 2023-09-12     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695013668167,
  "history_end_time" : 1695013669478,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "LgHCNRblTt7t",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  ai_df = pd.concat(dfs, ignore_index=True)\n  \n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt)  # Assuming your data has no header\n  print(cmaq_df)\n  \n  ai_df = cmaq_df.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]\n  print(ai_df)\n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n         DATE  NSITES    AVG_OBS  ...        ME          AH        AFAR\n0    20211231     560  27.285715  ...  6.630917 -999.000000    0.000000\n1    20220101     463  30.977592  ...  4.886972 -999.000000    0.000000\n2    20220102     543  33.850368  ...  4.437538 -999.000000    0.000000\n3    20220103     509  33.585953  ...  4.140924 -999.000000    0.000000\n4    20220104     453  33.751930  ...  4.903585 -999.000000    0.000000\n..        ...     ...        ...  ...       ...         ...         ...\n609  20230908     727  42.644085  ...  7.439396   29.411766   58.333332\n610  20230909     677  42.197010  ...  7.026895   69.230774   47.058823\n611  20230910     704  41.537819  ...  7.748453   14.285715   91.666672\n612  20230911     713  40.478962  ...  7.240509   78.947372   50.000000\n613  20230912     674  39.809349  ...  6.836825    0.000000  100.000000\n[614 rows x 12 columns]\n",
  "history_begin_time" : 1695013438048,
  "history_end_time" : 1695013439412,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "60QnEYSvYlDo",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  final_df = pd.concat(dfs, ignore_index=True)\n  print(final_df)\n  \n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt, header=True)  # Assuming your data has no header\n  print(cmaq_df)\n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "           0    1          2   ...        9          10         11\n0    20221121  442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124  459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813  719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317  740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629  718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...  ...        ...  ...       ...        ...        ...\n312  20230115  516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207  482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906  687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110  552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202  469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\nTraceback (most recent call last):\n  File \"plot_evaluation_charts.py\", line 34, in <module>\n    plot()\n  File \"plot_evaluation_charts.py\", line 30, in plot\n    cmaq_df = pd.read_csv(cmaq_eval_txt, header=True)  # Assuming your data has no header\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 925, in __init__\n    self.options, self.engine = self._clean_options(options, engine)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1118, in _clean_options\n    validate_header_arg(options[\"header\"])\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/common.py\", line 179, in validate_header_arg\n    raise TypeError(\nTypeError: Passing a bool to header is invalid. Use header=None for no header or header=int or list-like of ints to specify the row(s) making up the column names\n",
  "history_begin_time" : 1695013263203,
  "history_end_time" : 1695013264461,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "thN7ZIE0DMpw",
  "history_input" : "import pandas as pd\nimport os\n\n\ndef plot():\n  \n  # read all txt files in the evaluation folder\n  directory_path = '/groups/ESS3/zsun/cmaq/ai_results/evaluation/'\n\n  # Initialize an empty list to store DataFrames.\n  dfs = []\n\n  # Iterate over the files in the directory.\n  for filename in os.listdir(directory_path):\n      if filename.startswith('eval'):  # Adjust the file extension as needed.\n          file_path = os.path.join(directory_path, filename)\n\n          # Read the CSV file into a DataFrame.\n          df = pd.read_csv(file_path, header=None)  # Assuming your data has no header.\n\n          # Append the DataFrame to the list.\n          dfs.append(df)\n\n  # Concatenate all DataFrames into a single DataFrame.\n  final_df = pd.concat(dfs, ignore_index=True)\n  print(final_df)\n  \n  # read the CMAQ evaluation txt\n  cmaq_eval_txt = \"/groups/ESS/share/projects/SWUS3km/graph/12km/alleva_12km_o3_fore.txt\"\n  cmaq_df = pd.read_csv(cmaq_eval_txt, header=None)  # Assuming your data has no header\n  print(cmaq_df)\n  # Now 'final_df' contains the concatenated data from all your files.\n  \nplot()\n",
  "history_output" : "           0    1          2   ...        9          10         11\n0    20221121  442  31.260464  ...  4.540899  61.333336   1.075269\n1    20230124  459  33.146515  ...  3.616699  97.354492  14.418605\n2    20230813  719  39.788769  ...  5.199259  97.580650  10.865561\n3    20230317  740  43.486149  ...  4.119890  99.849854   2.919708\n4    20230629  718  51.172180  ...  8.667747  99.016396   8.345979\n..        ...  ...        ...  ...       ...        ...        ...\n312  20230115  516  35.168606  ...  4.334680  82.333336   4.263566\n313  20221207  482  25.249222  ...  4.645161  76.666664   8.000000\n314  20230906  687  44.869904  ...  5.751273  98.930481   4.310345\n315  20221110  552  34.328350  ...  5.571747  90.209785  11.034483\n316  20230202  469  35.210289  ...  4.731475  87.197235  10.954063\n[317 rows x 12 columns]\n           0       1          2   ...        9            10          11\n0        DATE  NSITES    AVG_OBS  ...        ME           AH        AFAR\n1    20211231     560  27.285715  ...  6.630917  -999.000000    0.000000\n2    20220101     463  30.977592  ...  4.886972  -999.000000    0.000000\n3    20220102     543  33.850368  ...  4.437538  -999.000000    0.000000\n4    20220103     509  33.585953  ...  4.140924  -999.000000    0.000000\n..        ...     ...        ...  ...       ...          ...         ...\n610  20230908     727  42.644085  ...  7.439396    29.411766   58.333332\n611  20230909     677  42.197010  ...  7.026895    69.230774   47.058823\n612  20230910     704  41.537819  ...  7.748453    14.285715   91.666672\n613  20230911     713  40.478962  ...  7.240509    78.947372   50.000000\n614  20230912     674  39.809349  ...  6.836825     0.000000  100.000000\n[615 rows x 12 columns]\n",
  "history_begin_time" : 1695012757468,
  "history_end_time" : 1695012762521,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "e035eywu82q",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1713936031897,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "v39fb9aqfhe",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720498292519,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gkv5qpujvnz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720498294499,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "piktwsjktiv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720502080288,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "38oaizo6i4u",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720576665153,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wpvli4yo4u4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720581915194,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qvvxx7cygqk",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720581925700,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cyd6t8zgs1n",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720582781969,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bql4obu67mz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720587051548,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yhqecl3av1k",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1720991152064,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5s1yhblculg",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1721494066925,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hisk5bsoa5m",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1721494079707,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sa6gcz96elu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1721494099470,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2siaejl5r9c",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1721494124216,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "c7fhw4wcgqj",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143526,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nwxcertxod2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109398960,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gwb2g6szf9y",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723117570556,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s0xe5z3s6z1",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723351870553,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mh4am7kf4rq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1725090403158,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},]
