[{
  "history_id" : "7W8CyVc9IfNz",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed\n#norm = mpl.colors.Normalize(vmin=0,vmax=84)\n#sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=84  )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n\nfor t, tt in zip(time_Airnow, time_):\n    \n    df = dfs[tt]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/Airnow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predction.mp4\", images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/predction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 5837 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 5834 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fd2b950fb40] 255(+1) colors generated out of 303115 colors; ratio=0.000841\n[Parsed_palettegen_2 @ 0x7fd2b950fb40] Duped color: FF469F87\nOutput #0, gif, to '/Users/uhhmed/predction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.3 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00345x    \nframe=    4 fps=1.1 q=-0.0 size=    1792kB time=00:00:00.31 bitrate=47355.0kbits/s speed=0.0891x    \nframe=    7 fps=1.7 q=-0.0 size=    3328kB time=00:00:00.61 bitrate=44693.4kbits/s speed=0.146x    \nframe=   10 fps=2.0 q=-0.0 size=    5120kB time=00:00:00.91 bitrate=46091.3kbits/s speed=0.184x    \nframe=   12 fps=2.2 q=-0.0 size=    6144kB time=00:00:01.11 bitrate=45343.8kbits/s speed=0.203x    \nframe=   14 fps=2.3 q=-0.0 size=    7424kB time=00:00:01.31 bitrate=46425.5kbits/s speed=0.22x    \nframe=   17 fps=2.5 q=-0.0 size=    8960kB time=00:00:01.61 bitrate=45590.3kbits/s speed=0.24x    \nframe=   19 fps=2.6 q=-0.0 size=   10240kB time=00:00:01.81 bitrate=46345.9kbits/s speed=0.249x    \nframe=   21 fps=2.7 q=-0.0 size=   11520kB time=00:00:02.01 bitrate=46951.2kbits/s speed=0.255x    \nframe=   23 fps=2.7 q=-0.0 size=   12800kB time=00:00:02.21 bitrate=47446.9kbits/s speed=0.261x    \nframe=   25 fps=2.8 q=-0.0 size=   14336kB time=00:00:02.41 bitrate=48730.5kbits/s speed=0.266x    \nframe=   27 fps=2.8 q=-0.0 size=   15360kB time=00:00:02.61 bitrate=48210.4kbits/s speed=0.273x    \nframe=   30 fps=2.9 q=-0.0 size=   17152kB time=00:00:02.91 bitrate=48284.9kbits/s speed=0.283x    \nframe=   33 fps=3.0 q=-0.0 size=   18944kB time=00:00:03.21 bitrate=48345.6kbits/s speed=0.291x    \nframe=   35 fps=3.0 q=-0.0 size=   19968kB time=00:00:03.41 bitrate=47970.0kbits/s speed=0.295x    \nframe=   37 fps=3.1 q=-0.0 size=   20992kB time=00:00:03.61 bitrate=47636.1kbits/s speed=0.298x    \nframe=   40 fps=3.1 q=-0.0 size=   22784kB time=00:00:03.91 bitrate=47735.7kbits/s speed=0.304x    \nframe=   42 fps=3.1 q=-0.0 size=   24064kB time=00:00:04.11 bitrate=47964.1kbits/s speed=0.307x    \nframe=   44 fps=3.1 q=-0.0 size=   25088kB time=00:00:04.31 bitrate=47684.7kbits/s speed=0.308x    \nframe=   46 fps=3.2 q=-0.0 size=   26368kB time=00:00:04.51 bitrate=47895.0kbits/s speed=0.309x    \nframe=   47 fps=3.1 q=-0.0 size=   27136kB time=00:00:04.61 bitrate=48220.8kbits/s speed=0.304x    \nframe=   47 fps=3.1 q=-0.0 Lsize=   27897kB time=00:00:04.61 bitrate=49573.1kbits/s speed=0.304x    \nvideo:27897kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000070%\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:02.40, start: 0.000000, bitrate: 6190 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 6186 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fc1cdc233c0] 255(+1) colors generated out of 590476 colors; ratio=0.000432\nOutput #0, gif, to '/Users/uhhmed/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.3 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00335x    \nframe=    4 fps=1.1 q=-0.0 size=    1792kB time=00:00:00.31 bitrate=47355.0kbits/s speed=0.0844x    \nframe=    6 fps=1.4 q=-0.0 size=    3072kB time=00:00:00.51 bitrate=49344.8kbits/s speed=0.119x    \nframe=    8 fps=1.6 q=-0.0 size=    4352kB time=00:00:00.71 bitrate=50213.5kbits/s speed=0.144x    \nframe=   10 fps=1.8 q=-0.0 size=    5632kB time=00:00:00.91 bitrate=50700.4kbits/s speed=0.163x    \nframe=   12 fps=1.9 q=-0.0 size=    6656kB time=00:00:01.11 bitrate=49122.5kbits/s speed=0.179x    \nframe=   14 fps=2.1 q=-0.0 size=    7936kB time=00:00:01.31 bitrate=49627.3kbits/s speed=0.192x    \nframe=   16 fps=2.2 q=-0.0 size=    9216kB time=00:00:01.51 bitrate=49998.3kbits/s speed=0.203x    \nframe=   18 fps=2.2 q=-0.0 size=   10496kB time=00:00:01.71 bitrate=50282.6kbits/s speed=0.211x    \nframe=   20 fps=2.3 q=-0.0 size=   11776kB time=00:00:01.91 bitrate=50507.3kbits/s speed=0.217x    \nframe=   22 fps=2.3 q=-0.0 size=   13056kB time=00:00:02.11 bitrate=50689.5kbits/s speed=0.222x    \nframe=   23 fps=2.2 q=-0.0 size=   13568kB time=00:00:02.21 bitrate=50293.7kbits/s speed=0.215x    \nframe=   23 fps=2.2 q=-0.0 Lsize=   14310kB time=00:00:02.21 bitrate=53044.6kbits/s speed=0.215x    \nvideo:14310kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000136%\n/Users/uhhmed/prediction_maps/CMAQ_2022052600.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052601.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052602.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052603.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052604.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052605.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052606.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052607.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052608.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052609.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052610.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052611.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052612.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052613.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052614.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052615.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052616.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052617.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052618.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052619.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052620.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052621.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052622.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052623.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052700.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052701.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052702.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052703.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052704.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052705.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052706.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052707.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052708.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052709.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052710.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052711.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052712.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052713.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052714.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052715.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052716.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052717.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052718.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052719.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052720.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052721.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052722.tif\n/Users/uhhmed/prediction_maps/CMAQ_2022052723.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103000.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103001.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103002.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103003.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103004.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103005.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103006.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103007.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103008.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103009.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103010.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103011.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103012.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103013.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103014.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103015.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103016.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103017.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103018.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103019.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103020.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103021.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103022.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103023.tif\n",
  "history_begin_time" : 1654499369177,
  "history_end_time" : 1654500477348,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "47RvlUvfVjZS",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed\n#norm = mpl.colors.Normalize(vmin=0,vmax=84)\n#sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=84  )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n\nfor t, tt in zip(time_Airnow, time_):\n    \n    df = dfs[tt]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/Airnow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predction.mp4\", images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1654212954144,
  "history_end_time" : 1654216098799,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "BhtQi2TOdl8E",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n#norm = mpl.colors.Normalize(vmin=0,vmax=84)\n#sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\n#for t in time_:\n    \n#    df = dfs[t]\n    \n#    gdf = gpd.GeoDataFrame(\n#        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n#    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n#    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n#         cmap=cmap, vmin=0,vmax=84  )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n#    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n#    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n#    plt.title(plotTitle, fontdict={'fontsize': 35})\n#    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n\nfor t, tt in zip(time_Airnow, time_):\n    \n    df = dfs[tt]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/Airnow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predction.mp4\", images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/predction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:07.10, start: 0.000000, bitrate: 6546 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 6544 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7f7a80205c80] 255(+1) colors generated out of 599016 colors; ratio=0.000426\nOutput #0, gif, to '/Users/uhhmed/predction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00238x    \nframe=    5 fps=1.0 q=-0.0 size=    2048kB time=00:00:00.41 bitrate=40920.0kbits/s speed=0.0834x    \nframe=    8 fps=1.4 q=-0.0 size=    3584kB time=00:00:00.71 bitrate=41352.3kbits/s speed=0.128x    \nframe=   11 fps=1.8 q=-0.0 size=    5120kB time=00:00:01.01 bitrate=41527.8kbits/s speed=0.163x    \nframe=   14 fps=2.0 q=-0.0 size=    6656kB time=00:00:01.31 bitrate=41622.9kbits/s speed=0.191x    \nframe=   17 fps=2.3 q=-0.0 size=    8448kB time=00:00:01.61 bitrate=42985.1kbits/s speed=0.214x    \nframe=   20 fps=2.4 q=-0.0 size=    9984kB time=00:00:01.91 bitrate=42821.4kbits/s speed=0.231x    \nframe=   22 fps=2.5 q=-0.0 size=   11008kB time=00:00:02.11 bitrate=42738.2kbits/s speed=0.24x    \nframe=   24 fps=2.6 q=-0.0 size=   12032kB time=00:00:02.31 bitrate=42669.3kbits/s speed=0.247x    \nframe=   27 fps=2.7 q=-0.0 size=   13824kB time=00:00:02.61 bitrate=43389.4kbits/s speed=0.259x    \nframe=   30 fps=2.8 q=-0.0 size=   15360kB time=00:00:02.91 bitrate=43240.2kbits/s speed=0.27x    \nframe=   33 fps=2.9 q=-0.0 size=   16896kB time=00:00:03.21 bitrate=43119.0kbits/s speed=0.28x    \nframe=   36 fps=3.0 q=-0.0 size=   18432kB time=00:00:03.51 bitrate=43018.5kbits/s speed=0.289x    \nframe=   39 fps=3.0 q=-0.0 size=   20224kB time=00:00:03.81 bitrate=43484.3kbits/s speed=0.297x    \nframe=   42 fps=3.1 q=-0.0 size=   21760kB time=00:00:04.11 bitrate=43371.8kbits/s speed=0.304x    \nframe=   44 fps=3.1 q=-0.0 size=   22784kB time=00:00:04.31 bitrate=43305.5kbits/s speed=0.306x    \nframe=   46 fps=3.1 q=-0.0 size=   23808kB time=00:00:04.51 bitrate=43245.0kbits/s speed=0.308x    \nframe=   48 fps=3.2 q=-0.0 size=   25088kB time=00:00:04.71 bitrate=43635.0kbits/s speed=0.311x    \nframe=   50 fps=3.2 q=-0.0 size=   26368kB time=00:00:04.91 bitrate=43993.2kbits/s speed=0.313x    \nframe=   52 fps=3.2 q=-0.0 size=   27392kB time=00:00:05.11 bitrate=43913.0kbits/s speed=0.314x    \nframe=   54 fps=3.2 q=-0.0 size=   28672kB time=00:00:05.31 bitrate=44233.7kbits/s speed=0.316x    \nframe=   56 fps=3.2 q=-0.0 size=   29952kB time=00:00:05.51 bitrate=44531.2kbits/s speed=0.317x    \nframe=   58 fps=3.2 q=-0.0 size=   30976kB time=00:00:05.71 bitrate=44440.5kbits/s speed=0.319x    \nframe=   60 fps=3.2 q=-0.0 size=   32256kB time=00:00:05.91 bitrate=44710.9kbits/s speed=0.32x    \nframe=   62 fps=3.3 q=-0.0 size=   33280kB time=00:00:06.11 bitrate=44620.3kbits/s speed=0.321x    \nframe=   64 fps=3.3 q=-0.0 size=   34560kB time=00:00:06.31 bitrate=44867.8kbits/s speed=0.322x    \nframe=   66 fps=3.3 q=-0.0 size=   35584kB time=00:00:06.51 bitrate=44777.9kbits/s speed=0.323x    \nframe=   68 fps=3.3 q=-0.0 size=   36864kB time=00:00:06.71 bitrate=45005.9kbits/s speed=0.323x    \nframe=   70 fps=3.3 q=-0.0 size=   38144kB time=00:00:06.91 bitrate=45220.8kbits/s speed=0.323x    \nframe=   70 fps=3.2 q=-0.0 Lsize=   38783kB time=00:00:06.91 bitrate=45978.9kbits/s speed=0.318x    \nvideo:38783kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000050%\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:02.40, start: 0.000000, bitrate: 6689 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 6685 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7faeb470f940] 255(+1) colors generated out of 530330 colors; ratio=0.000481\nOutput #0, gif, to '/Users/uhhmed/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.4 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00386x    \nframe=    4 fps=1.2 q=-0.0 size=    1792kB time=00:00:00.31 bitrate=47355.0kbits/s speed=0.0968x    \nframe=    6 fps=1.6 q=-0.0 size=    2816kB time=00:00:00.51 bitrate=45232.7kbits/s speed=0.136x    \nframe=    8 fps=1.9 q=-0.0 size=    4096kB time=00:00:00.71 bitrate=47259.8kbits/s speed=0.166x    \nframe=   10 fps=2.1 q=-0.0 size=    5120kB time=00:00:00.91 bitrate=46091.3kbits/s speed=0.189x    \nframe=   12 fps=2.2 q=-0.0 size=    6400kB time=00:00:01.11 bitrate=47233.2kbits/s speed=0.207x    \nframe=   14 fps=2.4 q=-0.0 size=    7424kB time=00:00:01.31 bitrate=46425.5kbits/s speed=0.222x    \nframe=   16 fps=2.5 q=-0.0 size=    8448kB time=00:00:01.51 bitrate=45831.8kbits/s speed=0.235x    \nframe=   18 fps=2.6 q=-0.0 size=    9728kB time=00:00:01.71 bitrate=46603.4kbits/s speed=0.245x    \nframe=   20 fps=2.6 q=-0.0 size=   10752kB time=00:00:01.91 bitrate=46115.4kbits/s speed=0.252x    \nframe=   22 fps=2.7 q=-0.0 size=   12032kB time=00:00:02.11 bitrate=46713.8kbits/s speed=0.256x    \nframe=   23 fps=2.6 q=-0.0 size=   12800kB time=00:00:02.21 bitrate=47446.9kbits/s speed=0.248x    \nframe=   23 fps=2.6 q=-0.0 Lsize=   13413kB time=00:00:02.21 bitrate=49720.9kbits/s speed=0.248x    \nvideo:13413kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000146%\n/Users/uhhmed/prediction_maps/2022052600.tif\n/Users/uhhmed/prediction_maps/2022052601.tif\n/Users/uhhmed/prediction_maps/2022052602.tif\n/Users/uhhmed/prediction_maps/2022052603.tif\n/Users/uhhmed/prediction_maps/2022052604.tif\n/Users/uhhmed/prediction_maps/2022052605.tif\n/Users/uhhmed/prediction_maps/2022052606.tif\n/Users/uhhmed/prediction_maps/2022052607.tif\n/Users/uhhmed/prediction_maps/2022052608.tif\n/Users/uhhmed/prediction_maps/2022052609.tif\n/Users/uhhmed/prediction_maps/2022052610.tif\n/Users/uhhmed/prediction_maps/2022052611.tif\n/Users/uhhmed/prediction_maps/2022052612.tif\n/Users/uhhmed/prediction_maps/2022052613.tif\n/Users/uhhmed/prediction_maps/2022052614.tif\n/Users/uhhmed/prediction_maps/2022052615.tif\n/Users/uhhmed/prediction_maps/2022052616.tif\n/Users/uhhmed/prediction_maps/2022052617.tif\n/Users/uhhmed/prediction_maps/2022052618.tif\n/Users/uhhmed/prediction_maps/2022052619.tif\n/Users/uhhmed/prediction_maps/2022052620.tif\n/Users/uhhmed/prediction_maps/2022052621.tif\n/Users/uhhmed/prediction_maps/2022052622.tif\n/Users/uhhmed/prediction_maps/2022052623.tif\n/Users/uhhmed/prediction_maps/2022052700.tif\n/Users/uhhmed/prediction_maps/2022052701.tif\n/Users/uhhmed/prediction_maps/2022052702.tif\n/Users/uhhmed/prediction_maps/2022052703.tif\n/Users/uhhmed/prediction_maps/2022052704.tif\n/Users/uhhmed/prediction_maps/2022052705.tif\n/Users/uhhmed/prediction_maps/2022052706.tif\n/Users/uhhmed/prediction_maps/2022052707.tif\n/Users/uhhmed/prediction_maps/2022052708.tif\n/Users/uhhmed/prediction_maps/2022052709.tif\n/Users/uhhmed/prediction_maps/2022052710.tif\n/Users/uhhmed/prediction_maps/2022052711.tif\n/Users/uhhmed/prediction_maps/2022052713.tif\n/Users/uhhmed/prediction_maps/2022052714.tif\n/Users/uhhmed/prediction_maps/2022052715.tif\n/Users/uhhmed/prediction_maps/2022052716.tif\n/Users/uhhmed/prediction_maps/2022052717.tif\n/Users/uhhmed/prediction_maps/2022052718.tif\n/Users/uhhmed/prediction_maps/2022052719.tif\n/Users/uhhmed/prediction_maps/2022052720.tif\n/Users/uhhmed/prediction_maps/2022052721.tif\n/Users/uhhmed/prediction_maps/2022052722.tif\n/Users/uhhmed/prediction_maps/2022052723.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103000.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103001.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103002.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103003.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103004.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103005.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103006.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103007.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103008.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103009.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103010.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103011.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103012.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103013.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103014.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103015.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103016.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103017.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103018.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103019.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103020.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103021.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103022.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103023.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103000.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103001.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103002.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103003.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103004.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103005.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103006.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103007.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103008.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103009.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103010.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103011.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103012.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103013.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103014.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103015.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103016.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103017.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103018.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103019.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103020.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103021.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103022.tif\n/Users/uhhmed/prediction_maps/Airnow_2021103023.tif\n",
  "history_begin_time" : 1654210334989,
  "history_end_time" : 1654210742813,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Liwqm0qUC519",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n#norm = mpl.colors.Normalize(vmin=0,vmax=84)\n#sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=84  )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n\nfor t, tt in zip(time_Airnow, time_):\n    \n    df = dfs[tt]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(AirnowObs, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/Airnow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predction.mp4\", images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nTraceback (most recent call last):\n  File \"gen_images.py\", line 87, in <module>\n    gdfAirnow = gpd.GeoDataFrame(AirnowObs, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/geodataframe.py\", line 184, in __init__\n    self.set_geometry(geometry, inplace=True)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/geodataframe.py\", line 320, in set_geometry\n    frame[geo_column_name] = level\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/geodataframe.py\", line 1351, in __setitem__\n    super().__setitem__(key, value)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3655, in __setitem__\n    self._set_item(key, value)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3832, in _set_item\n    value = self._sanitize_column(value)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 4535, in _sanitize_column\n    com.require_length_match(value, self.index)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/common.py\", line 557, in require_length_match\n    raise ValueError(\nValueError: Length of values (1208) does not match length of index (29581)\n",
  "history_begin_time" : 1654206180157,
  "history_end_time" : 1654206924285,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ATlSWQtyQsZw",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n    \n\n    # Add individual AirNow stations in US with color representation.\n\n    gdfAirnow = gpd.GeoDataFrame(\n    AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude,AirnowObs.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow = gdfAirnow.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual CMAQ: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:09.60, start: 0.000000, bitrate: 9012 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 9010 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fd5bcd12680] 255(+1) colors generated out of 923334 colors; ratio=0.000276\nOutput #0, gif, to '/Users/uhhmed/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.1 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00106x    \nframe=    3 fps=0.3 q=-0.0 size=    1536kB time=00:00:00.21 bitrate=59918.6kbits/s speed=0.021x    \nframe=    5 fps=0.5 q=-0.0 size=    3072kB time=00:00:00.41 bitrate=61380.1kbits/s speed=0.0377x    \nframe=    7 fps=0.6 q=-0.0 size=    4864kB time=00:00:00.61 bitrate=65321.1kbits/s speed=0.0521x    \nframe=    9 fps=0.7 q=-0.0 size=    6400kB time=00:00:00.81 bitrate=64726.9kbits/s speed=0.0646x    \nframe=   11 fps=0.8 q=-0.0 size=    8192kB time=00:00:01.01 bitrate=66444.4kbits/s speed=0.0755x    \nframe=   13 fps=0.9 q=-0.0 size=    9728kB time=00:00:01.21 bitrate=65861.0kbits/s speed=0.0851x    \nframe=   15 fps=1.0 q=-0.0 size=   11520kB time=00:00:01.41 bitrate=66930.4kbits/s speed=0.0936x    \nframe=   17 fps=1.1 q=-0.0 size=   13056kB time=00:00:01.61 bitrate=66431.5kbits/s speed=0.101x    \nframe=   19 fps=1.1 q=-0.0 size=   14848kB time=00:00:01.81 bitrate=67201.6kbits/s speed=0.109x    \nframe=   21 fps=1.2 q=-0.0 size=   16384kB time=00:00:02.01 bitrate=66775.0kbits/s speed=0.115x    \nframe=   23 fps=1.3 q=-0.0 size=   17920kB time=00:00:02.21 bitrate=66425.6kbits/s speed=0.122x    \nframe=   25 fps=1.3 q=-0.0 size=   19200kB time=00:00:02.41 bitrate=65264.1kbits/s speed=0.127x    \nframe=   27 fps=1.4 q=-0.0 size=   20992kB time=00:00:02.61 bitrate=65887.5kbits/s speed=0.132x    \nframe=   29 fps=1.4 q=-0.0 size=   22528kB time=00:00:02.81 bitrate=65675.9kbits/s speed=0.137x    \nframe=   31 fps=1.5 q=-0.0 size=   24320kB time=00:00:03.01 bitrate=66189.2kbits/s speed=0.141x    \nframe=   33 fps=1.5 q=-0.0 size=   25856kB time=00:00:03.21 bitrate=65985.2kbits/s speed=0.145x    \nframe=   35 fps=1.5 q=-0.0 size=   27648kB time=00:00:03.41 bitrate=66420.1kbits/s speed=0.149x    \nframe=   37 fps=1.6 q=-0.0 size=   29184kB time=00:00:03.61 bitrate=66225.9kbits/s speed=0.152x    \nframe=   39 fps=1.6 q=-0.0 size=   30720kB time=00:00:03.81 bitrate=66052.0kbits/s speed=0.155x    \nframe=   41 fps=1.6 q=-0.0 size=   32512kB time=00:00:04.01 bitrate=66418.5kbits/s speed=0.158x    \nframe=   43 fps=1.6 q=-0.0 size=   34048kB time=00:00:04.21 bitrate=66252.1kbits/s speed=0.161x    \nframe=   45 fps=1.7 q=-0.0 size=   35584kB time=00:00:04.41 bitrate=66100.7kbits/s speed=0.164x    \nframe=   47 fps=1.7 q=-0.0 size=   37120kB time=00:00:04.61 bitrate=65962.5kbits/s speed=0.166x    \nframe=   49 fps=1.7 q=-0.0 size=   38656kB time=00:00:04.81 bitrate=65835.7kbits/s speed=0.169x    \nframe=   51 fps=1.8 q=-0.0 size=   39936kB time=00:00:05.01 bitrate=65300.5kbits/s speed=0.172x    \nframe=   53 fps=1.8 q=-0.0 size=   41472kB time=00:00:05.21 bitrate=65208.9kbits/s speed=0.175x    \nframe=   55 fps=1.8 q=-0.0 size=   42752kB time=00:00:05.41 bitrate=64736.5kbits/s speed=0.177x    \nframe=   57 fps=1.8 q=-0.0 size=   44032kB time=00:00:05.61 bitrate=64297.7kbits/s speed=0.18x    \nframe=   59 fps=1.9 q=-0.0 size=   45056kB time=00:00:05.81 bitrate=63528.2kbits/s speed=0.183x    \nframe=   61 fps=1.9 q=-0.0 size=   46080kB time=00:00:06.01 bitrate=62809.9kbits/s speed=0.186x    \nframe=   63 fps=1.9 q=-0.0 size=   47360kB time=00:00:06.21 bitrate=62475.5kbits/s speed=0.188x    \nframe=   65 fps=1.9 q=-0.0 size=   48640kB time=00:00:06.41 bitrate=62162.1kbits/s speed=0.191x    \nframe=   67 fps=2.0 q=-0.0 size=   49920kB time=00:00:06.61 bitrate=61867.6kbits/s speed=0.192x    \nframe=   69 fps=2.0 q=-0.0 size=   51456kB time=00:00:06.81 bitrate=61898.3kbits/s speed=0.194x    \nframe=   71 fps=2.0 q=-0.0 size=   52736kB time=00:00:07.01 bitrate=61628.1kbits/s speed=0.196x    \nframe=   73 fps=2.0 q=-0.0 size=   54272kB time=00:00:07.21 bitrate=61663.8kbits/s speed=0.198x    \nframe=   75 fps=2.0 q=-0.0 size=   55808kB time=00:00:07.41 bitrate=61697.6kbits/s speed=0.199x    \nframe=   77 fps=2.0 q=-0.0 size=   57344kB time=00:00:07.61 bitrate=61729.6kbits/s speed=0.201x    \nframe=   79 fps=2.0 q=-0.0 size=   58624kB time=00:00:07.81 bitrate=61491.4kbits/s speed=0.202x    \nframe=   81 fps=2.1 q=-0.0 size=   59648kB time=00:00:08.01 bitrate=61003.3kbits/s speed=0.204x    \nframe=   83 fps=2.1 q=-0.0 size=   60672kB time=00:00:08.21 bitrate=60539.0kbits/s speed=0.206x    \nframe=   85 fps=2.1 q=-0.0 size=   61952kB time=00:00:08.41 bitrate=60346.1kbits/s speed=0.208x    \nframe=   87 fps=2.1 q=-0.0 size=   63232kB time=00:00:08.61 bitrate=60162.2kbits/s speed=0.209x    \nframe=   89 fps=2.1 q=-0.0 size=   64512kB time=00:00:08.81 bitrate=59986.6kbits/s speed=0.21x    \nframe=   91 fps=2.1 q=-0.0 size=   65792kB time=00:00:09.01 bitrate=59818.9kbits/s speed=0.212x    \nframe=   93 fps=2.2 q=-0.0 size=   67328kB time=00:00:09.21 bitrate=59886.1kbits/s speed=0.213x    \nframe=   95 fps=2.2 q=-0.0 size=   68864kB time=00:00:09.41 bitrate=59950.5kbits/s speed=0.214x    \nframe=   95 fps=2.1 q=-0.0 Lsize=   69623kB time=00:00:09.41 bitrate=60611.6kbits/s speed=0.212x    \nvideo:69623kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000028%\n/Users/uhhmed/prediction_maps/2022052600.tif\n/Users/uhhmed/prediction_maps/2022052601.tif\n/Users/uhhmed/prediction_maps/2022052602.tif\n/Users/uhhmed/prediction_maps/2022052603.tif\n/Users/uhhmed/prediction_maps/2022052604.tif\n/Users/uhhmed/prediction_maps/2022052605.tif\n/Users/uhhmed/prediction_maps/2022052606.tif\n/Users/uhhmed/prediction_maps/2022052607.tif\n/Users/uhhmed/prediction_maps/2022052608.tif\n/Users/uhhmed/prediction_maps/2022052609.tif\n/Users/uhhmed/prediction_maps/2022052610.tif\n/Users/uhhmed/prediction_maps/2022052611.tif\n/Users/uhhmed/prediction_maps/2022052612.tif\n/Users/uhhmed/prediction_maps/2022052613.tif\n/Users/uhhmed/prediction_maps/2022052614.tif\n/Users/uhhmed/prediction_maps/2022052615.tif\n/Users/uhhmed/prediction_maps/2022052616.tif\n/Users/uhhmed/prediction_maps/2022052617.tif\n/Users/uhhmed/prediction_maps/2022052618.tif\n/Users/uhhmed/prediction_maps/2022052619.tif\n/Users/uhhmed/prediction_maps/2022052620.tif\n/Users/uhhmed/prediction_maps/2022052621.tif\n/Users/uhhmed/prediction_maps/2022052622.tif\n/Users/uhhmed/prediction_maps/2022052623.tif\n/Users/uhhmed/prediction_maps/2022052700.tif\n/Users/uhhmed/prediction_maps/2022052701.tif\n/Users/uhhmed/prediction_maps/2022052702.tif\n/Users/uhhmed/prediction_maps/2022052703.tif\n/Users/uhhmed/prediction_maps/2022052704.tif\n/Users/uhhmed/prediction_maps/2022052705.tif\n/Users/uhhmed/prediction_maps/2022052706.tif\n/Users/uhhmed/prediction_maps/2022052707.tif\n/Users/uhhmed/prediction_maps/2022052708.tif\n/Users/uhhmed/prediction_maps/2022052709.tif\n/Users/uhhmed/prediction_maps/2022052710.tif\n/Users/uhhmed/prediction_maps/2022052711.tif\n/Users/uhhmed/prediction_maps/2022052712.tif\n/Users/uhhmed/prediction_maps/2022052713.tif\n/Users/uhhmed/prediction_maps/2022052714.tif\n/Users/uhhmed/prediction_maps/2022052715.tif\n/Users/uhhmed/prediction_maps/2022052716.tif\n/Users/uhhmed/prediction_maps/2022052717.tif\n/Users/uhhmed/prediction_maps/2022052718.tif\n/Users/uhhmed/prediction_maps/2022052719.tif\n/Users/uhhmed/prediction_maps/2022052720.tif\n/Users/uhhmed/prediction_maps/2022052721.tif\n/Users/uhhmed/prediction_maps/2022052722.tif\n/Users/uhhmed/prediction_maps/2022052723.tif\n/Users/uhhmed/prediction_maps/actual_2022052600.tif\n/Users/uhhmed/prediction_maps/actual_2022052601.tif\n/Users/uhhmed/prediction_maps/actual_2022052602.tif\n/Users/uhhmed/prediction_maps/actual_2022052603.tif\n/Users/uhhmed/prediction_maps/actual_2022052604.tif\n/Users/uhhmed/prediction_maps/actual_2022052605.tif\n/Users/uhhmed/prediction_maps/actual_2022052606.tif\n/Users/uhhmed/prediction_maps/actual_2022052607.tif\n/Users/uhhmed/prediction_maps/actual_2022052608.tif\n/Users/uhhmed/prediction_maps/actual_2022052609.tif\n/Users/uhhmed/prediction_maps/actual_2022052610.tif\n/Users/uhhmed/prediction_maps/actual_2022052611.tif\n/Users/uhhmed/prediction_maps/actual_2022052612.tif\n/Users/uhhmed/prediction_maps/actual_2022052613.tif\n/Users/uhhmed/prediction_maps/actual_2022052614.tif\n/Users/uhhmed/prediction_maps/actual_2022052615.tif\n/Users/uhhmed/prediction_maps/actual_2022052616.tif\n/Users/uhhmed/prediction_maps/actual_2022052617.tif\n/Users/uhhmed/prediction_maps/actual_2022052618.tif\n/Users/uhhmed/prediction_maps/actual_2022052619.tif\n/Users/uhhmed/prediction_maps/actual_2022052620.tif\n/Users/uhhmed/prediction_maps/actual_2022052621.tif\n/Users/uhhmed/prediction_maps/actual_2022052622.tif\n/Users/uhhmed/prediction_maps/actual_2022052623.tif\n/Users/uhhmed/prediction_maps/actual_2022052700.tif\n/Users/uhhmed/prediction_maps/actual_2022052701.tif\n/Users/uhhmed/prediction_maps/actual_2022052702.tif\n/Users/uhhmed/prediction_maps/actual_2022052703.tif\n/Users/uhhmed/prediction_maps/actual_2022052704.tif\n/Users/uhhmed/prediction_maps/actual_2022052705.tif\n/Users/uhhmed/prediction_maps/actual_2022052706.tif\n/Users/uhhmed/prediction_maps/actual_2022052707.tif\n/Users/uhhmed/prediction_maps/actual_2022052708.tif\n/Users/uhhmed/prediction_maps/actual_2022052709.tif\n/Users/uhhmed/prediction_maps/actual_2022052710.tif\n/Users/uhhmed/prediction_maps/actual_2022052711.tif\n/Users/uhhmed/prediction_maps/actual_2022052712.tif\n/Users/uhhmed/prediction_maps/actual_2022052713.tif\n/Users/uhhmed/prediction_maps/actual_2022052714.tif\n/Users/uhhmed/prediction_maps/actual_2022052715.tif\n/Users/uhhmed/prediction_maps/actual_2022052716.tif\n/Users/uhhmed/prediction_maps/actual_2022052717.tif\n/Users/uhhmed/prediction_maps/actual_2022052718.tif\n/Users/uhhmed/prediction_maps/actual_2022052719.tif\n/Users/uhhmed/prediction_maps/actual_2022052720.tif\n/Users/uhhmed/prediction_maps/actual_2022052721.tif\n/Users/uhhmed/prediction_maps/actual_2022052722.tif\n/Users/uhhmed/prediction_maps/actual_2022052723.tif\n",
  "history_begin_time" : 1654005145701,
  "history_end_time" : 1654006719807,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "YEwLFeUitVeC",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n    \n\n    # Add individual AirNow stations in US with color representation.\n\n    gdfAirnow = gpd.GeoDataFrame(\n    AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude,AirnowObs.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(gdf.crs)\n    #gdfAirnow = gdfAirnow.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual CMAQ: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1654003774558,
  "history_end_time" : 1654004411019,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "lXoT9kvtAT1P",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n    gdfAirnow = gpd.GeoDataFrame(\n    AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude,AirnowObs.Latitude))\n\n    # Add individual AirNow stations in US with color representation.\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow = gdfAirnow.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual CMAQ: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 56, in <module>\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\nNameError: name 'predDf' is not defined\n",
  "history_begin_time" : 1654003372382,
  "history_end_time" : 1654003400675,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mwKJrsFt0KBq",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n    gdfAirnow = gpd.GeoDataFrame(\n    AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude,AirnowObs.Latitude))\n\n    # Add individual AirNow stations in US with color representation.\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow = gdfAirnow.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', cmap=cmap, figsize=(20, 15))\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual CMAQ: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'CMAQ12KM_O3(ppb)'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"gen_images.py\", line 45, in <module>\n    gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py\", line 716, in plot_dataframe\n    values = df[column]\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/geodataframe.py\", line 1327, in __getitem__\n    result = super().__getitem__(key)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'CMAQ12KM_O3(ppb)'\n",
  "history_begin_time" : 1654003236036,
  "history_end_time" : 1654003254055,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yCaDeRXiGN5L",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/testing.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual CMAQ: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/actual_\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/actual_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/actual.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/actual.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/actual.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/actual.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/actual.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 6533 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 6530 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7f921bc30740] 255(+1) colors generated out of 334250 colors; ratio=0.000763\nOutput #0, gif, to '/Users/uhhmed/actual.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.3 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00316x    \nframe=    4 fps=1.0 q=-0.0 size=    2304kB time=00:00:00.31 bitrate=60885.1kbits/s speed=0.0807x    \nframe=    6 fps=1.4 q=-0.0 size=    3584kB time=00:00:00.51 bitrate=57568.9kbits/s speed=0.116x    \nframe=    8 fps=1.6 q=-0.0 size=    5120kB time=00:00:00.71 bitrate=59074.7kbits/s speed=0.143x    \nframe=   10 fps=1.8 q=-0.0 size=    6144kB time=00:00:00.91 bitrate=55309.5kbits/s speed=0.164x    \nframe=   12 fps=2.0 q=-0.0 size=    7424kB time=00:00:01.11 bitrate=54790.5kbits/s speed=0.183x    \nframe=   14 fps=2.1 q=-0.0 size=    8704kB time=00:00:01.31 bitrate=54429.9kbits/s speed= 0.2x    \nframe=   16 fps=2.2 q=-0.0 size=    9984kB time=00:00:01.51 bitrate=54164.9kbits/s speed=0.212x    \nframe=   18 fps=2.3 q=-0.0 size=   11520kB time=00:00:01.71 bitrate=55188.2kbits/s speed=0.221x    \nframe=   20 fps=2.4 q=-0.0 size=   13056kB time=00:00:01.91 bitrate=55997.3kbits/s speed=0.229x    \nframe=   22 fps=2.4 q=-0.0 size=   14592kB time=00:00:02.11 bitrate=56652.9kbits/s speed=0.234x    \nframe=   24 fps=2.5 q=-0.0 size=   16128kB time=00:00:02.31 bitrate=57195.1kbits/s speed=0.239x    \nframe=   26 fps=2.5 q=-0.0 size=   17664kB time=00:00:02.51 bitrate=57650.8kbits/s speed=0.241x    \nframe=   28 fps=2.5 q=-0.0 size=   19200kB time=00:00:02.71 bitrate=58039.3kbits/s speed=0.244x    \nframe=   30 fps=2.5 q=-0.0 size=   20736kB time=00:00:02.91 bitrate=58374.3kbits/s speed=0.247x    \nframe=   32 fps=2.6 q=-0.0 size=   22016kB time=00:00:03.11 bitrate=57992.0kbits/s speed=0.252x    \nframe=   34 fps=2.6 q=-0.0 size=   23296kB time=00:00:03.31 bitrate=57655.8kbits/s speed=0.257x    \nframe=   36 fps=2.7 q=-0.0 size=   24576kB time=00:00:03.51 bitrate=57358.0kbits/s speed=0.261x    \nframe=   38 fps=2.7 q=-0.0 size=   25856kB time=00:00:03.71 bitrate=57092.3kbits/s speed=0.265x    \nframe=   40 fps=2.8 q=-0.0 size=   27136kB time=00:00:03.91 bitrate=56853.7kbits/s speed=0.269x    \nframe=   42 fps=2.8 q=-0.0 size=   28672kB time=00:00:04.11 bitrate=57148.7kbits/s speed=0.272x    \nframe=   44 fps=2.8 q=-0.0 size=   30208kB time=00:00:04.31 bitrate=57416.2kbits/s speed=0.275x    \nframe=   46 fps=2.8 q=-0.0 size=   31744kB time=00:00:04.51 bitrate=57660.1kbits/s speed=0.277x    \nframe=   47 fps=2.8 q=-0.0 size=   32512kB time=00:00:04.61 bitrate=57774.0kbits/s speed=0.272x    \nframe=   47 fps=2.8 q=-0.0 Lsize=   33411kB time=00:00:04.61 bitrate=59372.0kbits/s speed=0.272x    \nvideo:33411kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000058%\n/Users/uhhmed/prediction_maps/actual_2022052600.tif\n/Users/uhhmed/prediction_maps/actual_2022052601.tif\n/Users/uhhmed/prediction_maps/actual_2022052602.tif\n/Users/uhhmed/prediction_maps/actual_2022052603.tif\n/Users/uhhmed/prediction_maps/actual_2022052604.tif\n/Users/uhhmed/prediction_maps/actual_2022052605.tif\n/Users/uhhmed/prediction_maps/actual_2022052606.tif\n/Users/uhhmed/prediction_maps/actual_2022052607.tif\n/Users/uhhmed/prediction_maps/actual_2022052608.tif\n/Users/uhhmed/prediction_maps/actual_2022052609.tif\n/Users/uhhmed/prediction_maps/actual_2022052610.tif\n/Users/uhhmed/prediction_maps/actual_2022052611.tif\n/Users/uhhmed/prediction_maps/actual_2022052612.tif\n/Users/uhhmed/prediction_maps/actual_2022052613.tif\n/Users/uhhmed/prediction_maps/actual_2022052614.tif\n/Users/uhhmed/prediction_maps/actual_2022052615.tif\n/Users/uhhmed/prediction_maps/actual_2022052616.tif\n/Users/uhhmed/prediction_maps/actual_2022052617.tif\n/Users/uhhmed/prediction_maps/actual_2022052618.tif\n/Users/uhhmed/prediction_maps/actual_2022052619.tif\n/Users/uhhmed/prediction_maps/actual_2022052620.tif\n/Users/uhhmed/prediction_maps/actual_2022052621.tif\n/Users/uhhmed/prediction_maps/actual_2022052622.tif\n/Users/uhhmed/prediction_maps/actual_2022052623.tif\n/Users/uhhmed/prediction_maps/actual_2022052700.tif\n/Users/uhhmed/prediction_maps/actual_2022052701.tif\n/Users/uhhmed/prediction_maps/actual_2022052702.tif\n/Users/uhhmed/prediction_maps/actual_2022052703.tif\n/Users/uhhmed/prediction_maps/actual_2022052704.tif\n/Users/uhhmed/prediction_maps/actual_2022052705.tif\n/Users/uhhmed/prediction_maps/actual_2022052706.tif\n/Users/uhhmed/prediction_maps/actual_2022052707.tif\n/Users/uhhmed/prediction_maps/actual_2022052708.tif\n/Users/uhhmed/prediction_maps/actual_2022052709.tif\n/Users/uhhmed/prediction_maps/actual_2022052710.tif\n/Users/uhhmed/prediction_maps/actual_2022052711.tif\n/Users/uhhmed/prediction_maps/actual_2022052712.tif\n/Users/uhhmed/prediction_maps/actual_2022052713.tif\n/Users/uhhmed/prediction_maps/actual_2022052714.tif\n/Users/uhhmed/prediction_maps/actual_2022052715.tif\n/Users/uhhmed/prediction_maps/actual_2022052716.tif\n/Users/uhhmed/prediction_maps/actual_2022052717.tif\n/Users/uhhmed/prediction_maps/actual_2022052718.tif\n/Users/uhhmed/prediction_maps/actual_2022052719.tif\n/Users/uhhmed/prediction_maps/actual_2022052720.tif\n/Users/uhhmed/prediction_maps/actual_2022052721.tif\n/Users/uhhmed/prediction_maps/actual_2022052722.tif\n/Users/uhhmed/prediction_maps/actual_2022052723.tif\n",
  "history_begin_time" : 1653749154891,
  "history_end_time" : 1653750189722,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7rNHrjAsclnh",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/testing.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/actual_\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/actual_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/actual.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/actual.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/actual.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/actual.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1653748877085,
  "history_end_time" : 1653749089886,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Rm2SN3jGSNJp",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 12497 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 12494 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fe9c8604b40] 255(+1) colors generated out of 576634 colors; ratio=0.000442\nOutput #0, gif, to '/Users/uhhmed/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00223x    \nframe=    4 fps=0.8 q=-0.0 size=    2304kB time=00:00:00.31 bitrate=60885.1kbits/s speed=0.0585x    \nframe=    6 fps=1.0 q=-0.0 size=    3840kB time=00:00:00.51 bitrate=61680.9kbits/s speed=0.0846x    \nframe=    8 fps=1.2 q=-0.0 size=    5632kB time=00:00:00.71 bitrate=64982.2kbits/s speed=0.105x    \nframe=   10 fps=1.3 q=-0.0 size=    7424kB time=00:00:00.91 bitrate=66832.3kbits/s speed=0.121x    \nframe=   12 fps=1.4 q=-0.0 size=    8960kB time=00:00:01.11 bitrate=66126.4kbits/s speed=0.134x    \nframe=   14 fps=1.5 q=-0.0 size=   10752kB time=00:00:01.31 bitrate=67236.9kbits/s speed=0.145x    \nframe=   16 fps=1.6 q=-0.0 size=   12544kB time=00:00:01.51 bitrate=68053.3kbits/s speed=0.153x    \nframe=   18 fps=1.7 q=-0.0 size=   14080kB time=00:00:01.71 bitrate=67452.3kbits/s speed=0.161x    \nframe=   20 fps=1.8 q=-0.0 size=   15872kB time=00:00:01.91 bitrate=68075.1kbits/s speed=0.168x    \nframe=   22 fps=1.8 q=-0.0 size=   17408kB time=00:00:02.11 bitrate=67585.9kbits/s speed=0.173x    \nframe=   24 fps=1.9 q=-0.0 size=   18688kB time=00:00:02.31 bitrate=66273.6kbits/s speed=0.18x    \nframe=   26 fps=1.9 q=-0.0 size=   20224kB time=00:00:02.51 bitrate=66006.0kbits/s speed=0.185x    \nframe=   28 fps=2.0 q=-0.0 size=   22016kB time=00:00:02.71 bitrate=66551.7kbits/s speed=0.19x    \nframe=   30 fps=2.0 q=-0.0 size=   23552kB time=00:00:02.91 bitrate=66301.7kbits/s speed=0.194x    \nframe=   32 fps=2.0 q=-0.0 size=   25344kB time=00:00:03.11 bitrate=66758.2kbits/s speed=0.197x    \nframe=   34 fps=2.1 q=-0.0 size=   26880kB time=00:00:03.31 bitrate=66526.0kbits/s speed=0.201x    \nframe=   36 fps=2.1 q=-0.0 size=   28672kB time=00:00:03.51 bitrate=66917.7kbits/s speed=0.204x    \nframe=   38 fps=2.1 q=-0.0 size=   30208kB time=00:00:03.71 bitrate=66701.9kbits/s speed=0.207x    \nframe=   40 fps=2.2 q=-0.0 size=   32000kB time=00:00:03.91 bitrate=67044.5kbits/s speed=0.211x    \nframe=   42 fps=2.2 q=-0.0 size=   33536kB time=00:00:04.11 bitrate=66843.5kbits/s speed=0.214x    \nframe=   44 fps=2.2 q=-0.0 size=   35328kB time=00:00:04.31 bitrate=67147.8kbits/s speed=0.216x    \nframe=   46 fps=2.2 q=-0.0 size=   36608kB time=00:00:04.51 bitrate=66495.1kbits/s speed=0.219x    \nframe=   47 fps=2.2 q=-0.0 size=   37376kB time=00:00:04.61 bitrate=66417.4kbits/s speed=0.217x    \nframe=   47 fps=2.2 q=-0.0 Lsize=   38323kB time=00:00:04.61 bitrate=68099.6kbits/s speed=0.217x    \nvideo:38323kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000051%\n/Users/uhhmed/prediction_maps/2022052600.tif\n/Users/uhhmed/prediction_maps/2022052601.tif\n/Users/uhhmed/prediction_maps/2022052602.tif\n/Users/uhhmed/prediction_maps/2022052603.tif\n/Users/uhhmed/prediction_maps/2022052604.tif\n/Users/uhhmed/prediction_maps/2022052605.tif\n/Users/uhhmed/prediction_maps/2022052606.tif\n/Users/uhhmed/prediction_maps/2022052607.tif\n/Users/uhhmed/prediction_maps/2022052608.tif\n/Users/uhhmed/prediction_maps/2022052609.tif\n/Users/uhhmed/prediction_maps/2022052610.tif\n/Users/uhhmed/prediction_maps/2022052611.tif\n/Users/uhhmed/prediction_maps/2022052612.tif\n/Users/uhhmed/prediction_maps/2022052613.tif\n/Users/uhhmed/prediction_maps/2022052614.tif\n/Users/uhhmed/prediction_maps/2022052615.tif\n/Users/uhhmed/prediction_maps/2022052616.tif\n/Users/uhhmed/prediction_maps/2022052617.tif\n/Users/uhhmed/prediction_maps/2022052618.tif\n/Users/uhhmed/prediction_maps/2022052619.tif\n/Users/uhhmed/prediction_maps/2022052620.tif\n/Users/uhhmed/prediction_maps/2022052621.tif\n/Users/uhhmed/prediction_maps/2022052622.tif\n/Users/uhhmed/prediction_maps/2022052623.tif\n/Users/uhhmed/prediction_maps/2022052700.tif\n/Users/uhhmed/prediction_maps/2022052701.tif\n/Users/uhhmed/prediction_maps/2022052702.tif\n/Users/uhhmed/prediction_maps/2022052703.tif\n/Users/uhhmed/prediction_maps/2022052704.tif\n/Users/uhhmed/prediction_maps/2022052705.tif\n/Users/uhhmed/prediction_maps/2022052706.tif\n/Users/uhhmed/prediction_maps/2022052707.tif\n/Users/uhhmed/prediction_maps/2022052708.tif\n/Users/uhhmed/prediction_maps/2022052709.tif\n/Users/uhhmed/prediction_maps/2022052710.tif\n/Users/uhhmed/prediction_maps/2022052711.tif\n/Users/uhhmed/prediction_maps/2022052712.tif\n/Users/uhhmed/prediction_maps/2022052713.tif\n/Users/uhhmed/prediction_maps/2022052714.tif\n/Users/uhhmed/prediction_maps/2022052715.tif\n/Users/uhhmed/prediction_maps/2022052716.tif\n/Users/uhhmed/prediction_maps/2022052717.tif\n/Users/uhhmed/prediction_maps/2022052718.tif\n/Users/uhhmed/prediction_maps/2022052719.tif\n/Users/uhhmed/prediction_maps/2022052720.tif\n/Users/uhhmed/prediction_maps/2022052721.tif\n/Users/uhhmed/prediction_maps/2022052722.tif\n/Users/uhhmed/prediction_maps/2022052723.tif\n",
  "history_begin_time" : 1653701095674,
  "history_end_time" : 1653702302281,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "BrQNAKVU6qSF",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 23, in <module>\n    df = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 933, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1235, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 75, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 551, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n",
  "history_begin_time" : 1653700932652,
  "history_end_time" : 1653700935263,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "U4pTxB9t20f7",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 23, in <module>\n    df = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 933, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1235, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 75, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 551, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n",
  "history_begin_time" : 1653700885642,
  "history_end_time" : 1653700889872,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0lrjplyczd0",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 23, in <module>\n    df = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 933, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1217, in _make_engine\n    self.handles = get_handle(  # type: ignore[call-overload]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/common.py\", line 789, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/uhhmed/prediction_rf.csv'\n",
  "history_begin_time" : 1653698588426,
  "history_end_time" : 1653698633784,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "1kZUlloaqO9G",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 8551 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1808, 8548 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fdcccd11580] 255(+1) colors generated out of 501925 colors; ratio=0.000508\nOutput #0, gif, to '/Users/uhhmed/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.3 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00263x    \nframe=    4 fps=0.9 q=-0.0 size=    1536kB time=00:00:00.31 bitrate=40590.0kbits/s speed=0.0682x    \nframe=    6 fps=1.2 q=-0.0 size=    2816kB time=00:00:00.51 bitrate=45232.7kbits/s speed=0.0994x    \nframe=    8 fps=1.4 q=-0.0 size=    3840kB time=00:00:00.71 bitrate=44306.0kbits/s speed=0.124x    \nframe=   10 fps=1.6 q=-0.0 size=    5120kB time=00:00:00.91 bitrate=46091.3kbits/s speed=0.145x    \nframe=   12 fps=1.8 q=-0.0 size=    6144kB time=00:00:01.11 bitrate=45343.8kbits/s speed=0.163x    \nframe=   14 fps=1.9 q=-0.0 size=    7424kB time=00:00:01.31 bitrate=46425.5kbits/s speed=0.178x    \nframe=   16 fps=2.0 q=-0.0 size=    8448kB time=00:00:01.51 bitrate=45831.8kbits/s speed=0.19x    \nframe=   18 fps=2.1 q=-0.0 size=    9472kB time=00:00:01.71 bitrate=45377.0kbits/s speed=0.201x    \nframe=   20 fps=2.2 q=-0.0 size=   10752kB time=00:00:01.91 bitrate=46115.4kbits/s speed=0.211x    \nframe=   22 fps=2.3 q=-0.0 size=   11776kB time=00:00:02.11 bitrate=45719.9kbits/s speed=0.22x    \nframe=   24 fps=2.4 q=-0.0 size=   12544kB time=00:00:02.31 bitrate=44485.0kbits/s speed=0.227x    \nframe=   26 fps=2.4 q=-0.0 size=   13568kB time=00:00:02.51 bitrate=44282.5kbits/s speed=0.234x    \nframe=   28 fps=2.5 q=-0.0 size=   14848kB time=00:00:02.71 bitrate=44883.7kbits/s speed=0.241x    \nframe=   30 fps=2.5 q=-0.0 size=   15872kB time=00:00:02.91 bitrate=44681.6kbits/s speed=0.246x    \nframe=   32 fps=2.6 q=-0.0 size=   17152kB time=00:00:03.11 bitrate=45179.8kbits/s speed=0.252x    \nframe=   34 fps=2.6 q=-0.0 size=   18176kB time=00:00:03.31 bitrate=44984.2kbits/s speed=0.256x    \nframe=   36 fps=2.7 q=-0.0 size=   19200kB time=00:00:03.51 bitrate=44810.9kbits/s speed=0.261x    \nframe=   38 fps=2.7 q=-0.0 size=   20480kB time=00:00:03.71 bitrate=45221.6kbits/s speed=0.264x    \nframe=   40 fps=2.7 q=-0.0 size=   21504kB time=00:00:03.91 bitrate=45053.9kbits/s speed=0.266x    \nframe=   42 fps=2.7 q=-0.0 size=   22784kB time=00:00:04.11 bitrate=45412.8kbits/s speed=0.269x    \nframe=   44 fps=2.8 q=-0.0 size=   23808kB time=00:00:04.31 bitrate=45251.8kbits/s speed=0.273x    \nframe=   46 fps=2.8 q=-0.0 size=   24832kB time=00:00:04.51 bitrate=45105.0kbits/s speed=0.276x    \nframe=   47 fps=2.8 q=-0.0 size=   25088kB time=00:00:04.61 bitrate=44581.5kbits/s speed=0.274x    \nframe=   47 fps=2.8 q=-0.0 Lsize=   25803kB time=00:00:04.61 bitrate=45851.4kbits/s speed=0.274x    \nvideo:25803kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000076%\n/Users/uhhmed/prediction_maps/2022051600.tif\n/Users/uhhmed/prediction_maps/2022051601.tif\n/Users/uhhmed/prediction_maps/2022051602.tif\n/Users/uhhmed/prediction_maps/2022051603.tif\n/Users/uhhmed/prediction_maps/2022051604.tif\n/Users/uhhmed/prediction_maps/2022051605.tif\n/Users/uhhmed/prediction_maps/2022051606.tif\n/Users/uhhmed/prediction_maps/2022051607.tif\n/Users/uhhmed/prediction_maps/2022051608.tif\n/Users/uhhmed/prediction_maps/2022051609.tif\n/Users/uhhmed/prediction_maps/2022051610.tif\n/Users/uhhmed/prediction_maps/2022051611.tif\n/Users/uhhmed/prediction_maps/2022051612.tif\n/Users/uhhmed/prediction_maps/2022051613.tif\n/Users/uhhmed/prediction_maps/2022051614.tif\n/Users/uhhmed/prediction_maps/2022051615.tif\n/Users/uhhmed/prediction_maps/2022051616.tif\n/Users/uhhmed/prediction_maps/2022051617.tif\n/Users/uhhmed/prediction_maps/2022051618.tif\n/Users/uhhmed/prediction_maps/2022051619.tif\n/Users/uhhmed/prediction_maps/2022051620.tif\n/Users/uhhmed/prediction_maps/2022051621.tif\n/Users/uhhmed/prediction_maps/2022051622.tif\n/Users/uhhmed/prediction_maps/2022051623.tif\n/Users/uhhmed/prediction_maps/2022051700.tif\n/Users/uhhmed/prediction_maps/2022051701.tif\n/Users/uhhmed/prediction_maps/2022051702.tif\n/Users/uhhmed/prediction_maps/2022051703.tif\n/Users/uhhmed/prediction_maps/2022051704.tif\n/Users/uhhmed/prediction_maps/2022051705.tif\n/Users/uhhmed/prediction_maps/2022051706.tif\n/Users/uhhmed/prediction_maps/2022051707.tif\n/Users/uhhmed/prediction_maps/2022051708.tif\n/Users/uhhmed/prediction_maps/2022051709.tif\n/Users/uhhmed/prediction_maps/2022051710.tif\n/Users/uhhmed/prediction_maps/2022051711.tif\n/Users/uhhmed/prediction_maps/2022051712.tif\n/Users/uhhmed/prediction_maps/2022051713.tif\n/Users/uhhmed/prediction_maps/2022051714.tif\n/Users/uhhmed/prediction_maps/2022051715.tif\n/Users/uhhmed/prediction_maps/2022051716.tif\n/Users/uhhmed/prediction_maps/2022051717.tif\n/Users/uhhmed/prediction_maps/2022051718.tif\n/Users/uhhmed/prediction_maps/2022051719.tif\n/Users/uhhmed/prediction_maps/2022051720.tif\n/Users/uhhmed/prediction_maps/2022051721.tif\n/Users/uhhmed/prediction_maps/2022051722.tif\n/Users/uhhmed/prediction_maps/2022051723.tif\n",
  "history_begin_time" : 1653235338984,
  "history_end_time" : 1653236007354,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xJzdd3lu0Q3Q",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 15),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1500) to (2000, 1504) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 8497 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1504, 8495 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7f8ceb107cc0] 255(+1) colors generated out of 501772 colors; ratio=0.000508\nOutput #0, gif, to '/Users/uhhmed/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8(pc, gbr/unknown/unknown, progressive), 2000x1504, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00243x    \nframe=    4 fps=0.8 q=-0.0 size=    1280kB time=00:00:00.31 bitrate=33825.0kbits/s speed=0.0647x    \nframe=    6 fps=1.1 q=-0.0 size=    2304kB time=00:00:00.51 bitrate=37008.6kbits/s speed=0.0938x    \nframe=    8 fps=1.3 q=-0.0 size=    3328kB time=00:00:00.71 bitrate=38398.6kbits/s speed=0.117x    \nframe=   10 fps=1.5 q=-0.0 size=    4608kB time=00:00:00.91 bitrate=41482.1kbits/s speed=0.135x    \nframe=   12 fps=1.6 q=-0.0 size=    5632kB time=00:00:01.11 bitrate=41565.2kbits/s speed=0.151x    \nframe=   14 fps=1.8 q=-0.0 size=    6912kB time=00:00:01.31 bitrate=43223.7kbits/s speed=0.166x    \nframe=   16 fps=1.9 q=-0.0 size=    7936kB time=00:00:01.51 bitrate=43054.1kbits/s speed=0.179x    \nframe=   19 fps=2.1 q=-0.0 size=    9728kB time=00:00:01.81 bitrate=44028.6kbits/s speed=0.197x    \nframe=   21 fps=2.2 q=-0.0 size=   10752kB time=00:00:02.01 bitrate=43821.1kbits/s speed=0.207x    \nframe=   23 fps=2.2 q=-0.0 size=   12032kB time=00:00:02.21 bitrate=44600.1kbits/s speed=0.216x    \nframe=   26 fps=2.4 q=-0.0 size=   13568kB time=00:00:02.51 bitrate=44282.5kbits/s speed=0.229x    \nframe=   28 fps=2.4 q=-0.0 size=   14336kB time=00:00:02.71 bitrate=43336.0kbits/s speed=0.235x    \nframe=   31 fps=2.5 q=-0.0 size=   15872kB time=00:00:03.01 bitrate=43197.2kbits/s speed=0.246x    \nframe=   33 fps=2.6 q=-0.0 size=   17152kB time=00:00:03.21 bitrate=43772.3kbits/s speed=0.251x    \nframe=   35 fps=2.6 q=-0.0 size=   18176kB time=00:00:03.41 bitrate=43665.0kbits/s speed=0.257x    \nframe=   37 fps=2.7 q=-0.0 size=   19456kB time=00:00:03.61 bitrate=44150.6kbits/s speed=0.262x    \nframe=   39 fps=2.7 q=-0.0 size=   20480kB time=00:00:03.81 bitrate=44034.7kbits/s speed=0.266x    \nframe=   41 fps=2.8 q=-0.0 size=   21760kB time=00:00:04.01 bitrate=44453.3kbits/s speed=0.269x    \nframe=   43 fps=2.8 q=-0.0 size=   22784kB time=00:00:04.21 bitrate=44334.1kbits/s speed=0.272x    \nframe=   45 fps=2.8 q=-0.0 size=   23808kB time=00:00:04.41 bitrate=44225.7kbits/s speed=0.275x    \nframe=   47 fps=2.8 q=-0.0 size=   25088kB time=00:00:04.61 bitrate=44581.5kbits/s speed=0.278x    \nframe=   47 fps=2.8 q=-0.0 Lsize=   25806kB time=00:00:04.61 bitrate=45857.7kbits/s speed=0.274x    \nvideo:25806kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000076%\n/Users/uhhmed/prediction_maps/2022051723.tif\n/Users/uhhmed/prediction_maps/2022051722.tif\n/Users/uhhmed/prediction_maps/2022051721.tif\n/Users/uhhmed/prediction_maps/2022051720.tif\n/Users/uhhmed/prediction_maps/2022051719.tif\n/Users/uhhmed/prediction_maps/2022051718.tif\n/Users/uhhmed/prediction_maps/2022051717.tif\n/Users/uhhmed/prediction_maps/2022051716.tif\n/Users/uhhmed/prediction_maps/2022051715.tif\n/Users/uhhmed/prediction_maps/2022051714.tif\n/Users/uhhmed/prediction_maps/2022051713.tif\n/Users/uhhmed/prediction_maps/2022051712.tif\n/Users/uhhmed/prediction_maps/2022051711.tif\n/Users/uhhmed/prediction_maps/2022051710.tif\n/Users/uhhmed/prediction_maps/2022051709.tif\n/Users/uhhmed/prediction_maps/2022051708.tif\n/Users/uhhmed/prediction_maps/2022051707.tif\n/Users/uhhmed/prediction_maps/2022051706.tif\n/Users/uhhmed/prediction_maps/2022051705.tif\n/Users/uhhmed/prediction_maps/2022051704.tif\n/Users/uhhmed/prediction_maps/2022051703.tif\n/Users/uhhmed/prediction_maps/2022051702.tif\n/Users/uhhmed/prediction_maps/2022051701.tif\n/Users/uhhmed/prediction_maps/2022051700.tif\n/Users/uhhmed/prediction_maps/2022051623.tif\n/Users/uhhmed/prediction_maps/2022051622.tif\n/Users/uhhmed/prediction_maps/2022051621.tif\n/Users/uhhmed/prediction_maps/2022051620.tif\n/Users/uhhmed/prediction_maps/2022051619.tif\n/Users/uhhmed/prediction_maps/2022051618.tif\n/Users/uhhmed/prediction_maps/2022051617.tif\n/Users/uhhmed/prediction_maps/2022051616.tif\n/Users/uhhmed/prediction_maps/2022051615.tif\n/Users/uhhmed/prediction_maps/2022051614.tif\n/Users/uhhmed/prediction_maps/2022051613.tif\n/Users/uhhmed/prediction_maps/2022051612.tif\n/Users/uhhmed/prediction_maps/2022051611.tif\n/Users/uhhmed/prediction_maps/2022051610.tif\n/Users/uhhmed/prediction_maps/2022051609.tif\n/Users/uhhmed/prediction_maps/2022051608.tif\n/Users/uhhmed/prediction_maps/2022051607.tif\n/Users/uhhmed/prediction_maps/2022051606.tif\n/Users/uhhmed/prediction_maps/2022051605.tif\n/Users/uhhmed/prediction_maps/2022051604.tif\n/Users/uhhmed/prediction_maps/2022051603.tif\n/Users/uhhmed/prediction_maps/2022051602.tif\n/Users/uhhmed/prediction_maps/2022051601.tif\n/Users/uhhmed/prediction_maps/2022051600.tif\n",
  "history_begin_time" : 1653232850799,
  "history_end_time" : 1653233526162,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "cWHBEUco2734",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 10),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1000) to (2000, 1008) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 7296 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x1008, 7294 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nFile '/Users/uhhmed/prediction.gif' already exists. Overwrite? [y/N] \n\nStream closed",
  "history_begin_time" : 1653231104627,
  "history_end_time" : 1653232820020,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "1jLl63Z8puzi",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 10),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1653230923762,
  "history_end_time" : 1653232819469,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "4r9DZsxCQHqg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 15),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1653230666385,
  "history_end_time" : 1653232818557,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "SIDjjeJZi9Nm",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 2500) to (2000, 2512) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:00.10, start: 0.000000, bitrate: 10986 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x2512, 10922 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[Parsed_palettegen_2 @ 0x7fa3e0006480] 255(+1) colors generated out of 122853 colors; ratio=0.002076\nOutput #0, gif, to '/Users/uhhmed/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, pal8, 2000x2512, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nError writing trailer of /Users/uhhmed/prediction.gif: Invalid argument\nframe=    0 fps=0.0 q=0.0 Lsize=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nvideo:0kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\nOutput file is empty, nothing was encoded (check -ss / -t / -frames parameters if used)\n/Users/uhhmed/prediction_maps/2022051712.tif\n",
  "history_begin_time" : 1653230574570,
  "history_end_time" : 1653230599106,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "OsNMJZCTky9E",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 45, in <module>\n    format='%.0f', boundaries=np.arange(0,84,4),       \nNameError: name 'np' is not defined\n",
  "history_begin_time" : 1653230546407,
  "history_end_time" : 1653230562874,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XEUxrBp8MqTR",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 15, in <module>\n    matplotlib.rcParams['font.size'] = 25\nNameError: name 'matplotlib' is not defined\n",
  "history_begin_time" : 1653230536351,
  "history_end_time" : 1653230538347,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uJh0HUiFCfXA",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 29, in <module>\n    norm = mpl.colors.Normalize(vmin=0,vmax=84)\nNameError: name 'mpl' is not defined\n",
  "history_begin_time" : 1653230517000,
  "history_end_time" : 1653230523813,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "U0CLTzLnYl7v",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = plt.get_cmap('WhiteBlueGreenYellowRed', 22)\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 28, in <module>\n    cmap = plt.get_cmap('WhiteBlueGreenYellowRed', 22)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/matplotlib/cm.py\", line 286, in get_cmap\n    _api.check_in_list(sorted(_cmap_registry), name=name)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/matplotlib/_api/__init__.py\", line 129, in check_in_list\n    raise ValueError(msg)\nValueError: 'WhiteBlueGreenYellowRed' is not a valid value for name; supported values are 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'winter', 'winter_r'\n",
  "history_begin_time" : 1653229708654,
  "history_end_time" : 1653229715057,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AAaM8GKOdSSY",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = plt.get_cmap('WhiteBlueGreenYellowRed', 22)\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 28, in <module>\n    cmap = plt.get_cmap('WhiteBlueGreenYellowRed', 22)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/matplotlib/cm.py\", line 286, in get_cmap\n    _api.check_in_list(sorted(_cmap_registry), name=name)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/matplotlib/_api/__init__.py\", line 129, in check_in_list\n    raise ValueError(msg)\nValueError: 'WhiteBlueGreenYellowRed' is not a valid value for name; supported values are 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'winter', 'winter_r'\n",
  "history_begin_time" : 1653229409140,
  "history_end_time" : 1653229415530,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "iYl38aDgyae1",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = plt.get_cmap('WhiteBlueGreenYellowRed', 22)\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n\tgdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\ncb.outline.set_linewidth(2)\ncb.dividers.set_color('black')\ncb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "  File \"gen_images.py\", line 42\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n                                                                ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1653229371704,
  "history_end_time" : 1653229372045,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "tmxs44yUbOuh",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\nfig, ax = plt.subplots()\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, vmin=0, vmax=80, ax=ax )\n    \n    # This function formatter will replace integers with target names\n    formatter = plt.FuncFormatter(lambda val, loc: df.prediction[val])\n\n    # We must be sure to specify the ticks matching our target names\n    fig.colorbar(ax=ax, ticks=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], format=formatter, location='bottom');\n\n    # Set the clim so that labels are centered on each block\n    plt.clim(0, 40.5)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files, reverse=True)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /Users/uhhmed/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 23, in <module>\n    df = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 933, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/parsers/readers.py\", line 1217, in _make_engine\n    self.handles = get_handle(  # type: ignore[call-overload]\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/pandas/io/common.py\", line 789, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/uhhmed/prediction_rf.csv'\n",
  "history_begin_time" : 1653019665745,
  "history_end_time" : 1653019696119,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CECLfaG4kbpH",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/opt/anaconda3/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 2500) to (2000, 2512) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 5.0 Copyright (c) 2000-2022 the FFmpeg developers\n  built with Apple clang version 13.0.0 (clang-1300.0.29.30)\n  configuration: --prefix=/usr/local/Cellar/ffmpeg/5.0 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox\n  libavutil      57. 17.100 / 57. 17.100\n  libavcodec     59. 18.100 / 59. 18.100\n  libavformat    59. 16.100 / 59. 16.100\n  libavdevice    59.  4.100 / 59.  4.100\n  libavfilter     8. 24.100 /  8. 24.100\n  libswscale      6.  4.100 /  6.  4.100\n  libswresample   4.  3.100 /  4.  3.100\n  libpostproc    56.  3.100 / 56.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/uhhmed/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 4413 kb/s\n  Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 2000x2512, 4410 kb/s, 10 fps, 10 tbr, 10240 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f7955742000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f795574f000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f795575f000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f7955791000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f79557aa000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f79557c3000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f79557dc000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f79557f5000] No accelerated colorspace conversion found from yuv420p to bgr8.\n[swscaler @ 0x7f795433c000] [swscaler @ 0x7f795580e000] No accelerated colorspace conversion found from yuv420p to bgr8.\nOutput #0, gif, to 'prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf59.16.100\n  Stream #0:0(und): Video: gif, bgr8(pc, gbr/unknown/unknown, progressive), 2000x2512, q=2-31, 200 kb/s, 10 fps, 100 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc59.18.100 gif\nframe=    1 fps=0.0 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.102x    \nframe=   16 fps=0.0 q=-0.0 size=    3328kB time=00:00:01.51 bitrate=18055.0kbits/s speed= 2.4x    \nframe=   33 fps= 28 q=-0.0 size=    6912kB time=00:00:03.21 bitrate=17639.6kbits/s speed=2.77x    \nframe=   48 fps= 29 q=-0.0 Lsize=   10437kB time=00:00:04.71 bitrate=18153.4kbits/s speed=2.89x    \nvideo:10437kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000187%\n/Users/uhhmed/prediction_maps/2022051621.tif\n/Users/uhhmed/prediction_maps/2022051609.tif\n/Users/uhhmed/prediction_maps/2022051608.tif\n/Users/uhhmed/prediction_maps/2022051620.tif\n/Users/uhhmed/prediction_maps/2022051622.tif\n/Users/uhhmed/prediction_maps/2022051623.tif\n/Users/uhhmed/prediction_maps/2022051618.tif\n/Users/uhhmed/prediction_maps/2022051619.tif\n/Users/uhhmed/prediction_maps/2022051722.tif\n/Users/uhhmed/prediction_maps/2022051723.tif\n/Users/uhhmed/prediction_maps/2022051721.tif\n/Users/uhhmed/prediction_maps/2022051709.tif\n/Users/uhhmed/prediction_maps/2022051708.tif\n/Users/uhhmed/prediction_maps/2022051720.tif\n/Users/uhhmed/prediction_maps/2022051718.tif\n/Users/uhhmed/prediction_maps/2022051719.tif\n/Users/uhhmed/prediction_maps/2022051717.tif\n/Users/uhhmed/prediction_maps/2022051703.tif\n/Users/uhhmed/prediction_maps/2022051702.tif\n/Users/uhhmed/prediction_maps/2022051716.tif\n/Users/uhhmed/prediction_maps/2022051700.tif\n/Users/uhhmed/prediction_maps/2022051714.tif\n/Users/uhhmed/prediction_maps/2022051715.tif\n/Users/uhhmed/prediction_maps/2022051701.tif\n/Users/uhhmed/prediction_maps/2022051705.tif\n/Users/uhhmed/prediction_maps/2022051711.tif\n/Users/uhhmed/prediction_maps/2022051710.tif\n/Users/uhhmed/prediction_maps/2022051704.tif\n/Users/uhhmed/prediction_maps/2022051712.tif\n/Users/uhhmed/prediction_maps/2022051706.tif\n/Users/uhhmed/prediction_maps/2022051707.tif\n/Users/uhhmed/prediction_maps/2022051713.tif\n/Users/uhhmed/prediction_maps/2022051600.tif\n/Users/uhhmed/prediction_maps/2022051614.tif\n/Users/uhhmed/prediction_maps/2022051615.tif\n/Users/uhhmed/prediction_maps/2022051601.tif\n/Users/uhhmed/prediction_maps/2022051617.tif\n/Users/uhhmed/prediction_maps/2022051603.tif\n/Users/uhhmed/prediction_maps/2022051602.tif\n/Users/uhhmed/prediction_maps/2022051616.tif\n/Users/uhhmed/prediction_maps/2022051612.tif\n/Users/uhhmed/prediction_maps/2022051606.tif\n/Users/uhhmed/prediction_maps/2022051607.tif\n/Users/uhhmed/prediction_maps/2022051613.tif\n/Users/uhhmed/prediction_maps/2022051605.tif\n/Users/uhhmed/prediction_maps/2022051611.tif\n/Users/uhhmed/prediction_maps/2022051610.tif\n/Users/uhhmed/prediction_maps/2022051604.tif\n",
  "history_begin_time" : 1652876198500,
  "history_end_time" : 1652876852275,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "cO66N3GC3yAF",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv('/Users/uhhmed/prediction_rf.csv')\nAirnowObs = pd.read_csv(\"/Users/uhhmed/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:3]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/Users/uhhmed/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /Users/uhhmed/prediction.mp4 prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /Users/uhhmed/prediction.mp4')\n",
  "history_output" : "/Users/uhhmed/prediction_maps/2022051714.tif\n/Users/uhhmed/prediction_maps/2022051712.tif\n/Users/uhhmed/prediction_maps/2022051713.tif\nTraceback (most recent call last):\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/plugins/ffmpeg.py\", line 59, in _get_ffmpeg_api\n    import imageio_ffmpeg\nModuleNotFoundError: No module named 'imageio_ffmpeg'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"gen_images.py\", line 70, in <module>\n    imageio.mimsave(\"/Users/uhhmed/prediction.mp4\", images)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/core/functions.py\", line 397, in mimwrite\n    writer = get_writer(uri, format, \"I\", **kwargs)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/core/functions.py\", line 231, in get_writer\n    return format.get_writer(request)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/core/format.py\", line 185, in get_writer\n    return self.Writer(self, request)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/core/format.py\", line 221, in __init__\n    self._open(**self.request.kwargs.copy())\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/plugins/ffmpeg.py\", line 525, in _open\n    self._ffmpeg_api = _get_ffmpeg_api()\n  File \"/opt/anaconda3/lib/python3.8/site-packages/imageio/plugins/ffmpeg.py\", line 61, in _get_ffmpeg_api\n    raise ImportError(\nImportError: To use the imageio ffmpeg plugin you need to 'pip install imageio-ffmpeg'\n",
  "history_begin_time" : 1652875997728,
  "history_end_time" : 1652876060952,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "PXqL77EnmRlN",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:3]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n/home/aalnaim/cmaq/prediction_maps/2022050913.tif\n/home/aalnaim/cmaq/prediction_maps/2022050914.tif\n/home/aalnaim/cmaq/prediction_maps/2022050915.tif\n/home/aalnaim/cmaq/prediction_maps/2022050916.tif\n",
  "history_begin_time" : 1652800962299,
  "history_end_time" : 1652801032894,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "UIlDOHfSsgyi",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:5]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n/home/aalnaim/cmaq/prediction_maps/2022050913.tif\n/home/aalnaim/cmaq/prediction_maps/2022050914.tif\n/home/aalnaim/cmaq/prediction_maps/2022050915.tif\n/home/aalnaim/cmaq/prediction_maps/2022050916.tif\n",
  "history_begin_time" : 1652798914407,
  "history_end_time" : 1652799011481,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "F30uKgkf7S1k",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:5]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n/home/aalnaim/cmaq/prediction_maps/2022050913.tif\n/home/aalnaim/cmaq/prediction_maps/2022050914.tif\n/home/aalnaim/cmaq/prediction_maps/2022050915.tif\n/home/aalnaim/cmaq/prediction_maps/2022050916.tif\n",
  "history_begin_time" : 1652798164532,
  "history_end_time" : 1652798264771,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0YUGu9ApiBgt",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n",
  "history_begin_time" : 1652798016026,
  "history_end_time" : 1652798060006,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fFDvgYYuqdlN",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, categorical=True, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 40, in <module>\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 926, in plot_dataframe\n    ax.legend(patches, categories, **legend_kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/axes/_axes.py\", line 305, in legend\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\nTypeError: __init__() got an unexpected keyword argument 'orientation'\n",
  "history_begin_time" : 1652797925884,
  "history_end_time" : 1652797991395,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XbHLu5Pf7lWz",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:2]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, categorical=True, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 40, in <module>\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 926, in plot_dataframe\n    ax.legend(patches, categories, **legend_kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/axes/_axes.py\", line 305, in legend\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\nTypeError: __init__() got an unexpected keyword argument 'orientation'\n",
  "history_begin_time" : 1652797708307,
  "history_end_time" : 1652797771685,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "13UisNAoLufk",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:2]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, categorical=True, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 40, in <module>\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 926, in plot_dataframe\n    ax.legend(patches, categories, **legend_kwds)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/axes/_axes.py\", line 305, in legend\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\nTypeError: __init__() got an unexpected keyword argument 'orientation'\n",
  "history_begin_time" : 1652797317533,
  "history_end_time" : 1652797379738,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EZZOBrAupyPd",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:5]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n/home/aalnaim/cmaq/prediction_maps/2022050913.tif\n/home/aalnaim/cmaq/prediction_maps/2022050914.tif\n/home/aalnaim/cmaq/prediction_maps/2022050915.tif\n/home/aalnaim/cmaq/prediction_maps/2022050916.tif\n",
  "history_begin_time" : 1652796665712,
  "history_end_time" : 1652796769572,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sntMDCemTBEb",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:5]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : null,
  "history_begin_time" : 1652796565565,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "YtDvy4vF2puW",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction11.gif', images)",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1652795730330,
  "history_end_time" : 1652796595647,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "AfOyCpspRvgR",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1652793325777,
  "history_end_time" : 1652795403345,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "LP3JzGEUyV2E",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nmatplotlib.rcParams['font.size'] = 15\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 20})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1652791882661,
  "history_end_time" : 1652793335476,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "X4ZMmIdIQJjg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\nfig, ax = plt.subplots()\n\nfor t in time_:\n    df = dfs[t]\n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    predDF = gdf.plot(column='prediction', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 25), legend=True, \n             legend_kwds={'orientation': \"horizontal\"})\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle)\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\", dpi=100)\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1652786839228,
  "history_end_time" : 1652791882722,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "lAuWXQXRMgMp",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nimport cmaps\nfrom datetime import datetime\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\nfig, ax = plt.subplots()\n\nfor t in time_:\n    df = dfs[t]\n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    predDF = gdf.plot(column='prediction', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 25), legend=True, \n             legend_kwds={'orientation': \"horizontal\"})\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle)\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\", dpi=100)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"gen_images.py\", line 8, in <module>\n    import cmaps\nModuleNotFoundError: No module named 'cmaps'\n",
  "history_begin_time" : 1652786645534,
  "history_end_time" : 1652786676899,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "iwoC11KOuApP",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nimport cmaps\nfrom datetime import datetime\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\nfig, ax = plt.subplots()\n\nfor t in time_:\n    df = dfs[t]\n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    predDF = gdf.plot(column='prediction', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 25), legend=True, \n             legend_kwds={'orientation': \"horizontal\"})\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle)\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\", dpi=100)\n",
  "history_output" : "bash: python: command not found\n",
  "history_begin_time" : 1652786624360,
  "history_end_time" : 1652786626132,
  "history_notes" : null,
  "history_process" : "71jsbn",
  "host_id" : null,
  "indicator" : "Done"
},]
