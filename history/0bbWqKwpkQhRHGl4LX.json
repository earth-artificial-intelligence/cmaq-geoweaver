[{
  "history_id" : "bghemib8jkq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138099,
  "history_end_time" : 1723109138099,
  "history_notes" : null,
  "history_process" : "6up921",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0f151hey2zt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138099,
  "history_end_time" : 1723109138099,
  "history_notes" : null,
  "history_process" : "xpdg66",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "arrht78ewow",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138099,
  "history_end_time" : 1723109138099,
  "history_notes" : null,
  "history_process" : "xlayd5",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "clz1c72tg1u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138099,
  "history_end_time" : 1723109138099,
  "history_notes" : null,
  "history_process" : "argv3i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "57f7f6zqma5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138099,
  "history_end_time" : 1723109138099,
  "history_notes" : null,
  "history_process" : "l8vlic",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j4t3is0jrc3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138100,
  "history_end_time" : 1723109138100,
  "history_notes" : null,
  "history_process" : "wny2dz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xwwhlfltwme",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138100,
  "history_end_time" : 1723109138100,
  "history_notes" : null,
  "history_process" : "3asyzj",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lh0zp9v42xh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138100,
  "history_end_time" : 1723109138100,
  "history_notes" : null,
  "history_process" : "9xdvh6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "igc0zs48nyf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138100,
  "history_end_time" : 1723109138100,
  "history_notes" : null,
  "history_process" : "ex3vh9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "svycuzluoxw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138100,
  "history_end_time" : 1723109138100,
  "history_notes" : null,
  "history_process" : "b8uv5z",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8z2j6kfxum8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143521,
  "history_notes" : null,
  "history_process" : "is1w3m",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "67gl0dv5o7v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138104,
  "history_end_time" : 1723109138104,
  "history_notes" : null,
  "history_process" : "h76ld0",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n8gl7zbsjnp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138104,
  "history_end_time" : 1723109138104,
  "history_notes" : null,
  "history_process" : "s6hbic",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n87kjibdv5x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138104,
  "history_end_time" : 1723109138104,
  "history_notes" : null,
  "history_process" : "pvzabv",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3o4n1kl3mmj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138104,
  "history_end_time" : 1723109138104,
  "history_notes" : null,
  "history_process" : "8i9ptn",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0se8z9ymzjo",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143520,
  "history_notes" : null,
  "history_process" : "iicy7w",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hfbhw5mthat",
  "history_input" : "#!/bin/bash\n\ndays_back=90\n\npermanent_location=\"/groups/ESS3/zsun/cmaq/ai_results/\"\ncmaq_gif_location=\"/groups/ESS/share/projects/SWUS3km/graph/12km/\"\n\necho \"start to traverse \"${cmaq_gif_location}\n\nfor i in $(seq 0 $days_back)\ndo\n  end_day=$i\n  echo \"$end_day days ago\"\n  begin_day=$((i))\n  # Setting env variables\n  YYYYMMDD_POST=$(date -d $begin_day' day ago' '+%Y%m%d')\n  #/groups/ESS/share/projects/SWUS3km/graph/12km/20221108/FORECAST_O3_20221108.gif\n  cp -u $cmaq_gif_location/$YYYYMMDD_POST/\"FORECAST_O3_\"$YYYYMMDD_POST.gif $permanent_location/gifs/ || true\n  cp -u $cmaq_gif_location/$YYYYMMDD_POST/obsoverlay/gif/OBS-FORECAST_O3_$YYYYMMDD_POST.gif $permanent_location/gifs/ || true\n  \ndone\n",
  "history_output" : "start to traverse /groups/ESS/share/projects/SWUS3km/graph/12km/\n0 days ago\ncp: cannot stat '/groups/ESS/share/projects/SWUS3km/graph/12km//20240808/FORECAST_O3_20240808.gif': No such file or directory\ncp: cannot stat '/groups/ESS/share/projects/SWUS3km/graph/12km//20240808/obsoverlay/gif/OBS-FORECAST_O3_20240808.gif': No such file or directory\n1 days ago\ncp: cannot stat '/groups/ESS/share/projects/SWUS3km/graph/12km//20240807/obsoverlay/gif/OBS-FORECAST_O3_20240807.gif': No such file or directory\n2 days ago\ncp: cannot stat '/groups/ESS/share/projects/SWUS3km/graph/12km//20240806/obsoverlay/gif/OBS-FORECAST_O3_20240806.gif': No such file or directory\n3 days ago\n4 days ago\n5 days ago\n6 days ago\n7 days ago\n8 days ago\n9 days ago\n10 days ago\n11 days ago\n12 days ago\n13 days ago\n14 days ago\n15 days ago\n16 days ago\n17 days ago\n18 days ago\n19 days ago\n20 days ago\n21 days ago\n22 days ago\n23 days ago\n24 days ago\n25 days ago\n26 days ago\n27 days ago\n28 days ago\n29 days ago\n30 days ago\n31 days ago\n32 days ago\n33 days ago\n34 days ago\n35 days ago\n36 days ago\n37 days ago\n38 days ago\n39 days ago\n40 days ago\n41 days ago\n42 days ago\n43 days ago\n44 days ago\n45 days ago\n46 days ago\n47 days ago\n48 days ago\n49 days ago\n50 days ago\n51 days ago\n52 days ago\n53 days ago\n54 days ago\n55 days ago\n56 days ago\n57 days ago\n58 days ago\n59 days ago\n60 days ago\n61 days ago\n62 days ago\n63 days ago\n64 days ago\n65 days ago\n66 days ago\n67 days ago\n68 days ago\n69 days ago\n70 days ago\n71 days ago\n72 days ago\n73 days ago\n74 days ago\n75 days ago\n76 days ago\n77 days ago\n78 days ago\n79 days ago\n80 days ago\n81 days ago\n82 days ago\n83 days ago\n84 days ago\n85 days ago\n86 days ago\n87 days ago\n88 days ago\n89 days ago\n90 days ago\n",
  "history_begin_time" : 1723109138882,
  "history_end_time" : 1723109143529,
  "history_notes" : null,
  "history_process" : "nndpw6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xhfnmiccnbu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143527,
  "history_notes" : null,
  "history_process" : "gn54f0",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1ojvvwz9qgu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143523,
  "history_notes" : null,
  "history_process" : "fsk7f2",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2314vyp3t22",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1723109138108,
  "history_end_time" : 1723109138108,
  "history_notes" : null,
  "history_process" : "slsirb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3w51r3dp2vp",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143516,
  "history_notes" : null,
  "history_process" : "xa1jxg",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ok4iy2jjued",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143518,
  "history_notes" : null,
  "history_process" : "klx3sc",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i579l5mm1i5",
  "history_input" : "#!/bin/bash\n\n\necho \"start to run processing_test_data_generated.sh\"\npwd\n\n# Specify the name of the script you want to submit\nSCRIPT_NAME=\"processing_test_data_generated.sh\"\necho \"write the slurm script into ${SCRIPT_NAME}\"\ncat > ${SCRIPT_NAME} << EOF\n#!/bin/bash\n#SBATCH -J processing_test_data       # Job name\n#SBATCH --output=/scratch/%u/%x-%N-%j.out  # Output file`\n#SBATCH --error=/scratch/%u/%x-%N-%j.err   # Error file`\n#SBATCH -n 1               # Number of tasks\n#SBATCH -c 4               # Number of CPUs per task (threads)\n#SBATCH --mem=50G          # Memory per node (use units like G for gigabytes) - this job must need 200GB lol\n#SBATCH -t 0-01:00         # Runtime in D-HH:MM format\n\n# Activate your customized virtual environment\nsource /home/zsun/anaconda3/bin/activate\n\npython -u  << INNER_EOF\n\n# get hourly CMAQ data into csv for prediction\n\nfrom cmaq_ai_utils import *\n\n\n#edate = datetime.today()\n#sdate = edate - timedelta(days=1)\n# today = datetime.today()\n# edate = today\n# sdate = today - timedelta(days=days_back)\n\n#sdate = date(2022, 8, 6)   # start date\n#edate = date(2022, 8, 8)   # end date\n# days = get_days_list_for_prediction(sdate, edate)\n\nreal_hour_list = [12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11]\ntime_step_in_netcdf_list = range(0,24)\n\ntest_folder = f\"{cmaq_folder}/testing_input_hourly/\"\n#create_and_clean_folder(test_folder)  # don't clean folder anymore\n#os.makedirs(test_folder, exist_ok=True)\n\nfor x in range(len(days)-1):\n  current_day = days[x]\n  next_day = days[x+1]\n  print(\"Getting data for: \"+current_day)\n  \n  # read cmaq results\n  cmaq_file = \"/scratch/sma8/forecast/12km/POST/COMBINE3D_ACONC_v531_gcc_AQF5X_\"+current_day+\".nc\"\n  if not os.path.exists(cmaq_file):\n    print(f\"CMAQ file {cmaq_file} doesn't exist\")\n    continue\n  \n  target_cdf_file = f'{cmaq_folder}/prediction_nc_files/COMBINE3D_ACONC_v531_gcc_AQF5X_'+current_day+'_ML_extracted.nc'\n    \n  if os.path.exists(target_cdf_file):\n    print(f\"{target_cdf_file} already exists\")\n    continue\n  \n  df_cmaq = xr.open_dataset(cmaq_file, engine='netcdf4')\n  \n  # read mcip results \n  mcip_file = \"/scratch/sma8/forecast/mcip/12km/METCRO2D_\"+current_day+\".nc\"\n  df_mcip = xr.open_dataset(mcip_file, engine='netcdf4')\n  \n  # read emissions results \n  df_emis = xr.open_dataset(\"/groups/ESS/share/projects/SWUS3km/data/cmaqdata/emis2021/12km/all/emis_mole_all_\"+current_day+\"_AQF5X_cmaq_cb6ae7_2017gb_17j.ncf\", engine='netcdf4')\n  \n  for k in time_step_in_netcdf_list:\n    \n    real_hour_value = real_hour_list[k]\n    \n    if real_hour_value<12:\n      day = next_day\n    else:\n      day = current_day\n    \n    hourly_target_file = f'{test_folder}/test_data_{day}_{turn_2_digits(real_hour_value)}.csv'\n    if os.path.exists(hourly_target_file):\n      print(f\"Hourly csv file {hourly_target_file} already exist\")\n      continue\n    \n    df_hourly = pd.DataFrame()\n    \n    #print(\"df_cmaq.variables['O3'] shape: \", df_cmaq.variables['O3'].shape)\n    #print(\"df_cmaq.variables['O3'][:] shape: \", df_cmaq.variables['O3'][:].shape)\n    #print(\"df_cmaq.variables['O3'][:].values[k, 0].shape\", df_cmaq.variables['O3'][:].values[k, 0].shape)\n    # CMAQ data\n    # O3 variable\n    o3=df_cmaq.variables['O3'][:].values[k, 0]\n    cmaq_O3=list(np.ravel(o3).transpose())\n    #print(\"o3 shape: \", o3.shape)\n    #print(\"cmaq_O3 shape: \", np.ravel(o3).transpose().shape)\n    \n    # NO2\n    no2=df_cmaq.variables['NO2'][:].values[k, 0]\n    cmaq_NO2=list(np.ravel(no2).transpose())\n    \n    # CO\n    co=df_cmaq.variables['CO'][:].values[k, 0]\n    cmaq_CO=list(np.ravel(co).transpose())\n    \n    # PM25_CO\n    pm25=df_cmaq.variables['PM25_OC'][:].values[k, 0]\n    cmaq_PM25_CO=list(np.ravel(pm25).transpose())\n    \n    # EMIS data\n    co_emis=df_emis.variables['CO'][:].values[k, 0]\n    CO_emi=list(np.ravel(co_emis).transpose())    \n    \n    # MCIP data\n    # CO variable\n    prsfc=df_mcip.variables['PRSFC'][:].values[k, 0]\n    PRSFC=list(np.ravel(prsfc).transpose())\n    \n    # NO2\n    pbl=df_mcip.variables['PBL'][:].values[k, 0]\n    PBL=list(np.ravel(pbl).transpose())\n    \n    # TEMP2\n    temp2=df_mcip.variables['TEMP2'][:].values[k, 0]\n    TEMP2=list(np.ravel(temp2).transpose())\n    \n    # WSPD10\n    wspd10=df_mcip.variables['WSPD10'][:].values[k, 0]\n    WSPD10=list(np.ravel(wspd10).transpose())\n    \n    # WDIR10\n    wdir10=df_mcip.variables['WDIR10'][:].values[k, 0]\n    WDIR10=list(np.ravel(wdir10).transpose())\n    \n    # RGRND\n    rgrnd=df_mcip.variables['RGRND'][:].values[k, 0]\n    RGRND=list(np.ravel(rgrnd).transpose())\n    \n    # CFRAC\n    cfrac=df_mcip.variables['CFRAC'][:].values[k, 0]\n    CFRAC=list(np.ravel(cfrac).transpose())\n    \n    ## LAT/LON data\n    df_coords = xr.open_dataset('/home/yli74/scripts/plots/2020fire/GRIDCRO2D', engine='netcdf4')\n    \n    lat = df_coords.variables['LAT'][:].values[0,0]\n    #print(\"lat shape\", lat.shape)\n    lat_flt=np.ravel(lat)\n    LAT=lat_flt #np.tile(lat_flt,1)\n    \n    lon = df_coords.variables['LON'][:].values[0,0]\n    lon_flt=np.ravel(lon)\n    LON=lon_flt #np.tile(lon_flt,1)\n    \n    df_hourly['Latitude'] = LAT\n    df_hourly['Longitude'] = LON\n    df_hourly['YYYYMMDDHH'] = day+turn_2_digits(real_hour_value)\n    df_hourly['CMAQ12KM_O3(ppb)'] = cmaq_O3\n    df_hourly['CMAQ12KM_NO2(ppb)'] = cmaq_NO2\n    df_hourly['CMAQ12KM_CO(ppm)'] = cmaq_CO\n    df_hourly['CMAQ_OC(ug/m3)'] = cmaq_PM25_CO\n    df_hourly['CO(moles/s)'] = CO_emi\n    df_hourly['PRSFC(Pa)'] = PRSFC\n    df_hourly['PBL(m)'] = PBL\n    df_hourly['TEMP2(K)'] = TEMP2\n    df_hourly['WSPD10(m/s)'] = WSPD10\n    df_hourly['WDIR10(degree)'] = WDIR10\n    df_hourly['RGRND(W/m2)'] = RGRND\n    df_hourly['CFRAC'] = CFRAC\n    df_hourly['month'] = df_hourly['YYYYMMDDHH'].str[4:6]\n    df_hourly['day'] = df_hourly['YYYYMMDDHH'].str[6:8]\n    df_hourly['hours'] = df_hourly['YYYYMMDDHH'].str[8:10]\n    print(f'Saving file: test_data_{day}_{turn_2_digits(real_hour_value)}.csv')\n    df_hourly.to_csv(hourly_target_file, index=False)\n\nprint('Done with preparing testing data!')\n\n\nINNER_EOF\n\nEOF\n\n# Submit the Slurm job and wait for it to finish\necho \"sbatch ${SCRIPT_NAME}\"\n\n# Submit the Slurm job\njob_id=$(sbatch ${SCRIPT_NAME} | awk '{print $4}')\necho \"job_id=\"${job_id}\n\nif [ -z \"${job_id}\" ]; then\n    echo \"job id is empty. something wrong with the slurm job submission.\"\n    exit 1\nfi\n\n# Wait for the Slurm job to finish\nfile_name=$(find /scratch/zsun -name '*'${job_id}'.out' -print -quit)\nprevious_content=$(<\"${file_name}\")\nwhile true; do\n    # Capture the current content\n    file_name=$(find /scratch/zsun -name '*'${job_id}'.out' -print -quit)\n    current_content=$(<\"${file_name}\")\n\n    # Compare current content with previous content\n    diff_result=$(diff <(echo \"$previous_content\") <(echo \"$current_content\"))\n    # Check if there is new content\n    if [ -n \"$diff_result\" ]; then\n        echo \"$diff_result\"\n    fi\n    # Update previous content\n    previous_content=\"$current_content\"\n\n\n    job_status=$(scontrol show job ${job_id} | awk '/JobState=/{print $1}')\n    if [[ $job_status == *\"COMPLETED\"* || $job_status == *\"CANCELLED\"* || $job_status == *\"FAILED\"* || $job_status == *\"TIMEOUT\"* || $job_status == *\"NODE_FAIL\"* || $job_status == *\"PREEMPTED\"* || $job_status == *\"OUT_OF_MEMORY\"* ]]; then\n        echo \"Job $job_id has finished with state: $job_status\"\n        break;\n    fi\n    sleep 100  # Adjust the sleep interval as needed\ndone\n\necho \"Slurm job ($job_id) has finished.\"\n\necho \"Print the job's output logs\"\nsacct --format=JobID,JobName,State,ExitCode,MaxRSS,Start,End -j $job_id\n#find /scratch/zsun/ -type f -name \"*${job_id}.out\" -exec cat {} \\;\n\necho \"All slurm job for ${SCRIPT_NAME} finishes.\"\n\njob_status=$(scontrol show job ${job_id} | awk '/JobState=/{print $1}')\nif [[ $job_status != *\"COMPLETED\"* ]]; then\n    exit 1\nfi\n",
  "history_output" : "\nThe remote endpoint was in state [TEXT_FULL_WRITING] which is an invalid state for called method",
  "history_begin_time" : 1723109138683,
  "history_end_time" : 1723109342960,
  "history_notes" : null,
  "history_process" : "z4du0c",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "c7fhw4wcgqj",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143526,
  "history_notes" : null,
  "history_process" : "or8itt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3qr9bi054xn",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1723109143524,
  "history_notes" : null,
  "history_process" : "s8lquu",
  "host_id" : "100001",
  "indicator" : "Stopped"
}]
